//
//     Generated by classdumpios 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class AXIndexMap, AXSSPunctuationGroup, NSArray, NSDictionary, NSMutableDictionary, NSNumber, NSString, SCRCTargetSelectorTimer, SCRCThread, TTSSpeechSynthesizer;
@protocol BSInvalidatable;

@interface VOTOutputSpeechComponent
{
    SCRCThread *_speechThread;	// 24 = 0x18
    AXIndexMap *_allPunctuationTable;	// 32 = 0x20
    AXIndexMap *_selectedLanguageAllPunctuationTable;	// 40 = 0x28
    AXIndexMap *_somePunctuationTable;	// 48 = 0x30
    AXIndexMap *_selectedLanguageSomePunctuationTable;	// 56 = 0x38
    AXIndexMap *_noPunctuationTable;	// 64 = 0x40
    AXIndexMap *_selectedLanguageNoPunctuationTable;	// 72 = 0x48
    AXIndexMap *_specialPunctionTable;	// 80 = 0x50
    AXIndexMap *_noneTableOverrides;	// 88 = 0x58
    NSString *_spokenLanguage;	// 96 = 0x60
    NSDictionary *_languageExceptions;	// 104 = 0x68
    _Bool _isSpeaking;	// 112 = 0x70
    _Bool _userStopped;	// 113 = 0x71
    _Bool _isPaused;	// 114 = 0x72
    _Bool _isVolumeCapped;	// 115 = 0x73
    float _rawVolume;	// 116 = 0x74
    NSMutableDictionary *_speechStatistics;	// 120 = 0x78
    double _lastTimeSpeechStarted;	// 128 = 0x80
    AXIndexMap *_currentActionVariants;	// 136 = 0x88
    id _currentRequest;	// 144 = 0x90
    NSArray *_userSubstitutions;	// 152 = 0x98
    NSArray *_transientSubstitutions;	// 160 = 0xa0
    SCRCTargetSelectorTimer *_stopSpeakingAfterLongPauseTimer;	// 168 = 0xa8
    unsigned long long _lastSetOptions;	// 176 = 0xb0
    AXSSPunctuationGroup *_fileSystemPunctuationGroup;	// 184 = 0xb8
    NSMutableDictionary *_cachedUtterances;	// 192 = 0xc0
    unsigned int _playingSoundID;	// 200 = 0xc8
    NSString *_lastSelectedLanguage;	// 208 = 0xd0
    NSMutableDictionary *_punctuationFallbacks;	// 216 = 0xd8
    TTSSpeechSynthesizer *_synthesizer;	// 224 = 0xe0
    NSDictionary *_emoticonReplacements;	// 232 = 0xe8
    id <BSInvalidatable> _disableIdleTimerAssertion;	// 240 = 0xf0
    NSNumber *_activityBasedAudioDucking;	// 248 = 0xf8
    TTSSpeechSynthesizer *_synthesizerForTelephonyMixin;	// 256 = 0x100
}

+ (void)_setOverrideLocale:(id)arg1;	// IMP=0x0020000000035d5b
- (void).cxx_destruct;	// IMP=0x0020000000046842
@property(retain, nonatomic) TTSSpeechSynthesizer *synthesizerForTelephonyMixin; // @synthesize synthesizerForTelephonyMixin=_synthesizerForTelephonyMixin;
@property(retain, nonatomic) NSNumber *activityBasedAudioDucking; // @synthesize activityBasedAudioDucking=_activityBasedAudioDucking;
@property(retain, nonatomic) id <BSInvalidatable> disableIdleTimerAssertion; // @synthesize disableIdleTimerAssertion=_disableIdleTimerAssertion;
@property(retain, nonatomic) NSDictionary *emoticonReplacements; // @synthesize emoticonReplacements=_emoticonReplacements;
@property(readonly, nonatomic) _Bool isPaused; // @synthesize isPaused=_isPaused;
@property(readonly, nonatomic) _Bool isSpeaking; // @synthesize isSpeaking=_isSpeaking;
@property(readonly, nonatomic) TTSSpeechSynthesizer *synthesizer; // @synthesize synthesizer=_synthesizer;
- (void)setShouldOutputToHearingAid:(_Bool)arg1;	// IMP=0x001000000004675b
- (_Bool)replacesCharacterAsPunctuation:(unsigned short)arg1;	// IMP=0x00100000000466f2
- (void)_didFinishSpeaking:(id)arg1;	// IMP=0x00100000000463f4
- (void)speechSynthesizer:(id)arg1 didFinishSpeakingRequest:(id)arg2 successfully:(_Bool)arg3 withError:(id)arg4;	// IMP=0x0010000000046178
- (void)_didSynthesizeSilentlyToURL:(id)arg1 forRequest:(id)arg2;	// IMP=0x0010000000045f78
- (void)speechSynthesizer:(id)arg1 didSynthesizeSilentlyToURL:(id)arg2 forRequest:(id)arg3;	// IMP=0x0010000000045f37
- (void)speechSynthesizer:(id)arg1 willSpeakRangeOfSpeechString:(struct _NSRange)arg2 forRequest:(id)arg3;	// IMP=0x0010000000045a90
- (void)speechSynthesizer:(id)arg1 didStartSpeakingRequest:(id)arg2;	// IMP=0x0010000000045a4c
- (void)_didStartSpeakingAction:(id)arg1;	// IMP=0x001000000004577b
- (void)_uncapVolume:(float)arg1;	// IMP=0x0010000000045741
- (void)_capVolumeForLanguage:(id)arg1 volume:(float)arg2;	// IMP=0x00100000000456c6
- (unsigned int)_cachedSystemSoundIDForString:(id)arg1;	// IMP=0x0010000000045677
- (id)_processCaptionTextForMarkup:(id)arg1 regex:(id)arg2 range:(struct _NSRange *)arg3;	// IMP=0x00100000000453e6
- (id)_spokenTextForRequest:(id)arg1 range:(struct _NSRange *)arg2;	// IMP=0x0010000000044ed2
- (void)_handlePerformAction:(id)arg1;	// IMP=0x0010000000043ae9
- (void)_updateDuckingBasedOnActivity:(id)arg1;	// IMP=0x00100000000439a1
- (double)outputMutedActivityLastToggleTime;	// IMP=0x0010000000043985
- (id)outputMutedActivityValue:(id)arg1;	// IMP=0x0010000000043970
- (id)_nextUrlForCachedSpeechSynthesis;	// IMP=0x0010000000043840
- (void)_updatePitch:(id)arg1;	// IMP=0x00100000000436df
- (void)_updateActionWithCanonicalMappings:(id)arg1;	// IMP=0x0010000000043652
- (id)_preferenceLanguageForLanguage:(id)arg1 selectedLanguage:(id)arg2;	// IMP=0x00100000000434f8
- (void)_notifyDidFinishSpeakingWithFakeRequestForEvent:(id)arg1;	// IMP=0x0010000000043449
- (id)stringReplacingBrailleDotRanges:(id)arg1;	// IMP=0x00100000000430df
- (_Bool)stringIsInSupportedCharacters:(id)arg1;	// IMP=0x001000000004304d
- (_Bool)_processActionForLiteralEmojis:(id)arg1;	// IMP=0x0010000000042e36
- (void)preprocessAction:(id)arg1;	// IMP=0x001000000004281f
- (void)_determineEmojiPreferenceForAction:(id)arg1;	// IMP=0x0010000000042723
- (void)_preprocessActionLanguageAndVoice:(id)arg1;	// IMP=0x001000000004214e
- (void)_configureSynthesizerWithPhonemeSubstitutionsFromAction:(id)arg1;	// IMP=0x0010000000041baf
- (void)_handleAlternatePronunciation:(id)arg1 voiceIdentifier:(id)arg2;	// IMP=0x00100000000416e3
- (void)_speakAsMixOfLiteralAndNormalText:(id)arg1 withLiteralRanges:(id)arg2;	// IMP=0x0010000000041240
- (void)_speakAsNormalText:(id)arg1;	// IMP=0x0010000000041166
- (id)_stringForNormalText:(id)arg1 action:(id)arg2 allowPausingAtBoundaries:(_Bool)arg3 ignoreLeadingCommas:(_Bool)arg4;	// IMP=0x0010000000040401
- (float)_determineSpeakingRate:(id)arg1 languageCode:(id)arg2;	// IMP=0x001000000004025c
- (float)_determineVolume:(id)arg1;	// IMP=0x0010000000040060
- (void)_replaceUserSubstitutions:(id)arg1 action:(id)arg2;	// IMP=0x001000000003fc88
- (_Bool)_makeSubstitution:(id)arg1 withString:(id)arg2 punctuationGroup:(id)arg3;	// IMP=0x001000000003f8dd
- (void)_processEmoji:(id)arg1 action:(id)arg2;	// IMP=0x001000000003f6b5
- (void);	// IMP=0x001000000003f3a3
- (void)_removeRunsOfNewLines:(id)arg1;	// IMP=0x001000000003f1ec
- (void)_replacePunctuation:(id)arg1 withAction:(id)arg2 languageCode:(id)arg3;	// IMP=0x001000000003ed0b
- (id)_urlRangesInString:(id)arg1 languageCode:(id)arg2;	// IMP=0x001000000003e873
- (id)_determinePunctuationGroupForAction:(id)arg1 isDefault:(_Bool *)arg2;	// IMP=0x001000000003e603
- (id)_determineVoiceIdentifier:(id)arg1 languageCode:(id)arg2;	// IMP=0x001000000003e479
- (id)replacePunctuation:(id)arg1 punctuationGroup:(id)arg2 replaceCommas:(_Bool)arg3 languageCode:(id)arg4;	// IMP=0x001000000003e44c
- (id)_parseNumberInString:(id)arg1 beforeCharacterAtIndex:(long long)arg2 numberRange:(struct _NSRange *)arg3;	// IMP=0x001000000003e1a0
- (_Bool)_replaceRepeatedPuntuationAndEmoji:(id)arg1 newString:(id)arg2 charReplacementString:(id)arg3 charSequence:(id)arg4 charIndex:(long long *)arg5 speakPunctuationCounts:(_Bool)arg6 languageCode:(id)arg7;	// IMP=0x001000000003ddc2
- (void)_replaceRepeatedEmoji:(id)arg1;	// IMP=0x001000000003d880
- (id)_replacePunctuation:(id)arg1 punctuationGroup:(id)arg2 hasMathContext:(_Bool)arg3 hasPhoneContext:(_Bool)arg4 isText:(_Bool)arg5 replaceCommas:(_Bool)arg6 languageCode:(id)arg7 speakPunctuationCounts:(_Bool)arg8;	// IMP=0x001000000003bfee
- (id)baseTableForPunctuationGroup:(id)arg1;	// IMP=0x001000000003bed3
- (id)punctuationReplacement:(id)arg1 withGroup:(id)arg2 baseTable:(id)arg3 languageCode:(id)arg4 selectedLanguage:(id)arg5 spokenLanguage:(id)arg6;	// IMP=0x001000000003b995
- (id)fileSystemPunctuationGroup;	// IMP=0x001000000003b801
- (void)_applyTextualWorkarounds:(id)arg1;	// IMP=0x001000000003b7fb
- (void)_speakAsPhoneticText:(id)arg1;	// IMP=0x001000000003b799
- (void)_speakAsLiteralText:(id)arg1;	// IMP=0x001000000003b68d
- (id)_stringForLiteralText:(id)arg1 action:(id)arg2 allowChangingLanguageForPunctuation:(_Bool)arg3;	// IMP=0x001000000003b187
- (id)_literalStringMarkupForString:(id)arg1 languageCode:(id)arg2 action:(id)arg3;	// IMP=0x001000000003b06c
- (void)_appendLiteralCharacterString:(id)arg1 toString:(id)arg2 hasPhoneContext:(_Bool)arg3 hasMathContext:(_Bool)arg4 action:(id)arg5 punctuationTableLanguageUsed:(_Bool *)arg6;	// IMP=0x001000000003a47d
- (void)_formatTimeDuration:(id)arg1 didMatch:(_Bool *)arg2 voiceIdentifier:(id)arg3;	// IMP=0x0010000000039924
- (void)_formatExplicitTimeDuration:(id)arg1 isMMSS:(_Bool)arg2 languageCode:(id)arg3;	// IMP=0x0010000000039506
- (void)_formatIPAddress:(id)arg1 voiceIdentifier:(id)arg2;	// IMP=0x0010000000038e95
- (void)_formatATVStyleMediaDurations:(id)arg1;	// IMP=0x0010000000038b6c
- (void)_formatUSHeight:(id)arg1 voiceIdentifier:(id)arg2;	// IMP=0x0010000000038675
- (void)_formatNumbers:(id)arg1 action:(id)arg2;	// IMP=0x001000000003826e
- (void)_formatEthernetMacAddress:(id)arg1 voiceIdentifier:(id)arg2;	// IMP=0x0010000000037eb5
- (void)_applyTransliteration:(id)arg1 languageCode:(id)arg2;	// IMP=0x0010000000037d83
- (void)_formatJapaneseYen:(id)arg1;	// IMP=0x0010000000037b1e
- (void)_formatDetectedDates:(id)arg1 voiceIdentifier:(id)arg2 languageCode:(id)arg3;	// IMP=0x00100000000373a1
- (_Bool)_formatDetectedFinnishDates:(id)arg1;	// IMP=0x0010000000036eb7
- (void)_formatTelephoneNumber:(id)arg1 languageCode:(id)arg2 voiceIdentifier:(id)arg3;	// IMP=0x0010000000036d33
- (void)_applyTelephoneFormatting:(id)arg1 withRanges:(id)arg2 languageCode:(id)arg3 voiceIdentifier:(id)arg4;	// IMP=0x0010000000036565
- (void)_applyCamelCaseSeparation:(id)arg1;	// IMP=0x0010000000035e47
- (_Bool)_currentLocaleUsesSpaceAsSeparator;	// IMP=0x0010000000035d6f
- (void)_insertLongerPausesForSymbol:(id)arg1 withText:(id)arg2 allowPausingAtBoundaries:(_Bool)arg3 onlyApplyWhenFollowedBySpace:(_Bool)arg4 languageCode:(id)arg5 voiceIdentifier:(id)arg6;	// IMP=0x0010000000034be4
- (id)pauseStringForType:(int)arg1 voiceIdentifier:(id)arg2;	// IMP=0x00100000000349ed
- (long long)_ttsVoiceTypeForPauseCalculationWithVoiceIdentifier:(id)arg1;	// IMP=0x00100000000348f3
- (float)_pauseDelayForType:(int)arg1 speechRate:(float)arg2 voiceType:(long long)arg3;	// IMP=0x00100000000348ca
- (id)expectedVoiceIdentifier:(id)arg1;	// IMP=0x0010000000034055
- (_Bool)_shouldForceSiriVoice;	// IMP=0x001000000003404b
- (_Bool)_stringMatchesSpecialCases:(id)arg1 forSymbol:(id)arg2 ranges:(id *)arg3 langaugeCode:(id)arg4;	// IMP=0x0010000000033b30
- (id)_localeSpecificURLRegexForLanguageCode:(id)arg1;	// IMP=0x00100000000338f6
- (id)_localeSpecificURLsForLanguageCode:(id)arg1;	// IMP=0x00100000000338c7
- (id)_secureTextDescription:(id)arg1;	// IMP=0x001000000003383d
- (void)_replaceEmbeddedTTSCommands:(id)arg1;	// IMP=0x001000000003378b
- (void)_speakAllDigits:(id)arg1;	// IMP=0x0010000000033630
- (void)handleEvent:(id)arg1;	// IMP=0x0010000000033573
- (void)dealloc;	// IMP=0x00100000000334f0
- (void)_handleStopSpeaking:(id)arg1;	// IMP=0x0010000000033199
- (void)_handleContinueSpeaking:(id)arg1;	// IMP=0x00100000000330c5
- (void)_handlePauseSpeaking:(id)arg1;	// IMP=0x0010000000032f7c
- (void)_stopSpeakingAfterLongPause:(id)arg1;	// IMP=0x0010000000032eb9
- (void)stopSpeakingAtBoundary:(int)arg1;	// IMP=0x0010000000032ea2
- (void)stopSpeakingAtBoundary:(int)arg1 allRequests:(_Bool)arg2 sessionDeactivationDelay:(id)arg3;	// IMP=0x0010000000032c91
- (void)continueSpeaking;	// IMP=0x0010000000032bd3
- (void)pauseSpeakingAtBoundary:(int)arg1;	// IMP=0x0010000000032ad8
- (void)setVoice:(id)arg1;	// IMP=0x0010000000032a96
- (void)_setVoice:(id)arg1;	// IMP=0x0010000000032995
- (void)setRate:(float)arg1;	// IMP=0x0010000000032913
- (float)rate;	// IMP=0x00100000000328f6
- (void)_setRate:(id)arg1;	// IMP=0x00100000000327d1
- (float)volume;	// IMP=0x00100000000327bf
- (void)setVolume:(float)arg1;	// IMP=0x001000000003273d
- (void)_setVolume:(id)arg1;	// IMP=0x00100000000326e6
- (void)_loadPunctuationTable:(id)arg1 withLevel:(long long)arg2 language:(id)arg3;	// IMP=0x001000000003266c
- (void)_saveSpeechStats;	// IMP=0x00100000000325ea
- (id)currentAllPunctuationTable;	// IMP=0x0010000000032590
- (id)currentNonePunctuationTable;	// IMP=0x0010000000032536
- (id)currentSomePunctuationTable;	// IMP=0x00100000000324dc
- (void)_resetLanguageDataOnSpeechThread:(id)arg1 language:(id)arg2;	// IMP=0x00100000000321eb
- (void)_selectedLanguageChanged:(id)arg1;	// IMP=0x0010000000031d96
- (void)_initializePunctuationData;	// IMP=0x0010000000031c23
- (id)init;	// IMP=0x0010000000031944
- (void)_loadNoneTableOverrides;	// IMP=0x001000000003189e
- (void)_loadSpecialPunctuation;	// IMP=0x001000000003175b
- (void)_updateChannelLayout;	// IMP=0x00100000000312db
- (void)_updateAudioSessionProperties;	// IMP=0x001000000003039c
- (void)updateAudioSessionProperties:(id)arg1;	// IMP=0x0010000000030369
- (void)audioSessionWasInterrupted:(id)arg1;	// IMP=0x0010000000030333
- (void)_audioSessionWasInterrupted:(id)arg1;	// IMP=0x00100000000301a1
- (void)updateAccurateWordCallbacks;	// IMP=0x00100000000300eb
- (_Bool)_usingAllChannels;	// IMP=0x001000000002fd82
- (void)_callStatusChanged;	// IMP=0x001000000002fc3f
- (void)callStatusChanged;	// IMP=0x001000000002fc0c
- (void)_initializeSynthesizer;	// IMP=0x001000000002f4b3
- (void)_createTelephonySynthesizer;	// IMP=0x001000000002f37e
- (void)_tearDownTelephonySynthesizer;	// IMP=0x001000000002f2c1
- (void)_updateUserSubstitutions:(id)arg1;	// IMP=0x001000000002f1c0
- (id)_internalVoiceOverSubstitutions;	// IMP=0x001000000002f0b1
- (void)_initializeThread;	// IMP=0x001000000002f02e
- (double)performSelector:(SEL)arg1 withThreadKey:(id)arg2 waitTime:(double)arg3 cancelMask:(unsigned int)arg4 count:(unsigned int)arg5 objects:(id)arg6;	// IMP=0x001000000002efee
- (double)performSelector:(SEL)arg1 withThreadKey:(id)arg2 count:(unsigned int)arg3 objects:(id)arg4;	// IMP=0x001000000002efc8

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

