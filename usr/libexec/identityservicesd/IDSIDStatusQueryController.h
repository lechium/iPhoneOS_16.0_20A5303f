//
//     Generated by classdumpios 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class IDSPeerIDManager, IMTimer, MISSING_TYPE, NSMutableDictionary, NSMutableSet, NSRecursiveLock, NSString;
@protocol IDSIDStatusDependencyProvider, IMUserDefaults;

@interface IDSIDStatusQueryController : NSObject
{
    IMTimer *_purgeTimer;	// 8 = 0x8
    NSRecursiveLock *_lock;	// 16 = 0x10
    NSMutableDictionary *_idStatusCache;	// 24 = 0x18
    NSMutableDictionary *_completionBlocks;	// 32 = 0x20
    NSMutableDictionary *_startQueryDateByTopLevelService;	// 40 = 0x28
    CDUnknownBlockType _purgeCancelBlock;	// 48 = 0x30
    CDUnknownBlockType _purgeEnqueueBlock;	// 56 = 0x38
    _Bool _loaded;	// 64 = 0x40
    NSMutableDictionary *_numQueriesThisHourByTopLevelService;	// 72 = 0x48
    NSMutableSet *_reportedRateLimitedThisHour;	// 80 = 0x50
    _Bool _allowProxyQueries;	// 88 = 0x58
    IDSPeerIDManager *_peerIDManager;	// 96 = 0x60
    id <IMUserDefaults> _userDefaults;	// 104 = 0x68
    id <IDSIDStatusDependencyProvider> _dependencyProvider;	// 112 = 0x70
    NSString *_plistCachePath;	// 120 = 0x78
}

+ (id)sharedInstance;	// IMP=0x00400000004398e0
- (void).cxx_destruct;	// IMP=0x002000000044ef50
@property(nonatomic) _Bool allowProxyQueries; // @synthesize allowProxyQueries=_allowProxyQueries;
@property(retain, nonatomic) NSString *plistCachePath; // @synthesize plistCachePath=_plistCachePath;
@property(retain, nonatomic) id <IDSIDStatusDependencyProvider> dependencyProvider; // @synthesize dependencyProvider=_dependencyProvider;
@property(retain, nonatomic) id <IMUserDefaults> userDefaults; // @synthesize userDefaults=_userDefaults;
@property(retain, nonatomic) IDSPeerIDManager *peerIDManager; // @synthesize peerIDManager=_peerIDManager;
- (void)_saveCache;	// IMP=0x001000000044ea80
- (void)_wipeLegacyCache;	// IMP=0x001000000044e7a0
- (id)_loadLegacyCache;	// IMP=0x001000000044e560
- (void)_loadCache;	// IMP=0x001000000044dce0
- (id)_plistFilePath;	// IMP=0x001000000044daf0
- (void)_pruneExpiredStatusUnknownEntries;	// IMP=0x001000000044c680
- (void)_loadIfNeeded;	// IMP=0x001000000044c600
- (void)_setPurgeTimer;	// IMP=0x001000000044c5b0
- (void)_flush;	// IMP=0x001000000044c1b0
- (void)clearCache;	// IMP=0x001000000044bae0
- (void)removeCompletionBlockForUniqueIdentifier:(id)arg1;	// IMP=0x001000000044b670
- (void)addCompletionBlock:(CDUnknownBlockType)arg1 forUniqueIdentifier:(id)arg2;	// IMP=0x001000000044aeb0
- (MISSING_TYPE *)_sendIDStatusChanges:forService:URI:success:error: /* Error: Ran out of types for this method. */;	// IMP=0x001000000044a5f0
- (void)infoForIDs:(id)arg1 fromIdentity:(id)arg2 fromURI:(id)arg3 fromService:(id)arg4 infoType:(unsigned long long)arg5 infoOptions:(id)arg6 lightQuery:(_Bool)arg7 allowQuery:(_Bool)arg8 completion:(CDUnknownBlockType)arg9;	// IMP=0x00100000004497a0
- (void)remoteDevicesForIDs:(id)arg1 fromIdentity:(id)arg2 fromURI:(id)arg3 fromService:(id)arg4 lightQuery:(_Bool)arg5 allowQuery:(_Bool)arg6 completionBlock:(CDUnknownBlockType)arg7;	// IMP=0x0010000000448a30
- (id)currentCacheForService:(id)arg1;	// IMP=0x0010000000448540
- (id)currentCache;	// IMP=0x0010000000447f90
- (unsigned int)cachedIDStatusForID:(id)arg1 fromURI:(id)arg2 fromService:(id)arg3 respectExpiry:(_Bool)arg4;	// IMP=0x0010000000446f70
- (unsigned int)cachedIDStatusForID:(id)arg1 fromURI:(id)arg2 fromService:(id)arg3;	// IMP=0x0010000000446eb0
- (void)setCachedIDStatus:(unsigned int)arg1 ForID:(id)arg2 fromURI:(id)arg3 fromService:(id)arg4;	// IMP=0x00100000004463d0
- (void)requestIDStatusForID:(id)arg1 fromIdentity:(id)arg2 fromURI:(id)arg3 fromService:(id)arg4 lightQuery:(_Bool)arg5 allowQuery:(_Bool)arg6 completionBlock:(CDUnknownBlockType)arg7;	// IMP=0x0010000000446240
- (void)requestIDStatusForIDs:(id)arg1 fromIdentity:(id)arg2 fromURI:(id)arg3 fromService:(id)arg4 lightQuery:(_Bool)arg5 allowQuery:(_Bool)arg6 forceQuery:(_Bool)arg7 bypassLimit:(_Bool)arg8 completionBlock:(CDUnknownBlockType)arg9;	// IMP=0x0010000000445770
- (void)_lookupIDStatusForURIs:(id)arg1 fromIdentity:(id)arg2 fromURI:(id)arg3 fromService:(id)arg4 lightQuery:(_Bool)arg5 allowQuery:(_Bool)arg6 forceQuery:(_Bool)arg7 bypassLimit:(_Bool)arg8 completionBlock:(CDUnknownBlockType)arg9;	// IMP=0x001000000043fb80
- (_Bool)hasValidStatusForURI:(id)arg1 fromURI:(id)arg2 fromService:(id)arg3;	// IMP=0x001000000043f5e0
- (id)_negativeTTLForURI:(id)arg1 fromService:(id)arg2;	// IMP=0x001000000043f430
- (id)_validExpiryForURI:(id)arg1 fromService:(id)arg2;	// IMP=0x001000000043f280
- (id)_lookupDateForURI:(id)arg1 fromService:(id)arg2;	// IMP=0x001000000043f0d0
- (id)_cachedResultsForURIs:(id)arg1 fromURI:(id)arg2 fromService:(id)arg3;	// IMP=0x001000000043ed10
- (void)noteIncomingID:(id)arg1 fromService:(id)arg2;	// IMP=0x001000000043e260
- (void)removeCachedEntriesForService:(id)arg1;	// IMP=0x001000000043dfb0
- (unsigned int)_IDStatusForURI:(id)arg1 fromService:(id)arg2;	// IMP=0x001000000043d0a0
- (void)_updateCacheWithStatusUpdates:(id)arg1 fromURI:(id)arg2 fromService:(id)arg3 success:(_Bool)arg4 hadError:(_Bool)arg5 negativeCacheHints:(id)arg6;	// IMP=0x001000000043b400
- (void)dealloc;	// IMP=0x001000000043b380
- (id)init;	// IMP=0x001000000043b290
- (void)_purgeTimerFiredOnMain;	// IMP=0x001000000043b1c0
- (id)initWithShouldAllowProxyQueries:(_Bool)arg1 peerIDManager:(id)arg2 userDefaults:(id)arg3 statusDepencencyProvider:(id)arg4;	// IMP=0x00100000004399a0

@end

