//
//     Generated by classdumpios 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class CPLPrequeliteSynthesizedVariable, CPLPrequeliteTodoVar, CPLPrequeliteVariable, CPLPrequeliteVariableGroup, MISSING_TYPE, NSMutableSet, NSString, _CPLPrequeliteScopeBase, _CPLPrequeliteScopeSyncState;
@protocol PQLInjecting;

@interface CPLPrequeliteScopeStorage
{
    CPLPrequeliteVariable *_nextIndexVar;	// 8 = 0x8
    CPLPrequeliteVariable *_scopeListSyncAnchorVar;	// 16 = 0x10
    NSMutableSet *_modifiedVariables;	// 24 = 0x18
    _CPLPrequeliteScopeBase *_base;	// 32 = 0x20
    CPLPrequeliteVariable *_flagsVar;	// 40 = 0x28
    CPLPrequeliteVariable *_disabledDateVar;	// 48 = 0x30
    CPLPrequeliteVariable *_deleteDateVar;	// 56 = 0x38
    CPLPrequeliteVariable *_libraryInfoVar;	// 64 = 0x40
    CPLPrequeliteVariable *_scopeChangeVar;	// 72 = 0x48
    CPLPrequeliteVariable *_lastLibraryInfoUpdateVar;	// 80 = 0x50
    CPLPrequeliteVariable *_transportScopeVar;	// 88 = 0x58
    _CPLPrequeliteScopeSyncState *_syncState;	// 96 = 0x60
    CPLPrequeliteVariable *_estimatedSizeVar;	// 104 = 0x68
    CPLPrequeliteVariable *_estimatedAssetCountVar;	// 112 = 0x70
    CPLPrequeliteVariable *_initialSyncDateVar;	// 120 = 0x78
    CPLPrequeliteTodoVar *_pushToTransportTodoVar;	// 128 = 0x80
    CPLPrequeliteTodoVar *_pullFromTransportTodoVar;	// 136 = 0x88
    CPLPrequeliteTodoVar *_clientNeedsToPullTodoVar;	// 144 = 0x90
    CPLPrequeliteTodoVar *_updateTransportTodoVar;	// 152 = 0x98
    CPLPrequeliteVariable *_stagedScopeIdentifierVar;	// 160 = 0xa0
    CPLPrequeliteVariableGroup *_all;	// 168 = 0xa8
    CPLPrequeliteVariableGroup *_libraryStateGroup;	// 176 = 0xb0
    id <PQLInjecting> _injectionForScopesAllowingPullFromTransport;	// 184 = 0xb8
    Class _transportGroupClass;	// 192 = 0xc0
    _Bool _noteEndOfResetIfNecessary;	// 200 = 0xc8
    CPLPrequeliteSynthesizedVariable *_hasStagedSyncAnchorsVar;	// 208 = 0xd0
}

+ (id)_supportedScopeTypesWithOptions:(unsigned long long)arg1;	// IMP=0x002000000001cb29
+ (_Bool)_scopeType:(long long)arg1 supportsClientSyncWithOptions:(unsigned long long)arg2;	// IMP=0x001000000001c99c
- (void).cxx_destruct;	// IMP=0x002000000002a577
- (void)writeTransactionDidFail;	// IMP=0x001000000002a3d0
- (void)writeTransactionDidSucceed;	// IMP=0x001000000002a360
- (_Bool)bumpPullFromTransportExpirationIntervalWithError:(id *)arg1;	// IMP=0x001000000002a106
- (id)filterForExcludedScopeIdentifiers:(id)arg1;	// IMP=0x0010000000029fa5
- (id)filterForIncludedScopeIdentifiers:(id)arg1;	// IMP=0x0010000000029e14
- (id)_injectionForFilter:(id)arg1;	// IMP=0x0010000000029cc8
- (void)_getLocalIndexes:(id *)arg1 cloudIndexes:(id *)arg2 forScopeIdentifiers:(id)arg3;	// IMP=0x0010000000029a76
- (void)_noteEndOfResetIfNecessary;	// IMP=0x001000000002991c
- (unsigned long long)estimatedAssetCountForScope:(id)arg1;	// IMP=0x00100000000298ca
- (unsigned long long)estimatedSizeForScope:(id)arg1;	// IMP=0x0010000000029878
- (_Bool)storeEstimatedSize:(unsigned long long)arg1 estimatedAssetCount:(unsigned long long)arg2 forScope:(id)arg3 error:(id *)arg4;	// IMP=0x0010000000029771
- (_Bool)storeSupportedFeatureVersionInLastSync:(unsigned long long)arg1 forScope:(id)arg2 error:(id *)arg3;	// IMP=0x00100000000296bb
- (unsigned long long)supportedFeatureVersionInLastSyncForScope:(id)arg1;	// IMP=0x0010000000029618
- (id)lastDateOfCompletedPullFromTransportForScope:(id)arg1;	// IMP=0x00100000000295fb
- (_Bool)storeLastDateOfClearedPushRepository:(id)arg1 forScope:(id)arg2 error:(id *)arg3;	// IMP=0x0010000000029558
- (id)lastDateOfClearedPushRepositoryForScope:(id)arg1;	// IMP=0x00100000000294c7
- (_Bool)allActiveScopesHasFinishedSyncs;	// IMP=0x00100000000293ce
- (_Bool)hasFinishedAFullSyncForScope:(id)arg1;	// IMP=0x0010000000029334
- (id)initialSyncDateForScope:(id)arg1;	// IMP=0x0010000000029314
- (id)initialSyncAnchorForScope:(id)arg1;	// IMP=0x0010000000029283
- (_Bool)setInitialSyncAnchor:(id)arg1 forScope:(id)arg2 error:(id *)arg3;	// IMP=0x00100000000291e0
- (_Bool)setHasFetchedInitialSyncAnchor:(_Bool)arg1 forScope:(id)arg2 error:(id *)arg3;	// IMP=0x001000000002912a
- (_Bool)hasScopeFetchedInitialSyncAnchor:(id)arg1;	// IMP=0x0010000000029087
- (_Bool)setClassNameOfRecordsForInitialQuery:(id)arg1 forScope:(id)arg2 error:(id *)arg3;	// IMP=0x0010000000028fe4
- (id)classNameOfRecordsForInitialQueryForScope:(id)arg1;	// IMP=0x0010000000028f53
- (_Bool)storeTransientSyncAnchor:(id)arg1 forScope:(id)arg2 error:(id *)arg3;	// IMP=0x0010000000028eb0
- (id)transientSyncAnchorForScope:(id)arg1;	// IMP=0x0010000000028e1f
- (_Bool)discardStagedSyncAnchorWithScopeFilter:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000028cd9
- (_Bool)discardStagedSyncAnchorForScope:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000028c3c
@property(readonly, nonatomic) _Bool hasStagedSyncAnchors;
- (_Bool)hasStagedSyncAnchorForScope:(id)arg1;	// IMP=0x00100000000289ff
- (_Bool)commitSyncAnchorForScope:(id)arg1 error:(id *)arg2;	// IMP=0x00100000000284e5
- (void)_markFirstSyncOfPrimaryAsSuccessfulWithScope:(id)arg1;	// IMP=0x00100000000281df
- (_Bool)resetSyncAnchorForScope:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000028053
- (_Bool)setSyncAnchor:(id)arg1 forScope:(id)arg2 error:(id *)arg3;	// IMP=0x0010000000027c3a
- (id)syncAnchorForScope:(id)arg1 isCommitted:(_Bool *)arg2;	// IMP=0x0010000000027b54
- (_Bool)setDidDropSomeRecordsForScope:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000027ac7
- (_Bool)didDropSomeRecordsForScope:(id)arg1;	// IMP=0x0010000000027a24
- (_Bool)storeDownloadTransportGroup:(id)arg1 forScope:(id)arg2 error:(id *)arg3;	// IMP=0x0010000000027981
- (id)downloadTransportGroupForScope:(id)arg1;	// IMP=0x00100000000278f0
- (_Bool)storeUploadTransportGroup:(id)arg1 forScope:(id)arg2 error:(id *)arg3;	// IMP=0x001000000002784d
- (id)uploadTransportGroupForScope:(id)arg1;	// IMP=0x00100000000277bc
- (_Bool)resetSyncStateForScope:(id)arg1 error:(id *)arg2;	// IMP=0x001000000002757e
- (void)_discardCachedValuesForGroup:(id)arg1;	// IMP=0x001000000002744e
- (_Bool)_storeTransportGroup:(id)arg1 inColumnVariable:(id)arg2 forScope:(id)arg3 error:(id *)arg4;	// IMP=0x00100000000272bf
- (id)_transportGroupForColumnVariable:(id)arg1 forScope:(id)arg2;	// IMP=0x00100000000271ea
- (Class)_transportGroupClass;	// IMP=0x00100000000270ec
- (id)lastScopeChangeUpdateDateForScope:(id)arg1;	// IMP=0x00100000000270cc
- (_Bool)storeScopeChange:(id)arg1 forScope:(id)arg2 scopeChangeHasBeenUpdated:(_Bool *)arg3 error:(id *)arg4;	// IMP=0x0010000000026bc4
- (_Bool)_storeLibraryInfo:(id)arg1 forScope:(id)arg2 libraryInfoHasBeenUpdated:(_Bool *)arg3 error:(id *)arg4;	// IMP=0x00100000000266b9
- (id)scopeChangeForScope:(id)arg1;	// IMP=0x0010000000026306
- (id)_libraryInfoForScope:(id)arg1;	// IMP=0x0010000000026286
- (_Bool)setTransportScope:(id)arg1 forScope:(id)arg2 error:(id *)arg3;	// IMP=0x0010000000026263
- (id)transportScopeForScope:(id)arg1;	// IMP=0x0010000000026243
- (_Bool)setScopeNeedsUpdateFromTransport:(id)arg1 error:(id *)arg2;	// IMP=0x001000000002621e
- (id)_librarySateForScope:(id)arg1;	// IMP=0x0010000000025f4e
- (_Bool)setDeleteDate:(id)arg1 forScope:(id)arg2 error:(id *)arg3;	// IMP=0x0010000000025f2b
- (id)deleteDateForScope:(id)arg1;	// IMP=0x0010000000025f0b
- (_Bool)setDisabledDate:(id)arg1 forScope:(id)arg2 error:(id *)arg3;	// IMP=0x0010000000025ee8
- (id)disabledDateForScope:(id)arg1;	// IMP=0x0010000000025ec8
- (_Bool)updateFlags:(id)arg1 forScope:(id)arg2 error:(id *)arg3;	// IMP=0x0010000000025c97
- (id)flagsForScope:(id)arg1;	// IMP=0x0010000000025c0c
- (id)_valueForColumnVariable:(id)arg1 scope:(id)arg2;	// IMP=0x00100000000259dd
- (MISSING_TYPE *)_storeValue:forColumnVariable:scope:error: /* Error: Ran out of types for this method. */;	// IMP=0x00100000000257fa
- (void)_cacheValue:(id)arg1 forColumnVariable:(id)arg2 scope:(id)arg3;	// IMP=0x0010000000025745
- (_Bool)storeScopeListSyncAnchor:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000025540
- (id)scopeListSyncAnchor;	// IMP=0x0010000000025523
- (_Bool)storeRewindSyncAnchors:(id)arg1 forScope:(id)arg2 error:(id *)arg3;	// IMP=0x0010000000025464
- (id)rewindSyncAnchorsForScope:(id)arg1;	// IMP=0x0010000000025254
- (id)stagingScopeForScope:(id)arg1;	// IMP=0x00100000000251a7
- (id)primaryScope;	// IMP=0x0010000000025137
- (id)validCloudIndexes;	// IMP=0x0010000000024efa
- (id)validLocalIndexes;	// IMP=0x0010000000024cbd
- (id)scopeWithStableIndex:(long long)arg1;	// IMP=0x0010000000024c4b
- (id)scopeWithCloudIndex:(long long)arg1;	// IMP=0x0010000000024bd9
- (id)scopeWithLocalIndex:(long long)arg1;	// IMP=0x0010000000024b67
- (id)scopeWithIdentifier:(id)arg1;	// IMP=0x0010000000024add
- (id)_scopeWithQuery:(id)arg1;	// IMP=0x00100000000248fd
- (_Bool)bumpStableIndexForScopeWithIdentifier:(id)arg1 error:(id *)arg2;	// IMP=0x001000000002479d
- (_Bool)bumpCloudIndexForScopeWithIdentifier:(id)arg1 error:(id *)arg2;	// IMP=0x001000000002463d
- (_Bool)bumpLocalIndexForScopeWithIdentifier:(id)arg1 error:(id *)arg2;	// IMP=0x00100000000244dd
- (long long)_bumpIndexWithError:(id *)arg1;	// IMP=0x001000000002441b
- (_Bool)setScopeType:(long long)arg1 forScope:(id)arg2 error:(id *)arg3;	// IMP=0x001000000002406f
- (_Bool)deleteScopeWithIdentifier:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000023f19
- (id)addScopeWithIdentifier:(id)arg1 scopeType:(long long)arg2 error:(id *)arg3;	// IMP=0x0010000000023d9f
- (_Bool)doesScopeNeedToUpdateTransport:(id)arg1;	// IMP=0x0010000000023c54
- (_Bool)setScope:(id)arg1 hasCompletedTransportUpdate:(long long)arg2 error:(id *)arg3;	// IMP=0x0010000000023c34
- (long long)transportUpdateTaskForScope:(id)arg1;	// IMP=0x0010000000023c17
- (_Bool)setScopeNeedsToUpdateTransport:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000023bf7
- (_Bool)hasScopesNeedingToUpdateTransport;	// IMP=0x0010000000023b18
- (id)enumeratorForScopesNeedingToUpdateTransport;	// IMP=0x0010000000023910
- (_Bool)doesScopeSupportToBePulledByClient:(id)arg1;	// IMP=0x0010000000023817
- (_Bool)doesScopeNeedToBePulledByClient:(id)arg1;	// IMP=0x0010000000023653
- (_Bool)setScopeNeedsToBePulledByClient:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000023633
- (_Bool)setScope:(id)arg1 hasCompletedClientNeedsToPullTask:(long long)arg2 error:(id *)arg3;	// IMP=0x0010000000023613
- (long long)clientNeedsToPullTaskForScope:(id)arg1;	// IMP=0x00100000000235f6
- (id)enumeratorForScopesNeedingToBePulledByClientWithMaximumCount:(unsigned long long)arg1;	// IMP=0x0010000000023382
- (_Bool)doScopesNeedMetadataSync:(id)arg1;	// IMP=0x00100000000231a9
- (id)enumeratorForScopesWithMingling;	// IMP=0x0010000000022ecd
- (_Bool)setPullFromTransportExpirationInterval:(double)arg1 scope:(id)arg2 error:(id *)arg3;	// IMP=0x0010000000022e0d
- (_Bool)doesScopeNeedToPullChangesFromTransport:(id)arg1;	// IMP=0x0010000000022ca3
- (_Bool)setScope:(id)arg1 hasCompletedPullFromTransportTask:(long long)arg2 error:(id *)arg3;	// IMP=0x0010000000022c83
- (long long)pullFromTransportTaskForScope:(id)arg1;	// IMP=0x0010000000022c66
- (_Bool)setAllScopesHasChangesToPullFromTransportWithError:(id *)arg1;	// IMP=0x0010000000022b5f
- (_Bool)setScopeHasChangesToPullFromTransport:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000022b3f
- (_Bool)hasScopesNeedingToPullChangesFromTransport;	// IMP=0x0010000000022a35
- (id)enumeratorForScopesNeedingToPullChangesFromTransport;	// IMP=0x001000000002272c
- (id)_injectionForScopesAllowingPullFromTransport;	// IMP=0x00100000000226b3
- (_Bool)doesScopeNeedToPushChangesToTransport:(id)arg1;	// IMP=0x0010000000022549
- (_Bool)setScope:(id)arg1 hasCompletedPushToTransportTask:(long long)arg2 error:(id *)arg3;	// IMP=0x0010000000022529
- (long long)pushToTransportTaskForScope:(id)arg1;	// IMP=0x001000000002250c
- (_Bool)setScopeHasChangesToPushToTransport:(id)arg1 error:(id *)arg2;	// IMP=0x00100000000224ec
- (_Bool)hasScopesNeedingToPushChangesToTransport;	// IMP=0x00100000000223f4
- (id)enumeratorForScopesNeedingToPushChangesToTransport;	// IMP=0x00100000000220ca
- (_Bool)hasScopesNeedingToPushHighPriorityChangesToTransport;	// IMP=0x0010000000021fcb
- (id)enumeratorForScopesNeedingToPushHighPriorityChangesToTransport;	// IMP=0x0010000000021c98
- (_Bool)forcePushToTransportForActiveScopesWithError:(id *)arg1;	// IMP=0x0010000000021ade
- (_Bool)forceIdentifyUknownScopesWithError:(id *)arg1;	// IMP=0x0010000000021915
- (id)enumeratorForDeletedStagedScopes;	// IMP=0x0010000000021725
- (id)enumeratorForScopesNeedingUpdateFromTransport;	// IMP=0x0010000000021477
- (id)enumeratorForScopesIncludeInactive:(_Bool)arg1;	// IMP=0x001000000002119b
- (_Bool)_setScope:(id)arg1 hasCompletedTaskItem:(long long)arg2 task:(id)arg3 error:(id *)arg4;	// IMP=0x0010000000021008
- (id)_taskItemCompletionDateForScope:(id)arg1 task:(id)arg2;	// IMP=0x0010000000020f3f
- (long long)_taskItemForScope:(id)arg1 task:(id)arg2;	// IMP=0x0010000000020dbf
- (_Bool)_setScope:(id)arg1 hasTaskTodo:(id)arg2 error:(id *)arg3;	// IMP=0x0010000000020c29
- (_Bool)fixStorageAfterAnyVersionChange;	// IMP=0x0010000000020b6c
- (void)_updateStatusForMainScopeChange:(id)arg1;	// IMP=0x0010000000020a66
- (id)statusDictionary;	// IMP=0x0010000000020a59
- (id)recordsDesignation;	// IMP=0x0010000000020a4c
- (void)_fillScopeTypeOrder:(long long [7])arg1 withOrderOfScopeTypes:(id)arg2 name:(id)arg3;	// IMP=0x0010000000020974
- (_Bool)openWithError:(id *)arg1;	// IMP=0x0010000000020857
- (_Bool)upgradeScopesWithNewLibraryOptions:(unsigned long long)arg1 error:(id *)arg2;	// IMP=0x001000000001ffd6
- (_Bool)upgradeStorageToVersion:(long long)arg1;	// IMP=0x001000000001e1f3
- (_Bool)_transferValueFromVariable:(id)arg1 type:(id)arg2 ofStorage:(id)arg3 toColumnVariable:(id)arg4 transformer:(CDUnknownBlockType)arg5;	// IMP=0x001000000001dc83
- (_Bool)initializeStorage;	// IMP=0x001000000001da72
- (_Bool)_createInitialPrimarySyncScope;	// IMP=0x001000000001d92c
- (_Bool)_addScope:(id)arg1 error:(id *)arg2;	// IMP=0x001000000001d5ce
- (double)_minimalPullFromTranportExpirationInterval;	// IMP=0x001000000001d573
- (_Bool)_scopeTypeSupportsClientSync:(long long)arg1;	// IMP=0x001000000001d4ff
- (id)initWithAbstractObject:(id)arg1;	// IMP=0x001000000001cc41

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly, nonatomic) _Bool isAlive;
@property(readonly, nonatomic) _Bool isEmpty;
@property(readonly, nonatomic) _Bool shouldIncludeInStatus;
@property(readonly) Class superclass;

@end

