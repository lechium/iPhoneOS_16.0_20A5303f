//
//     Generated by classdumpios 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class CSDAudioArbitrationController, CSDAudioController, CSDCallController, CSDCallFilterController, CSDCallHistoryManager, CSDCallHistoryManagerXPCServer, CSDCallProviderManager, CSDCallProviderManagerXPCServer, CSDCarPlayManager, CSDClientManager, CSDProviderCallDataSource, CSDRecentsController, CSDRelayCallDataSource, CSDRelayCallDelegate, CSDRelayMessagingController, CSDRouteController, CSDVoIPApplicationController, NSNumber, NSString, TUCallCenter, TUHardwareControlsBroadcaster;
@protocol CSDCallContainer, CSDProcessObserverProtocol, OS_dispatch_queue, TUFeatureFlags;

@interface CSDCallStateController : NSObject
{
    CSDCallHistoryManager *_callHistoryManager;	// 8 = 0x8
    CSDCallProviderManager *_callProviderManager;	// 16 = 0x10
    CSDCallController *_callController;	// 24 = 0x18
    CSDVoIPApplicationController *_voipApplicationController;	// 32 = 0x20
    CSDRelayMessagingController *_relayMessagingController;	// 40 = 0x28
    CSDRecentsController *_recentsController;	// 48 = 0x30
    CSDAudioController *_audioController;	// 56 = 0x38
    CSDAudioArbitrationController *_audioArbitrationController;	// 64 = 0x40
    CSDRouteController *_localRouteController;	// 72 = 0x48
    CSDRouteController *_pairedHostDeviceRouteController;	// 80 = 0x50
    NSObject<OS_dispatch_queue> *_queue;	// 88 = 0x58
    NSString *_currentlyTrackedA2DPRouteIdentifier;	// 96 = 0x60
    CSDCallHistoryManagerXPCServer *_callHistoryManagerXPCServer;	// 104 = 0x68
    CSDCallProviderManagerXPCServer *_callProviderManagerXPCServer;	// 112 = 0x70
    id <TUFeatureFlags> _featureFlags;	// 120 = 0x78
    CSDRelayCallDataSource *_relayCallDataSource;	// 128 = 0x80
    CSDRelayCallDelegate *_relayCallDelegate;	// 136 = 0x88
    CSDClientManager *_clientManager;	// 144 = 0x90
    TUHardwareControlsBroadcaster *_hardwareControlsBroadcaster;	// 152 = 0x98
    id <CSDProcessObserverProtocol> _processObserver;	// 160 = 0xa0
    CSDCarPlayManager *_carPlayManager;	// 168 = 0xa8
    CDUnknownBlockType _clientInvalidationHandler;	// 176 = 0xb0
    CSDProviderCallDataSource *_providerCallDataSource;	// 184 = 0xb8
    NSNumber *_shouldHandleSecureMicrophoneEvents;	// 192 = 0xc0
}

+ (void)sanitizeJoinConversationRequest:(id)arg1;	// IMP=0x0020000000151f47
- (void).cxx_destruct;	// IMP=0x002000000015fe64
@property(retain, nonatomic) NSNumber *shouldHandleSecureMicrophoneEvents; // @synthesize shouldHandleSecureMicrophoneEvents=_shouldHandleSecureMicrophoneEvents;
@property(readonly, nonatomic) CSDProviderCallDataSource *providerCallDataSource; // @synthesize providerCallDataSource=_providerCallDataSource;
@property(copy, nonatomic) CDUnknownBlockType clientInvalidationHandler; // @synthesize clientInvalidationHandler=_clientInvalidationHandler;
@property(readonly, nonatomic) CSDCarPlayManager *carPlayManager; // @synthesize carPlayManager=_carPlayManager;
@property(readonly, nonatomic) id <CSDProcessObserverProtocol> processObserver; // @synthesize processObserver=_processObserver;
@property(readonly, nonatomic) TUHardwareControlsBroadcaster *hardwareControlsBroadcaster; // @synthesize hardwareControlsBroadcaster=_hardwareControlsBroadcaster;
@property(readonly, nonatomic) CSDClientManager *clientManager; // @synthesize clientManager=_clientManager;
@property(readonly, nonatomic) CSDRelayCallDelegate *relayCallDelegate; // @synthesize relayCallDelegate=_relayCallDelegate;
@property(readonly, nonatomic) CSDRelayCallDataSource *relayCallDataSource; // @synthesize relayCallDataSource=_relayCallDataSource;
@property(readonly, nonatomic) id <TUFeatureFlags> featureFlags; // @synthesize featureFlags=_featureFlags;
@property(readonly, nonatomic) CSDCallProviderManagerXPCServer *callProviderManagerXPCServer; // @synthesize callProviderManagerXPCServer=_callProviderManagerXPCServer;
@property(readonly, nonatomic) CSDCallHistoryManagerXPCServer *callHistoryManagerXPCServer; // @synthesize callHistoryManagerXPCServer=_callHistoryManagerXPCServer;
@property(copy, nonatomic) NSString *currentlyTrackedA2DPRouteIdentifier; // @synthesize currentlyTrackedA2DPRouteIdentifier=_currentlyTrackedA2DPRouteIdentifier;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property(readonly, nonatomic) CSDRouteController *pairedHostDeviceRouteController; // @synthesize pairedHostDeviceRouteController=_pairedHostDeviceRouteController;
@property(readonly, nonatomic) CSDRouteController *localRouteController; // @synthesize localRouteController=_localRouteController;
@property(retain, nonatomic) CSDAudioArbitrationController *audioArbitrationController; // @synthesize audioArbitrationController=_audioArbitrationController;
@property(retain, nonatomic) CSDAudioController *audioController; // @synthesize audioController=_audioController;
@property(readonly, nonatomic) CSDRecentsController *recentsController; // @synthesize recentsController=_recentsController;
@property(retain, nonatomic) CSDRelayMessagingController *relayMessagingController; // @synthesize relayMessagingController=_relayMessagingController;
@property(retain, nonatomic) CSDVoIPApplicationController *voipApplicationController; // @synthesize voipApplicationController=_voipApplicationController;
@property(readonly, nonatomic) CSDCallController *callController; // @synthesize callController=_callController;
@property(readonly, nonatomic) CSDCallProviderManager *callProviderManager; // @synthesize callProviderManager=_callProviderManager;
@property(readonly, nonatomic) CSDCallHistoryManager *callHistoryManager; // @synthesize callHistoryManager=_callHistoryManager;
- (_Bool)isInCallUIActive;	// IMP=0x001000000015fb62
- (void)updateAudioArbitration;	// IMP=0x001000000015fb5c
- (void)didChangeFaceTimeCallingAvailability;	// IMP=0x001000000015fa96
- (void)didChangeRelayCallingCapabilities;	// IMP=0x001000000015fa20
- (void)providersChangedForProviderManager:(id)arg1;	// IMP=0x001000000015f9ae
- (oneway void)reportLocalPreviewStoppedForCallWithUniqueProxyIdentifier:(id)arg1;	// IMP=0x001000000015f874
- (oneway void)requestInitialState:(CDUnknownBlockType)arg1;	// IMP=0x001000000015f74c
- (_Bool)isTrackingVoIPCallForBundleIdentifier:(id)arg1;	// IMP=0x001000000015f508
- (id)currentCallsForClient:(id)arg1;	// IMP=0x001000000015f444
- (id)callForClient:(id)arg1 usingCall:(id)arg2;	// IMP=0x001000000015f3af
- (id)currentProxyCalls;	// IMP=0x001000000015f195
- (void)propertiesChangedForCall:(id)arg1;	// IMP=0x001000000015f123
- (void)messagingConnectionCouldNotEstablishLinkForCalls:(id)arg1 didStartConnecting:(_Bool)arg2;	// IMP=0x001000000015efe6
- (void)messagingConnectionFailedForCalls:(id)arg1 didStartConnecting:(_Bool)arg2;	// IMP=0x001000000015eea9
- (void)messagingConnectionEndedForCalls:(id)arg1 didStartConnecting:(_Bool)arg2;	// IMP=0x001000000015ed39
- (oneway void)setClientCapabilities:(id)arg1;	// IMP=0x001000000015ec34
- (oneway void)filterStatusForAddresses:(id)arg1 forBundleIdentifier:(id)arg2 reply:(CDUnknownBlockType)arg3;	// IMP=0x001000000015ea25
- (oneway void)isUnknownAddress:(id)arg1 normalizedAddress:(id)arg2 forBundleIdentifier:(id)arg3 reply:(CDUnknownBlockType)arg4;	// IMP=0x001000000015e806
- (oneway void)shouldRestrictAddresses:(id)arg1 forBundleIdentifier:(id)arg2 performSynchronously:(_Bool)arg3 reply:(CDUnknownBlockType)arg4;	// IMP=0x001000000015e711
- (oneway void)willRestrictAddresses:(id)arg1 forBundleIdentifier:(id)arg2 reply:(CDUnknownBlockType)arg3;	// IMP=0x001000000015e502
- (oneway void)policyForAddresses:(id)arg1 forBundleIdentifier:(id)arg2 reply:(CDUnknownBlockType)arg3;	// IMP=0x001000000015e408
- (oneway void)containsRestrictedHandle:(id)arg1 forBundleIdentifier:(id)arg2 performSynchronously:(_Bool)arg3 reply:(CDUnknownBlockType)arg4;	// IMP=0x001000000015e21e
- (oneway void)pickPairedHostDeviceRouteWithUniqueIdentifier:(id)arg1 shouldWaitUntilAvailable:(_Bool)arg2;	// IMP=0x001000000015e04d
- (oneway void)pickLocalRouteWithUniqueIdentifier:(id)arg1 shouldWaitUntilAvailable:(_Bool)arg2;	// IMP=0x001000000015de7c
- (oneway void)pairedHostDeviceRoutesByUniqueIdentifier:(CDUnknownBlockType)arg1;	// IMP=0x001000000015dd24
- (oneway void)localRoutesByUniqueIdentifier:(CDUnknownBlockType)arg1;	// IMP=0x001000000015db9c
- (oneway void)setCurrentAudioOutputDeviceToDeviceWithUID:(id)arg1;	// IMP=0x001000000015d9bd
- (oneway void)setCurrentAudioInputDeviceToDeviceWithUID:(id)arg1;	// IMP=0x001000000015d7de
- (oneway void)joinConversationWithRequest:(id)arg1;	// IMP=0x001000000015d647
- (oneway void)sendUserScoreToRTCReporting:(id)arg1 withScore:(int)arg2;	// IMP=0x001000000015d550
- (oneway void)activateInCallUIWithActivityContinuationIdentifier:(id)arg1;	// IMP=0x001000000015d014
- (oneway void)shouldAllowRingingCallStatusIndicator:(_Bool)arg1;	// IMP=0x001000000015cdd5
- (oneway void)shouldSuppressInCallStatusBar:(_Bool)arg1;	// IMP=0x001000000015cb95
- (oneway void)setBluetoothAudioFormatForCallWithUniqueProxyIdentifier:(id)arg1 bluetoothAudioFormat:(long long)arg2;	// IMP=0x001000000015c925
- (oneway void)setSharingScreen:(_Bool)arg1 attributes:(id)arg2 forCallWithUniqueProxyIdentifier:(id)arg3;	// IMP=0x001000000015c6df
- (oneway void)setScreenShareAttributesForCallWithUniqueProxyIdentifier:(id)arg1 attributes:(id)arg2;	// IMP=0x001000000015c4b3
- (oneway void)setRemoteVideoPresentationStateForCallWithUniqueProxyIdentifier:(id)arg1 presentationState:(int)arg2;	// IMP=0x001000000015c2b2
- (oneway void)setRemoteVideoPresentationSizeForCallWithUniqueProxyIdentifier:(id)arg1 size:(struct CGSize)arg2;	// IMP=0x001000000015c072
- (oneway void)enteredBackgroundForAllCalls;	// IMP=0x001000000015bf55
- (oneway void)willEnterBackgroundForAllCalls;	// IMP=0x001000000015be2c
- (oneway void)enteredForegroundForCallWithUniqueProxyIdentifier:(id)arg1;	// IMP=0x001000000015bbf0
- (oneway void)updateCallWithProxy:(id)arg1;	// IMP=0x001000000015ba61
- (oneway void)sendHardPauseDigitsForCallWithUniqueProxyIdentifier:(id)arg1;	// IMP=0x001000000015b886
- (oneway void)pullHostedCallsFromPairedHostDevice;	// IMP=0x001000000015b75d
- (oneway void)pushHostedCallsToDestination:(id)arg1;	// IMP=0x001000000015b5ce
- (oneway void)setSharingScreen:(_Bool)arg1 forCallWithUniqueProxyIdentifier:(id)arg2;	// IMP=0x001000000015b302
- (oneway void)setMixesVoiceWithMedia:(_Bool)arg1 forCallWithUniqueProxyIdentifier:(id)arg2;	// IMP=0x001000000015b036
- (oneway void)setIsSendingVideo:(_Bool)arg1 forCallWithUniqueProxyIdentifier:(id)arg2;	// IMP=0x001000000015ad22
- (oneway void)setDownlinkMuted:(_Bool)arg1 forCallWithUniqueProxyIdentifier:(id)arg2;	// IMP=0x001000000015aa56
- (oneway void)setUplinkMuted:(_Bool)arg1 forCallWithUniqueProxyIdentifier:(id)arg2;	// IMP=0x001000000015a78a
- (oneway void)sendMMIOrUSSDCodeWithRequest:(id)arg1;	// IMP=0x001000000015a5fb
- (oneway void)pullCallFromClientUsingHandoffActivityUserInfo:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x001000000015a2d4
- (oneway void)pushRelayingCallsToHostWithSourceIdentifier:(id)arg1;	// IMP=0x001000000015a145
- (oneway void)pullRelayingCallsFromClient;	// IMP=0x001000000015a012
- (oneway void)setTTYType:(int)arg1 forCallWithUniqueProxyIdentifier:(id)arg2;	// IMP=0x0010000000159e0d
- (oneway void)disconnectAllCalls;	// IMP=0x0010000000159ce4
- (oneway void)disconnectCurrentCallAndActivateHeld;	// IMP=0x0010000000159bbb
- (oneway void)playDTMFToneForCallWithUniqueProxyIdentifier:(id)arg1 key:(unsigned char)arg2;	// IMP=0x00100000001598ef
- (oneway void)swapCalls;	// IMP=0x00100000001597c6
- (oneway void)ungroupCallWithUniqueProxyIdentifier:(id)arg1;	// IMP=0x001000000015951e
- (oneway void)groupCallWithUniqueProxyIdentifier:(id)arg1 withOtherCallWithUniqueProxyIdentifier:(id)arg2;	// IMP=0x0010000000159133
- (oneway void)disconnectCallWithUniqueProxyIdentifier:(id)arg1;	// IMP=0x0010000000158e8b
- (oneway void)requestVideoUpgradeForCallWithUniqueProxyIdentifier:(id)arg1;	// IMP=0x00100000001588b6
- (oneway void)unholdCallWithUniqueProxyIdentifier:(id)arg1;	// IMP=0x001000000015860e
- (oneway void)holdCallWithUniqueProxyIdentifier:(id)arg1;	// IMP=0x0010000000158366
- (oneway void)answerCallWithRequest:(id)arg1;	// IMP=0x0010000000157f77
- (void)_dial:(id)arg1 displayContext:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x0010000000157e8e
- (oneway void)dialWithRequest:(id)arg1 displayContext:(id)arg2;	// IMP=0x0010000000157cb3
- (oneway void)dialWithRequest:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x001000000015792b
- (void)_handleMessagingConnectionEndForCalls:(id)arg1 withDisconnectedReason:(int)arg2 didStartConnecting:(_Bool)arg3;	// IMP=0x00100000001575d1
- (void)performUpdateCallWithProxy:(id)arg1;	// IMP=0x001000000015751d
- (void)performPullHostedCallsFromPairedHostDevice;	// IMP=0x00100000001572b4
- (void)performPushHostedCallsToDestination:(id)arg1;	// IMP=0x0010000000157061
- (void)performPushRelayingCallsToHostWithSourceIdentifier:(id)arg1;	// IMP=0x0010000000156fef
- (void)performPullCallFromClientUsingHandoffActivityUserInfo:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x0010000000156eeb
- (void)performSetUplinkMuted:(_Bool)arg1 forCall:(id)arg2;	// IMP=0x0010000000156c74
- (void)performSetTTYType:(int)arg1 forCall:(id)arg2;	// IMP=0x0010000000156a9c
- (void)performPlayDTMFToneForCall:(id)arg1 key:(unsigned char)arg2;	// IMP=0x0010000000156a14
- (void)performSendMMIOrUSSDCodeWithRequest:(id)arg1;	// IMP=0x00100000001569a2
- (void)performPullRelayingCallsFromClientAndUpdateEndpoint:(_Bool)arg1 updateExpectedDestination:(_Bool)arg2;	// IMP=0x00100000001566d3
- (void)performDisconnectAllCalls;	// IMP=0x00100000001563ea
- (void)performDisconnectCurrentCallAndActivateHeld;	// IMP=0x0010000000155856
- (void)performDisconnectCall:(id)arg1;	// IMP=0x001000000015549d
- (void)performAnswerCallAsAudioDowngrade:(id)arg1 withRequest:(id)arg2;	// IMP=0x0010000000155419
- (void)performAnswerCallAsVideoUpgrade:(id)arg1 withRequest:(id)arg2;	// IMP=0x0010000000155395
- (void)performHoldActiveAndAnswerCall:(id)arg1 withRequest:(id)arg2;	// IMP=0x0010000000154b09
- (void)performEndHeldAndAnswerCall:(id)arg1 withRequest:(id)arg2;	// IMP=0x00100000001542d6
- (void)performEndActiveAndAnswerCall:(id)arg1 withRequest:(id)arg2;	// IMP=0x0010000000153bfa
- (id)callWithUniqueProxyIdentifier:(id)arg1 fromCallsToAnswer:(id)arg2;	// IMP=0x0010000000153a26
- (void)performAnswerCall:(id)arg1 withRequest:(id)arg2;	// IMP=0x00100000001537c7
- (void)performSwapCalls;	// IMP=0x00100000001531a0
- (void)performUngroupCall:(id)arg1;	// IMP=0x0010000000152dee
- (void)performGroupCall:(id)arg1 withCall:(id)arg2;	// IMP=0x0010000000152a06
- (void)performUnholdCall:(id)arg1;	// IMP=0x0010000000152818
- (void)performHoldCall:(id)arg1;	// IMP=0x001000000015262a
- (id)performJoinConversation:(id)arg1;	// IMP=0x00100000001524f4
- (id)performDialCall:(id)arg1 displayContext:(id)arg2;	// IMP=0x0010000000151de8
- (void)setCallDelegatesIfNeeded:(id)arg1;	// IMP=0x0010000000151b75
- (id)outgoingCallFromDialRequest:(id)arg1;	// IMP=0x0010000000151ac5
- (void)_updateBluetoothAudioFormatIfNecessaryDueToMVMChange:(_Bool)arg1;	// IMP=0x001000000015138f
- (void)_handleDisconnectedCallStatusChangeForHostedCall:(id)arg1;	// IMP=0x0010000000151250
- (void)_updateRoutesForDisconnectedCall;	// IMP=0x00100000001511cf
- (void)_handleDisconnectedCallStatusChangeForVoicemailCall;	// IMP=0x0010000000151109
- (void)_handleHeldCallStatusChangeForHostedCall:(id)arg1;	// IMP=0x0010000000151095
- (void)_handleActiveCallStatusChangeForHostedCall:(id)arg1;	// IMP=0x0010000000150fa7
- (void)_handleConnectedCallStatusChangeForHostedCall:(id)arg1;	// IMP=0x0010000000150e90
- (void)_handleConnectingCallStatusChangeForHostedCall:(id)arg1;	// IMP=0x0010000000150cbf
- (void)_handleSendingCallStatusChangeForHostedCall:(id)arg1;	// IMP=0x0010000000150c22
- (void)_handleRingingCallStatusChangeForHostedCall:(id)arg1;	// IMP=0x00100000001507da
- (_Bool)_nonRingingCallExistsOnThisDevice;	// IMP=0x001000000015055e
- (void)_handlePreferredRouteChangedNotification:(id)arg1;	// IMP=0x001000000015009f
- (void)_handleCSDRelayPairedDeviceConnectedNotification:(id)arg1;	// IMP=0x001000000014fef7
- (void)_handleCSDRelayIDSActiveAccountsChanged:(id)arg1;	// IMP=0x001000000014fda3
- (void)_handleInvitationSentNotification:(id)arg1;	// IMP=0x001000000014fc61
- (void)_handleFaceTimeAvailabilityChangedNotification:(id)arg1;	// IMP=0x001000000014fb18
- (void)_handleCallIsUsingBasebandChangedNotification:(id)arg1;	// IMP=0x001000000014f987
- (void)_handleHardPauseStateChangedNotification:(id)arg1;	// IMP=0x001000000014f823
- (void)_handleResetCallStateNotification:(id)arg1;	// IMP=0x001000000014f715
- (void)_handleCallModelChangedNotification:(id)arg1;	// IMP=0x001000000014f5d3
- (void)_handleCallShouldSuppressRingtoneChangedNotification:(id)arg1;	// IMP=0x001000000014f469
- (void)_handleCallWantsHoldMusicChangedNotification:(id)arg1;	// IMP=0x001000000014f313
- (void)_handleNeedsManualInCallSoundsChangedNotification:(id)arg1;	// IMP=0x001000000014f1d1
- (void)_handleCallConnectedNotification:(id)arg1;	// IMP=0x001000000014f0ad
- (void)_handleCallStartedConnectingNotification:(id)arg1;	// IMP=0x001000000014ef65
- (void)_handleCallStartedOutgoingNotification:(id)arg1;	// IMP=0x001000000014edfc
- (void)_handleCallStatusChangedNotification:(id)arg1;	// IMP=0x001000000014e9ea
- (void)_handleSupportsEmergencyFallbackChangedNotification:(id)arg1;	// IMP=0x001000000014e875
- (void)_handleFailureExpectedChangedNotification:(id)arg1;	// IMP=0x001000000014e700
- (void)_handleMixesVoiceWithMediaChangedNotification:(id)arg1;	// IMP=0x001000000014e5e0
- (void)_handleTUCallTTYTypeChangedNotification:(id)arg1;	// IMP=0x001000000014e45c
- (void)_handleTUCallSupportsTTYWithVoiceChangedNotification:(id)arg1;	// IMP=0x001000000014e2e7
- (void)_handleUpdateRemoteUplinkMutedChangedNotification:(id)arg1;	// IMP=0x001000000014e1a5
- (void)_handleCallDisplayContextChangedNotification:(id)arg1;	// IMP=0x001000000014e063
- (void)sendClientsNotificationName:(id)arg1 forCall:(id)arg2 userInfo:(id)arg3;	// IMP=0x001000000014dde1
- (void)sendClientsNotificationName:(id)arg1 forCall:(id)arg2;	// IMP=0x001000000014ddcc
- (void)sendClientsNotificationName:(id)arg1;	// IMP=0x001000000014ddb5
- (void)resetClientCallProvisionalStates;	// IMP=0x001000000014dcb8
- (void)updateClientsWithMeterLevel:(float)arg1 inDirection:(int)arg2 forCalls:(id)arg3;	// IMP=0x001000000014da0d
- (void)updateClientsWithFrequency:(id)arg1 inDirection:(int)arg2 forCalls:(id)arg3;	// IMP=0x001000000014d6f6
- (_Bool)isCallEligible:(id)arg1 forClient:(id)arg2;	// IMP=0x001000000014d67c
- (id)eligibleCallsByFilteringCalls:(id)arg1 forClient:(id)arg2;	// IMP=0x001000000014d490
- (void)updateClientsWithCall:(id)arg1;	// IMP=0x001000000014cba2
- (void)_endProxyCallsForConnectingVideoCall;	// IMP=0x001000000014c957
- (void)_launchInCallApplicationForExistingCall;	// IMP=0x001000000014c782
- (void)_launchInCallApplicationForOutgoingCallIfNecessary:(id)arg1;	// IMP=0x001000000014c2bd
- (void)_launchInCallApplicationForOutgoingConversationIfNecessary:(id)arg1;	// IMP=0x001000000014c2b7
- (void)_launchInCallApplicationForIncomingCallIfNecessary:(id)arg1;	// IMP=0x001000000014beae
- (void)_answerIncomingCallAsConversation:(id)arg1;	// IMP=0x001000000014bcda
- (void)_answerIncomingCall:(id)arg1 withBehavior:(long long)arg2;	// IMP=0x001000000014bb87
- (void)_handleCarPlayControlEventNotification:(id)arg1;	// IMP=0x001000000014b31c
- (void)_handleAudioSessionInterruptionNotification:(id)arg1;	// IMP=0x001000000014b098
- (_Bool)shouldHandleCarPlayControlEvents;	// IMP=0x001000000014aff1
- (void)_requestCallStateFromHost;	// IMP=0x001000000014afeb
- (void)_handleRelayCallingChanged;	// IMP=0x001000000014aa54
@property(readonly, nonatomic) _Bool shouldRelayToOtherDevices;
@property(readonly, nonatomic) CSDCallFilterController *callFilterController;
@property(readonly, nonatomic) id <CSDCallContainer> callContainer;
@property(readonly, nonatomic) TUCallCenter *callCenter;
- (void)registerForSecureMicEvents;	// IMP=0x001000000014a663
- (void)dealloc;	// IMP=0x000000000014a580
- (void)invalidate;	// IMP=0x001000000014a543
- (id)initWithQueue:(id)arg1 featureFlags:(id)arg2;	// IMP=0x00100000001485fc
- (id)initWithQueue:(id)arg1;	// IMP=0x0010000000148598

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

