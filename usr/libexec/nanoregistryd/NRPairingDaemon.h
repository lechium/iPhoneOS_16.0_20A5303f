//
//     Generated by classdumpios 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class NRLocalPropertyMonitor, NRMutableDevice, NRRemoteObjectClassC, NSError, NSLock, NSMutableArray, NSNumber, NSObject, NSString, NSUUID, NSXPCConnection, NSXPCListener;
@protocol OS_dispatch_queue;

@interface NRPairingDaemon
{
    _Bool _initRemoteProperties;	// 8 = 0x8
    _Bool _isPairingOrUnpairing;	// 9 = 0x9
    _Bool _mirrorOfIsPaired;	// 10 = 0xa
    unsigned int _xpcTransactionHasBegun;	// 12 = 0xc
    int _idsSwitchRetryCounter;	// 16 = 0x10
    int _syncAdviceNotifyToken;	// 20 = 0x14
    NSMutableArray *_xpcClients;	// 24 = 0x18
    NSXPCListener *_xpcListener;	// 32 = 0x20
    NSXPCConnection *_xpcLaunchDConnection;	// 40 = 0x28
    NRLocalPropertyMonitor *_localProperties;	// 48 = 0x30
    NSLock *_xpcTransactionTimerLock;	// 56 = 0x38
    NRRemoteObjectClassC *_idsServiceClassC;	// 64 = 0x40
    long long _maxPairingCompatibilityVersion;	// 72 = 0x48
    long long _minPairingCompatibilityVersion;	// 80 = 0x50
    NSError *_switchCompletionBlockError;	// 88 = 0x58
    NSNumber *_lastDaemonState;	// 96 = 0x60
    NRMutableDevice *_mirrorOfActiveDevice;	// 104 = 0x68
    NSUUID *_mirrorOfActiveDeviceID;	// 112 = 0x70
}

+ (id)sharedInstance;	// IMP=0x002000000000ee90
+ (void)updateActiveFlag:(_Bool)arg1;	// IMP=0x0010000000008f41
+ (Class)proxyClass;	// IMP=0x0010000000008d20
- (void).cxx_destruct;	// IMP=0x0020000000012e15
@property(nonatomic) _Bool mirrorOfIsPaired; // @synthesize mirrorOfIsPaired=_mirrorOfIsPaired;
@property(retain, nonatomic) NSUUID *mirrorOfActiveDeviceID; // @synthesize mirrorOfActiveDeviceID=_mirrorOfActiveDeviceID;
@property(retain, nonatomic) NRMutableDevice *mirrorOfActiveDevice; // @synthesize mirrorOfActiveDevice=_mirrorOfActiveDevice;
@property(nonatomic) int syncAdviceNotifyToken; // @synthesize syncAdviceNotifyToken=_syncAdviceNotifyToken;
@property(nonatomic) _Bool isPairingOrUnpairing; // @synthesize isPairingOrUnpairing=_isPairingOrUnpairing;
@property(retain, nonatomic) NSNumber *lastDaemonState; // @synthesize lastDaemonState=_lastDaemonState;
@property(nonatomic) int idsSwitchRetryCounter; // @synthesize idsSwitchRetryCounter=_idsSwitchRetryCounter;
- (int);	// IMP=0x0010000000012d26
@property(retain, nonatomic) NSError *switchCompletionBlockError; // @synthesize switchCompletionBlockError=_switchCompletionBlockError;
@property(nonatomic) long long minPairingCompatibilityVersion; // @synthesize minPairingCompatibilityVersion=_minPairingCompatibilityVersion;
@property(nonatomic) long long maxPairingCompatibilityVersion; // @synthesize maxPairingCompatibilityVersion=_maxPairingCompatibilityVersion;
@property(nonatomic) _Bool initRemoteProperties; // @synthesize initRemoteProperties=_initRemoteProperties;
@property(retain, nonatomic) NRRemoteObjectClassC *idsServiceClassC; // @synthesize idsServiceClassC=_idsServiceClassC;
@property(nonatomic) unsigned int xpcTransactionHasBegun; // @synthesize xpcTransactionHasBegun=_xpcTransactionHasBegun;
@property(retain, nonatomic) NSLock *xpcTransactionTimerLock; // @synthesize xpcTransactionTimerLock=_xpcTransactionTimerLock;
@property(retain, nonatomic) NRLocalPropertyMonitor *localProperties; // @synthesize localProperties=_localProperties;
@property(retain, nonatomic) NSXPCConnection *xpcLaunchDConnection; // @synthesize xpcLaunchDConnection=_xpcLaunchDConnection;
@property(retain, nonatomic) NSXPCListener *xpcListener; // @synthesize xpcListener=_xpcListener;
@property(retain, nonatomic) NSMutableArray *xpcClients; // @synthesize xpcClients=_xpcClients;
- (void)xpcWatchNeedsGraduation:(CDUnknownBlockType)arg1;	// IMP=0x0010000000012b99
- (void)xpcSetWatchNeedsGraduation:(CDUnknownBlockType)arg1;	// IMP=0x0010000000012b93
- (void)xpcClearWatchNeedsGraduation:(CDUnknownBlockType)arg1;	// IMP=0x0010000000012b8d
- (void)xpcSwitchIndex:(CDUnknownBlockType)arg1;	// IMP=0x0010000000012b5e
- (void)xpcWatchBuddyCompletedSetupSteps:(CDUnknownBlockType)arg1;	// IMP=0x0010000000012b48
- (void)xpcPairingClientSetPairingParentName:(id)arg1 pairingParentAltDSID:(id)arg2 forPairingID:(id)arg3 completion:(CDUnknownBlockType)arg4;	// IMP=0x0010000000012b32
- (void)xpcPairingClientSetAltAccountName:(id)arg1 altDSID:(id)arg2 forPairingID:(id)arg3 completion:(CDUnknownBlockType)arg4;	// IMP=0x0010000000012b1c
- (void)xpcIsAssertionActive:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;	// IMP=0x0010000000012b04
- (void)xpcGetInitialSyncCompletedForPairingID:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x0010000000012aec
- (void)xpcGetMigrationCountForPairingID:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x0010000000012ad4
- (void)xpcGetLastSwitchIndex:(CDUnknownBlockType)arg1;	// IMP=0x0010000000012abc
- (void)xpcIsPhoneReadyToMigrateDevice:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;	// IMP=0x0010000000012aaa
- (void)xpcClearRecoveryFlagWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x0010000000012a57
- (void)xpcFakePairedSyncIsCompleteWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x0010000000012a04
- (void)xpcCheckIfFlaggedForRecoveryWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00100000000129ec
- (void)xpcSetMigrationConsented:(_Bool)arg1 forDeviceID:(id)arg2 withBlock:(CDUnknownBlockType)arg3;	// IMP=0x00100000000129bd
- (void)xpcRetrieveSecureProperties:(id)arg1 block:(CDUnknownBlockType)arg2;	// IMP=0x001000000001298e
- (void)xpcGetDiffSinceTokenValue:(unsigned long long)arg1 getSecureProperties:(_Bool)arg2 withBlock:(CDUnknownBlockType)arg3;	// IMP=0x001000000001295f
- (void)xpcGetDeviceCollectionWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x0010000000012930
- (void)xpcGetChangeHistoryWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x0010000000012901
- (void)xpcDeviceIDAtSwitchIndex:(unsigned int)arg1 withBlock:(CDUnknownBlockType)arg2;	// IMP=0x00100000000128d2
- (void)xpcClientInfo:(CDUnknownBlockType)arg1;	// IMP=0x00100000000128a3
- (void)xpcApplyDiff:(id)arg1 withSecureProperties:(id)arg2 block:(CDUnknownBlockType)arg3;	// IMP=0x0010000000012874
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *pairingQueue;
- (void)child:(id)arg1 didApplyDiff:(id)arg2;	// IMP=0x0010000000012817
- (_Bool)setPairingClientCrashMonitoringCache:(_Bool)arg1 proxy:(id)arg2;	// IMP=0x001000000001280f
- (void)proxyWillInvalidateSwitchAssertion:(id)arg1;	// IMP=0x0010000000012809
- (void)proxyWillTakeSwitchAssertion:(id)arg1;	// IMP=0x0010000000012803
- (void)proxyWillEndPushing:(id)arg1;	// IMP=0x00100000000127fd
- (void)proxyWillEndDiscovering:(id)arg1;	// IMP=0x00100000000127f7
- (void)proxyWillEndAdvertising:(id)arg1;	// IMP=0x00100000000127f1
- (void)proxyWillBeginUnpairing:(id)arg1;	// IMP=0x00100000000127eb
- (void)proxyWillBeginPushing:(id)arg1;	// IMP=0x00100000000127e5
- (void)proxyWillBeginPairing:(id)arg1;	// IMP=0x00100000000127df
- (void)proxyWillBeginDiscovering:(id)arg1;	// IMP=0x00100000000127d9
- (void)proxyWillBeginAdvertising:(id)arg1;	// IMP=0x00100000000127d3
- (void)proxyWillAbortPairing:(id)arg1;	// IMP=0x00100000000127cd
- (void)proxyRequestsSuspensionOfCrashMonitoring:(id)arg1;	// IMP=0x00100000000127c7
- (void)proxyRequestsResumptionOfCrashMonitoring:(id)arg1;	// IMP=0x00100000000127c1
- (void)remoteObject:(id)arg1 receivedCheckTermsEvent:(id)arg2 fromIDSBTUUID:(id)arg3 responseBlock:(CDUnknownBlockType)arg4;	// IMP=0x00100000000127a9
- (void)remoteObject:(id)arg1 receivedAddTermsEvent:(id)arg2 fromIDSBTUUID:(id)arg3 responseBlock:(CDUnknownBlockType)arg4;	// IMP=0x0010000000012793
- (void)remoteObject:(id)arg1 receivedPropertyRequestWithRequestIdentifier:(id)arg2 fromIDSBTUUID:(id)arg3;	// IMP=0x0010000000012707
- (void)remoteObject:(id)arg1 receivedPropertyChanges:(id)arg2 isAllProperties:(_Bool)arg3 fromIDSBTUUID:(id)arg4;	// IMP=0x00100000000120cc
- (void)remoteObjectIDSServiceUnavailable:(id)arg1;	// IMP=0x00100000000120c6
- (void)remoteObjectIDSServiceAvailable:(id)arg1 withIDSDevice:(id)arg2;	// IMP=0x00100000000120c0
- (void)remoteObjectAllowedTrafficClassifiersDidReset:(id)arg1;	// IMP=0x00100000000120ba
- (void)initIDSAsyncWithBlock:(CDUnknownBlockType)arg1 shouldConnect:(_Bool)arg2;	// IMP=0x0010000000011c8d
- (void)connectIDSDuringPairing;	// IMP=0x0010000000011baf
- (_Bool)_xpcConnectToNanoRegistryLaunchDService;	// IMP=0x0010000000011a39
- (void)notifyStateChangedWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x00100000000112fb
- (void)setActiveDeviceWithPairingID:(id)arg1 withBlock:(CDUnknownBlockType)arg2;	// IMP=0x001000000001110b
- (void)setIsPaired:(_Bool)arg1 withPairingID:(id)arg2 withBlock:(CDUnknownBlockType)arg3;	// IMP=0x0010000000010bc3
- (void)sendPropertyRequestWithTimeout:(id)arg1 toDeviceID:(id)arg2 withBlock:(CDUnknownBlockType)arg3;	// IMP=0x001000000001067c
- (void)_updateDeviceID:(id)arg1 withProperties:(id)arg2 withBlock:(CDUnknownBlockType)arg3;	// IMP=0x001000000000ffe4
- (void)idsSendProperties:(id)arg1 thisIsAllOfThem:(_Bool)arg2;	// IMP=0x001000000000fdd6
- (void)localMonitor:(id)arg1 propertiesDidChange:(id)arg2 thisIsAllOfThem:(_Bool)arg3;	// IMP=0x001000000000fdbe
- (void)deleteLocalPairingStore:(id)arg1 withBlock:(CDUnknownBlockType)arg2;	// IMP=0x001000000000f99e
- (void)createLocalPairingStore:(id)arg1 andNotifyPairingBeginning:(_Bool)arg2 withBlock:(CDUnknownBlockType)arg3;	// IMP=0x001000000000f518
- (void)createLocalPairingStore:(id)arg1 withBlock:(CDUnknownBlockType)arg2;	// IMP=0x001000000000f501
- (void)enableDaemonsWithBool:(_Bool)arg1 withBlock:(CDUnknownBlockType)arg2;	// IMP=0x001000000000f24c
- (void)pollProperties;	// IMP=0x001000000000f23a
- (void)refreshPropertyCache;	// IMP=0x001000000000f126
- (id)makeLocalPairingStorePairingID:(id)arg1;	// IMP=0x001000000000effe
- (id)getLocalPairingStorePairingID:(id)arg1;	// IMP=0x001000000000ef15
- (_Bool)isInternalInstall;	// IMP=0x001000000000ee86
- (void)normalizeDaemonStateWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x001000000000eab4
- (void)normalizeDaemonState;	// IMP=0x001000000000e956
- (unsigned long long)readNotifyToken:(int)arg1;	// IMP=0x001000000000e925
- (void)updateNotifyToken:(int)arg1 withValue:(unsigned long long)arg2 withNotificationName:(id)arg3;	// IMP=0x001000000000e7b4
- (int)getNotifyTokenWithName:(id)arg1;	// IMP=0x001000000000e6af
- (void)initLocalProperties;	// IMP=0x001000000000e633
- (void)ackXPCEvents;	// IMP=0x001000000000e3f6
- (id)init;	// IMP=0x001000000000e113
- (void)xpcWaitForWatchPairingExtendedMetadataForAdvertisedName:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x001000000000e101
- (void)xpcUnpairWithDeviceID:(id)arg1 withOptions:(id)arg2 operationHasBegun:(CDUnknownBlockType)arg3;	// IMP=0x001000000000e0f1
- (void)xpcTriggerVersion4Workaround;	// IMP=0x001000000000e0eb
- (void)xpcSwitchActiveDeviceWithDeviceID:(id)arg1 withAssertionHandler:(CDUnknownBlockType)arg2;	// IMP=0x001000000000e0d9
- (void)xpcSwitchActiveDeviceWithDeviceID:(id)arg1 isMagicSwitch:(_Bool)arg2 operationHasCompleted:(CDUnknownBlockType)arg3;	// IMP=0x001000000000e0c9
- (void)xpcSuspendPairingClientCrashMonitoring:(CDUnknownBlockType)arg1;	// IMP=0x001000000000e0be
- (void)xpcSubmitServerRequestReportWithRequestType:(id)arg1 duration:(double)arg2 errorCode:(unsigned int)arg3 block:(CDUnknownBlockType)arg4;	// IMP=0x001000000000e0b3
- (void)xpcSubmitRTCPairingMetricForMetricID:(id)arg1 withSuccess:(CDUnknownBlockType)arg2;	// IMP=0x001000000000dfd2
- (void)xpcSubmitAlbertPairingReport:(CDUnknownBlockType)arg1;	// IMP=0x001000000000dfc7
- (void)xpcStopWatchSetupPushWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x001000000000dfbc
- (void)xpcStartWatchSetupPushWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x001000000000dfb1
- (void)xpcScanForMigratableWatchesWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x001000000000dfa6
- (void)xpcRetriggerUnpairInfoDialogWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x001000000000df9b
- (void)xpcResumePairingClientCrashMonitoring:(CDUnknownBlockType)arg1;	// IMP=0x001000000000df90
- (void)xpcPutMigrationChallengeCharacteristicWriteData:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x001000000000df80
- (void)xpcPingActiveGizmoWithPriority:(int)arg1 withMessageSize:(unsigned long long)arg2 withBlock:(CDUnknownBlockType)arg3;	// IMP=0x001000000000df6a
- (void)xpcPairingShouldContinue;	// IMP=0x001000000000df64
- (void)xpcPairingClientDidEnterPhase:(id)arg1 withBlock:(CDUnknownBlockType)arg2;	// IMP=0x001000000000df59
- (void)xpcNotifyPasscode:(id)arg1 withDeviceID:(id)arg2;	// IMP=0x001000000000df53
- (void)xpcNotifyActivationCompleted:(id)arg1 withSuccess:(_Bool)arg2;	// IMP=0x001000000000df4d
- (void)xpcKeepPhoneUnlockedInternalTestSPI:(CDUnknownBlockType)arg1;	// IMP=0x001000000000df42
- (void)xpcInvalidateSwitchAssertionWithIdentifier:(id)arg1 block:(CDUnknownBlockType)arg2;	// IMP=0x001000000000df32
- (void)xpcGizmoPasscodeAdvertiseAndPairWithName:(id)arg1 operationHasBegun:(CDUnknownBlockType)arg2;	// IMP=0x001000000000df22
- (void)xpcGizmoOOBAdvertiseAndPairWithName:(id)arg1 operationHasBegun:(CDUnknownBlockType)arg2;	// IMP=0x001000000000df12
- (void)xpcGetMigrationPairingCharacteristicReadDataWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x001000000000df02
- (void)xpcGetLastMigrationRequestPhoneNameWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x001000000000def2
- (void)xpcEnterCompatibilityState:(unsigned short)arg1 withDeviceID:(id)arg2;	// IMP=0x001000000000deec
- (void)xpcEndDiscoveryWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x001000000000dee1
- (void)xpcCompanionPasscodePairWithDeviceID:(id)arg1 withOptions:(id)arg2 operationHasBegun:(CDUnknownBlockType)arg3;	// IMP=0x001000000000ded1
- (void)xpcCompanionOOBDiscoverAndPairWithName:(id)arg1 withOutOfBandPairingKey:(id)arg2 withOptions:(id)arg3 operationHasBegun:(CDUnknownBlockType)arg4;	// IMP=0x001000000000dec1
- (void)xpcBeginMigrationWithDeviceID:(id)arg1 passcode:(id)arg2 withBlock:(CDUnknownBlockType)arg3;	// IMP=0x001000000000deb6
- (void)xpcBeginMigrationWithDeviceID:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x001000000000dea6
- (void)xpcBeginMigrationWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x001000000000de96
- (void)xpcBeginDiscoveryWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x001000000000de8b
- (void)xpcActiveDeviceAssertions:(CDUnknownBlockType)arg1;	// IMP=0x001000000000de7b
- (void)xpcAbortPairingReason:(id)arg1 withBlock:(CDUnknownBlockType)arg2;	// IMP=0x001000000000de70
- (void)xpcSwitchToSimulator:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;	// IMP=0x001000000000d3bb
- (void)xpcUnpairWithSimulator:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;	// IMP=0x001000000000c7a3
- (void)xpcPairWithSimulator:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;	// IMP=0x001000000000aa4c
- (id)__idsBTUUIDForDevice:(id)arg1;	// IMP=0x001000000000a9ef
- (id)_idsBTUUIDForDevice:(id)arg1;	// IMP=0x001000000000a9dd
- (id)_activeDeviceBTIDSUUID;	// IMP=0x001000000000a950
- (void)cleanUpDevicesWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x001000000000a4c1
- (void)deleteDevice:(id)arg1 withBlock:(CDUnknownBlockType)arg2;	// IMP=0x001000000000a26c
- (void)newDeviceForSimulator:(id)arg1 withBlock:(CDUnknownBlockType)arg2;	// IMP=0x0010000000009bf1
- (void)setUpHistoryCompletionBlocks;	// IMP=0x00100000000090a8
- (void)_updateActiveFlag:(id)arg1;	// IMP=0x0010000000008d31

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

