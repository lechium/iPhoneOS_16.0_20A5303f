//
//     Generated by classdumpios 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class NSOperationQueue, NSUserDefaults, PCSAccountsModel, PCSDelayedAction, PCSIDSSyncing, PCSKeySyncing, PCSMobileBackup, PCSUserRegistry;
@protocol OS_dispatch_queue, OS_dispatch_source, OS_xpc_object;

@interface PCSSyncing : NSObject
{
    NSObject<OS_dispatch_queue> *_internalQueue;	// 8 = 0x8
    PCSUserRegistry *_registry;	// 16 = 0x10
    NSObject<OS_dispatch_queue> *_registryQueue;	// 24 = 0x18
    PCSKeySyncing *_manager;	// 32 = 0x20
    PCSAccountsModel *_accounts;	// 40 = 0x28
    PCSDelayedAction *_triggerWatchSyncingAction;	// 48 = 0x30
    NSOperationQueue *_serialOperationQueue;	// 56 = 0x38
    PCSIDSSyncing *_syncing;	// 64 = 0x40
    NSUserDefaults *_settings;	// 72 = 0x48
    PCSMobileBackup *_mobileBackup;	// 80 = 0x50
    NSObject<OS_dispatch_source> *_keyrollSchedulerSource;	// 88 = 0x58
    NSObject<OS_xpc_object> *_scheduledKeyrollActivity;	// 96 = 0x60
}

+ (id)defaultPCSSyncing;	// IMP=0x002000000001b1d0
- (void).cxx_destruct;	// IMP=0x0020000000023aae
@property(retain) NSObject<OS_xpc_object> *scheduledKeyrollActivity; // @synthesize scheduledKeyrollActivity=_scheduledKeyrollActivity;
@property(retain) NSObject<OS_dispatch_source> *keyrollSchedulerSource; // @synthesize keyrollSchedulerSource=_keyrollSchedulerSource;
@property(retain) PCSMobileBackup *mobileBackup; // @synthesize mobileBackup=_mobileBackup;
@property(retain) NSUserDefaults *settings; // @synthesize settings=_settings;
@property(retain) PCSIDSSyncing *syncing; // @synthesize syncing=_syncing;
@property(retain) NSOperationQueue *serialOperationQueue; // @synthesize serialOperationQueue=_serialOperationQueue;
@property(retain) PCSDelayedAction *triggerWatchSyncingAction; // @synthesize triggerWatchSyncingAction=_triggerWatchSyncingAction;
@property(retain) PCSAccountsModel *accounts; // @synthesize accounts=_accounts;
@property(retain) PCSKeySyncing *manager; // @synthesize manager=_manager;
@property(retain) NSObject<OS_dispatch_queue> *registryQueue; // @synthesize registryQueue=_registryQueue;
@property(retain) PCSUserRegistry *registry; // @synthesize registry=_registry;
@property(retain) NSObject<OS_dispatch_queue> *internalQueue; // @synthesize internalQueue=_internalQueue;
- (void)keyRollPending:(id)arg1 complete:(CDUnknownBlockType)arg2;	// IMP=0x00100000000237bf
- (void)manateeStatus:(id)arg1 complete:(CDUnknownBlockType)arg2;	// IMP=0x0010000000022d38
- (void)fetchStats:(CDUnknownBlockType)arg1;	// IMP=0x0010000000022cac
- (void)userDBBackupRecordIDsWithReply:(CDUnknownBlockType)arg1;	// IMP=0x0010000000022c00
- (void)mobileBackupRecordIDsWithReply:(CDUnknownBlockType)arg1;	// IMP=0x0010000000022b54
- (void)triggerUserRegistryCheck:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000022b42
- (void)restoreMobileBackup:(_Bool)arg1 dsid:(id)arg2 withReply:(CDUnknownBlockType)arg3;	// IMP=0x0010000000021f50
- (void)fetchAllDeviceKeys:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000021eab
- (void)checkSyncingForPeer:(id)arg1 force:(_Bool)arg2;	// IMP=0x0010000000021e33
- (void)triggerDaily:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000021de5
- (void)requestKeys:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000021d6d
- (void)syncKeys:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000021cda
- (void)getAllClients:(CDUnknownBlockType)arg1;	// IMP=0x0010000000021ada
- (void)queuedCheckRegistry:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000021725
- (void)notifyEvent:(id)arg1;	// IMP=0x0010000000021631
- (void)notifyDailyEvent;	// IMP=0x00100000000214ea
- (struct _PCSIdentitySetData *)identityCopySet:(id)arg1;	// IMP=0x0010000000021308
- (void)createIdentity:(id)arg1 dsid:(id)arg2 roll:(_Bool)arg3 sync:(_Bool)arg4 complete:(CDUnknownBlockType)arg5;	// IMP=0x0010000000020c84
- (void)migrateToiCDPForAccount:(id)arg1 withParameters:(id)arg2 complete:(CDUnknownBlockType)arg3;	// IMP=0x0010000000020aac
- (void)setupIdentitiesForAccount:(id)arg1 withParameters:(id)arg2 optional:(_Bool)arg3;	// IMP=0x00100000000207b1
- (void)triggerSyncingWithEscrowProxy:(id)arg1 dsid:(id)arg2 accountIdentifier:(id)arg3 accountLastError:(id)arg4 settingsKeyExpirationDate:(id)arg5 settingsKeyIdentifier:(id)arg6 complete:(CDUnknownBlockType)arg7;	// IMP=0x00100000000204ce
- (void)triggerCKKSSyncForService:(id)arg1 dsid:(id)arg2 complete:(CDUnknownBlockType)arg3;	// IMP=0x001000000001ffff
- (void)triggerEscrowSyncWithDSID:(id)arg1 accountIdentifier:(id)arg2 accountLastError:(id)arg3 settingsKeyExpirationDate:(id)arg4 settingsKeyIdentifier:(id)arg5 complete:(CDUnknownBlockType)arg6;	// IMP=0x001000000001f509
- (_Bool)ensureMKExists:(struct _PCSIdentitySetData *)arg1 error:(struct __CFError **)arg2;	// IMP=0x001000000001f355
- (void)triggerKeyRolling;	// IMP=0x001000000001e588
- (void)rollingComplete:(_Bool)arg1;	// IMP=0x001000000001e378
- (_Bool)getServicesToRoll:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x001000000001dcc5
- (void)actuallyScheduleRollAttempt;	// IMP=0x001000000001dbc9
- (void)scheduleRollAttempt;	// IMP=0x001000000001db8f
- (long long)attemptTimer;	// IMP=0x001000000001da4f
- (_Bool)shouldRollStingray;	// IMP=0x001000000001d835
- (_Bool)shouldRoll;	// IMP=0x001000000001d76d
- (void)checkForBackupStateChange;	// IMP=0x001000000001d043
- (void)recordEpochForKeyroll;	// IMP=0x001000000001cefc
- (id)getRollEpoch;	// IMP=0x001000000001ccf0
- (void)mobileBackupStatus:(CDUnknownBlockType)arg1;	// IMP=0x001000000001cc72
- (void)clearNextSyncNegativeCache;	// IMP=0x001000000001ca78
- (void)notifyInternalEvent:(id)arg1;	// IMP=0x001000000001c4f6
- (void)triggerWatchSyncing:(CDUnknownBlockType)arg1;	// IMP=0x001000000001bf9b
- (void)notifyKeyRegistry;	// IMP=0x001000000001bde1
- (void)triggerWatchSyncing;	// IMP=0x001000000001bda4
- (void)setupMetrics;	// IMP=0x001000000001bbc3
- (void)setupActivity;	// IMP=0x001000000001bab8
- (id)initWithPCSKeySyncing:(id)arg1;	// IMP=0x001000000001b3dc
- (id)initForTesting;	// IMP=0x001000000001b2b4

@end

