//
//     Generated by classdumpios 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class CLBarometerCalibrationContextManager;

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AbsoluteAltitudeUpdate {
    double _field1;
    double _field2;
    double _field3;
};

struct AccessPoint {
    struct CLMacAddress _field1;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> _field2;
    int _field3;
    int _field4;
    int _field5;
    double _field6;
    double _field7;
    _Bool _field8;
    _Bool _field9;
};

struct ActivityEvent {
    double _field1;
    long long _field2;
    long long _field3;
    long long _field4;
    long long _field5;
};

struct AltitudeInfo {
    double _field1;
    double _field2;
    double _field3;
    int _field4;
};

struct AssociationState {
    struct optional<CLWifiService_Type::AccessPoint> _field1;
};

struct Battery {
    double level;
    _Bool charged;
    _Bool connected;
    int chargerType;
    _Bool wasConnected;
    int chargerFamily;
};

struct BiasEstimatorLocation {
    double latitude;
    double longitude;
};

struct BinaryData {
    CDUnknownFunctionPointerType *_field1;
    double _field2;
    unsigned short _field3;
};

struct BoutBoundaryRecorderDb;

struct BoutMetrics {
    int _field1;
    double _field2;
    double _field3;
    unsigned int _field4;
    int _field5;
    unsigned int _field6;
    unsigned int _field7;
    double _field8;
    unsigned char _field9;
    int _field10;
    double _field11;
    double _field12;
    double _field13;
    double _field14;
    double _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
    double _field20;
    double _field21;
    float _field22;
    float _field23;
    float _field24;
    float _field25;
    float _field26;
    float _field27;
    unsigned int _field28;
    unsigned int _field29;
    unsigned int _field30;
    unsigned int _field31;
    unsigned int _field32;
    unsigned int _field33;
    unsigned int _field34;
    unsigned int _field35;
    unsigned int _field36;
    unsigned int _field37;
    float _field38;
    _Bool _field39;
    float _field40;
    _Bool _field41;
};

struct BoutMetricsRecorderDb;

struct CLATVAirplayDeviceInternal {
    time_point_84284884 _field1;
    int _field2;
    struct uuid _field3;
    unsigned int _field4;
    int _field5;
};

struct CLAccelerometerPace {
    double calibrated;
    double lowerBound;
    double upperBound;
};

struct CLAnalyticsLogger;

struct CLAvengerObservationReporterServiceStateContext {
    _Bool cameraForegrounded;
};

struct CLAvengerScannerAnalytics {
    unsigned int count_submission;
    unsigned int numSwitchToAggressiveScan;
    double lastRequestTime;
};

struct CLAvengerScannerPolicyContext {
    _Bool optedIn;
    unsigned long long aggressiveDiscoveryScanCount;
    unsigned long long coexFriendlyAggressiveDiscoveryScanCount;
    unsigned long long btFindingDiscoveryScanCount;
    unsigned long long watchAdvertisementBufferScanCount;
    unsigned long long hawkeyeLowEnergyScanCount;
    long long platformType;
    unsigned long long totalAdvertisementBuffersAvailable;
    _Bool supportsPerTypeDuplicateFilter;
    _Bool associatedTo2GHzWiFi;
    _Bool wifi2GHzCriticalState;
    _Bool bluetoothAudioActive;
    _Bool downgradedDuringCoexFriendlyAggressiveDiscoveryScan;
};

struct CLAvengerScannerScanParameters {
    _Bool _field1;
    _Bool _field2;
};

struct CLBarometerCalibrationData;

struct CLBarometerCalibrationWiFiActiveScanBuffer {
    struct unordered_map<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket, std::hash<CLMacAddress>, std::equal_to<CLMacAddress>, std::allocator<std::pair<const CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>>> buffer;
};

struct CLBarometerCalibrationWifiData;

struct CLBasebandSystemClock {
    unsigned long long _field1;
    float _field2;
    float _field3;
    double _field4;
    float _field5;
    double _field6;
};

struct CLBasebandTimeFreqTransfer {
    double _field1;
    struct CLBasebandSystemClock _field2;
    unsigned long long _field3;
    float _field4;
    struct LeapSecondInfo _field5;
};

struct CLBatchedLocations;

struct CLBodyMetrics {
    int gender;
    int biologicalSex;
    float heightM;
    float weightKG;
    float vo2max;
    float age;
    float hrmin;
    float hrmax;
    float hronset;
    float pal;
    int condition;
    float runVo2max;
    _Bool betaBlockerUse;
    float adaptiveExerciseMinuteThreshold;
    _Bool _isAgeSet;
    _Bool _isHeightSet;
    _Bool _isWeightSet;
};

struct CLCalorieUpdate {
    struct CLNatalieData _field1;
    int _field2;
    double _field3;
    int _field4;
    double _field5;
    double _field6;
    _Bool _field7;
    double _field8;
    double _field9;
    _Bool _field10;
    float _field11;
    unsigned int _field12;
    unsigned int _field13;
    double _field14;
    _Bool _field15;
};

struct CLCardioChangeEstimator;

struct CLCardioChangeHistoryDb;

struct CLCatherineData {
    int _field1;
    int _field2;
    double _field3;
    double _field4;
    _Bool _field5;
    double _field6;
    double _field7;
    double _field8;
    int _field9;
};

struct CLCatherineHealthKitData {
    double _field1;
    double _field2;
    double _field3;
    int _field4;
};

struct CLCatherineRestingData {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
};

struct CLClientServiceTypeMaskTuple {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct CLCoarseElevationChangeEntry {
    double _field1;
    unsigned int _field2;
    int _field3;
};

struct CLConnection;

struct CLDaemonLocation {
    int padding1;
    int suitability;
    CDStruct_2c43369c coordinate;
    double horizontalAccuracy;
    double altitude;
    double verticalAccuracy;
    double padding2;
    double padding3;
    double speed;
    double speedAccuracy;
    double course;
    double courseAccuracy;
    double timestamp;
    int confidence;
    double lifespan;
    int type;
    CDStruct_2c43369c rawCoordinate;
    double rawCourse;
    int floor;
    unsigned int integrity;
    int referenceFrame;
    int rawReferenceFrame;
    int signalEnvironmentType;
    double ellipsoidalAltitude;
    _Bool fromSimulationController;
};

struct CLDaemonLocationPrivate {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    float _field6;
    float _field7;
    float _field8;
    _Bool _field9;
    int _field10;
    CDStruct_2c43369c _field11;
    double _field12;
    int _field13;
    int _field14;
    _Bool _field15;
    struct {
        double _field1;
        double _field2;
        _Bool _field3;
        _Bool _field4;
        int _field5;
        double _field6;
        long long _field7;
        double _field8;
        double _field9;
        double _field10;
    } _field16;
    CDStruct_2c43369c _field17;
    int _field18;
    float _field19;
    CDStruct_2c43369c _field20;
    double _field21;
    double _field22;
    int _field23;
    _Bool _field24;
    double _field25;
    double _field26;
    double _field27;
    double _field28;
    double _field29;
    double _field30;
    double _field31;
    double _field32;
    _Bool _field33;
    _Bool _field34;
    CDStruct_2c43369c _field35;
    double _field36;
    int _field37;
    double _field38;
    double _field39;
    double _field40;
    double _field41;
    double _field42;
    double _field43;
    _Bool _field44;
    struct SatelliteReport _field45;
    int _field46;
    struct AltitudeInfo _field47;
    unsigned char _field48;
    double _field49;
    double _field50;
    double _field51;
    unsigned char _field52;
    _Bool _field53;
    int _field54;
    int _field55;
};

struct CLDistanceCalc {
    double fM;
    double fN;
    double fRefLatRads;
    double fRefLatDegs;
    double fCosRefLat;
};

struct CLDistributedSensingSubscription {
    CDUnknownFunctionPointerType *_field1;
    struct CLConnection *_field2;
    id _field3;
    id _field4;
    id _field5;
};

struct CLElevationChangeEntry {
    double _field1;
    double _field2;
    unsigned int _field3;
    unsigned int _field4;
    int _field5;
    double _field6;
    int _field7;
    int _field8;
    float _field9;
    unsigned char _field10;
    unsigned short _field11;
    float _field12;
};

struct CLExerciseMinuteData {
    int _field1;
    double _field2;
    struct __CFString *_field3;
};

struct CLExtendedStepCountEntry {
    double startTime;
    struct CLStepCountEntry base;
    struct CLStepCountEntryAddition addition;
};

struct CLFloorTransitionDetector {
    struct deque<RelativeAltitude, std::allocator<RelativeAltitude>> fBuffer;
    _Bool fInTransition;
    _Bool fIsBufferFull;
    double fLastFloorTransitionTime;
};

struct CLGestureReportReceiverDelegate {
    CDUnknownFunctionPointerType *_field1;
};

struct CLGizmoOrientation {
    int fWrist;
    int fCrown;
};

struct CLGnssBasebandCausesL1InterferenceGnssBandChangeData {
    int _field1;
    int _field2;
};

struct CLGnssControlPlaneStatusReport {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    int _field7;
    int _field8;
    unsigned int _field9;
};

struct CLHRRecoveryEstimator;

struct CLHRRecoveryInputHRRecorderDb;

struct CLHRRecoveryInputWRRecorderDb;

struct CLHRRecoverySessionRecorderDb;

struct CLHRRecoveryStats {
    int biologicalSex;
    float age;
    float userBMI;
    _Bool betaBlockerUse;
    int status;
    double diffTimeRecoveryOnsetWorkout;
    double diffTimeTDropWorkoutEnd;
    int hrRecovery;
    int hrRecoverySession;
    float peakHR;
    float steadyStateHR;
    float hrMinAdjusted;
    float observedHRRecovery;
    float recoveryLoad;
    float maxRecoveryHR;
    float minRecoveryHR;
    float recoveryMetsMean;
    float recoveryMetsStdDev;
    float biasAdjustment;
    int estimationStatus;
    int vo2MaxValue;
    float lambda;
    float meanSquaredError;
    float explainedVarianceScore;
    int sessionType;
    long long workoutType;
    float sessionDuration;
    unsigned int hrRecoveryAlgorithmVersion;
};

struct CLHarvestController;

struct CLITileDownloadSchedulingClientDelegate {
    CDUnknownFunctionPointerType *_field1;
};

struct CLK2Detector {
    struct vector<float, std::allocator<float>> fBufPressureRaw;
    struct vector<float, std::allocator<float>> fBufPressureError;
    struct vector<float, std::allocator<float>> fBufTemperatureRaw;
    struct vector<std::vector<float>, std::allocator<std::vector<float>>> fFeatures;
    int fCurrentCount;
    float fMinTemperature;
    float fMaxTemperature;
    float fMinPressure;
    float fMaxPressure;
};

struct CLLocationCoordinate2D {
    double latitude;
    double longitude;
};

struct CLMacAddress {
    unsigned long long _field1;
};

struct CLMonitorGps;

struct CLMotionActivity {
    int type;
    int confidence;
    int source;
    int mountedState;
    int mountedConfidence;
    _Bool isStanding;
    float tilt;
    double timestamp;
    _Bool isVehicleConnected;
    int exitState;
    double estExitTime;
    double startTime;
    int rawType;
    int rawConfidence;
    struct {
        unsigned int motionHint:1;
        unsigned int gpsHint:1;
        unsigned int basebandHint:1;
        unsigned int wifiHint:1;
        unsigned int btHint:1;
    } vehicularFlags;
    int vehicularConfidence;
    float drivingStowedLikelihoodSum;
    float drivingArmLikelihoodSum;
    float ssLikelihoodSum;
    int workoutDetectionType;
    double workoutDetectionTime;
    unsigned long long workoutEscalationTime;
    int typeYouth;
};

struct CLMotionStateUpdate {
    double _field1;
    int _field2;
    int _field3;
};

struct CLNADController;

struct CLNatalieData {
    int _field1;
    struct __CFString *_field2;
    double _field3;
    int _field4;
    _Bool _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    long long _field9;
    long long _field10;
    double _field11;
    unsigned char _field12[16];
};

struct CLNatalieFeatures {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
    float _field5;
    float _field6;
    float _field7;
    int _field8;
    _Bool _field9;
};

struct CLNearbydInterfaceManager;

struct CLNetworkLocationRequestConfig {
    int _field1;
};

struct CLNetworkLocationServerResponseListener {
    CDUnknownFunctionPointerType *_field1;
};

struct CLNotifierBase {
    CDUnknownFunctionPointerType *_field1;
};

struct CLNotifierClientBase {
    CDUnknownFunctionPointerType *_field1;
};

struct CLOdometerEntry {
    double startTime;
    double distance;
    double accuracy;
    double gpsAltitude;
    double speed;
    double rawSpeed;
    double odometer;
    double gpsSpeedAccuracy;
    double timestampGps;
    int quality;
    int originDevice;
    int type;
    double groundAltitude;
    double groundAltitudeUncertainty;
    double smoothedGPSAltitude;
    double smoothedGPSAltitudeUncertainty;
    double gpsCourseRadians;
    double gpsCourseAccuracy;
    double slope;
    double maxAbsSlope;
    _Bool isGpsInterpolated;
};

struct CLOdometerSuitability {
    double _field1;
    _Bool _field2;
    _Bool _field3;
};

struct CLPedometerEvent {
    double _field1;
    int _field2;
};

struct CLPedometerPathStraightness {
    double _field1;
    double _field2;
    double _field3;
};

struct CLPolicyProactive;

struct CLPolicyTrip;

struct CLPowerAssertion;

struct CLPredictedWalkDistanceBoutDetector;

struct CLPredictedWalkDistanceBoutEntry {
    int _field1;
    double _field2;
    double _field3;
    unsigned int _field4;
    double _field5;
    double _field6;
    unsigned int _field7;
    unsigned int _field8;
    unsigned int _field9;
    double _field10;
    int _field11;
    int _field12;
    double _field13;
    double _field14;
    double _field15;
    double _field16;
    double _field17;
};

struct CLPredictedWalkDistanceBoutRecorderDb;

struct CLPredictedWalkDistanceEstimate {
    double _field1;
    double _field2;
    int _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    int _field11;
    int _field12;
    int _field13;
    int _field14;
    double _field15;
    double _field16;
    double _field17;
    int _field18;
    int _field19;
    double _field20;
    double _field21;
    double _field22;
    int _field23;
    double _field24;
    double _field25;
    double _field26;
    double _field27;
    double _field28;
    double _field29;
    double _field30;
    int _field31;
    int _field32;
    double _field33;
    double _field34;
    double _field35;
    double _field36;
};

struct CLPredictedWalkDistanceEstimateAnalytics {
    double _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    float _field6;
    float _field7;
    float _field8;
    float _field9;
    int _field10;
    float _field11;
    float _field12;
    float _field13;
    int _field14;
    int _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    int _field21;
    float _field22;
    float _field23;
    float _field24;
    float _field25;
    float _field26;
};

struct CLPredictedWalkDistanceEstimator;

struct CLRecordingSettings {
    CDUnknownFunctionPointerType *_field1;
};

struct CLRhythmicGnssStatusUpdate {
    int _field1;
    _Bool _field2;
    int _field3;
    struct bitset<2UL> _field4;
    _Bool _field5;
};

struct CLRhythmicStreamingControl {
    _Bool _field1;
};

struct CLRobustSlopeEstimator {
    float fLastSampleTime;
    struct deque<float, std::allocator<float>> fRunningTemperatureBuffer;
    struct map<int, std::deque<CLPressure::Sample>, std::less<int>, std::allocator<std::pair<const int, std::deque<CLPressure::Sample>>>> fTemperatureBins;
    struct map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> fTemperatureBinCount;
    int minBin;
    int maxBin;
};

struct CLRollingPowerAssertion;

struct CLRunningStat {
    int _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
};

struct CLSignificantElevation {
    int _field1;
    unsigned char _field2[16];
    double _field3;
    double _field4;
    unsigned int _field5;
    unsigned int _field6;
};

struct CLSignificantElevationEstimator;

struct CLSkiEntry {
    unsigned long long _field1;
    unsigned char _field2[16];
    unsigned char _field3[16];
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
};

struct CLSpringTrackerEntry {
    unsigned long long _field1;
    unsigned char _field2[16];
    unsigned char _field3[16];
    double _field4;
    long long _field5;
};

struct CLStandMinuteInputData {
    double _field1;
    unsigned int _field2;
    unsigned int _field3;
    double _field4;
};

struct CLStepCountEntry {
    double timestamp;
    double startTime;
    double firstStepTime;
    unsigned int count;
    double distance;
    double rawDistance;
    unsigned int floorsAscended;
    unsigned int floorsDescended;
    double currentPace;
    double currentCadence;
    double activeTime;
    int recordId;
    struct __CFString *sourceId;
    _Bool isOdometerDistance;
    _Bool isOdometerPace;
    struct CLAccelerometerPace accelerometerPace;
    unsigned int pushCount;
    unsigned int workoutType;
    unsigned char pedometerArmConstrainedState;
    unsigned int elevationAscended;
    unsigned int elevationDescended;
    union FalseStepDetectorStateUnion falseStepDetectorState;
    unsigned char falseStepsSuppressed;
    unsigned char distanceSource;
    int paceSource;
};

struct CLStepCountEntryAddition {
    double totalCalibratedDistance;
    double rawPace;
    unsigned int incrementalSteps;
    double incrementalActiveTime;
    double lastStepTime;
    double odometerSpeed;
    _Bool rawPaceDidJump;
    double calibratedDistance;
    double stepCadenceDeltaDistance;
    _Bool stepCadenceIsCalibrated;
    double energyDeltaDistance;
    _Bool energyIsCalibrated;
    double firstStepTime;
};

struct CLStepCountRecorderDb;

struct CLStepDistance {
    int _field1;
    double _field2;
    double _field3;
    int _field4;
    int _field5;
    double _field6;
    int _field7;
};

struct CLStrideCalEntry {
    int _field1;
    double _field2;
    unsigned int _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    int _field9;
    int _field10;
    double _field11;
    double _field12;
    int _field13;
    double _field14;
    double _field15;
    int _field16;
};

struct CLStrideCalibrationSessionMetrics {
    int session;
    double startTime;
    double endTime;
    double sumCalibrationDistanceSuccess;
    double sumCalibrationDistanceFailOther;
    double sumCalibrationDistanceFailGps;
    double sumCalibrationDistanceFailPedometer;
    double sumCalibrationDistanceFailGradient;
    double sumCalibrationDistanceInvalidGain;
    double sumCalibrationDistanceInvalidSpeed;
    double sumCalibrationDistanceInvalidLength;
    double totalDistance;
};

struct CLStrideLengthStepCadencePair {
    float strideLength;
    float stepCadence;
};

struct CLStrongPtr<NSData *> {
    id _field1;
};

struct CLSubHarvesterAvengerCrossValidationAnalytics {
    double baDispersion;
    double baEstimatedHorizontalAccuracy;
    unsigned int countBALocations;
    double deltaFindMyDistance;
    _Bool deviceFound;
    unsigned int deviceMotionState;
    double findMyEstimatedHorizontalAccuracy;
    unsigned int sigEnv;
    double timeToFindLatency;
    double truncatedDeviceLocationLatitude;
    double truncatedDeviceLocationLongitude;
    unsigned int timeOfDay;
};

struct CLSubHarvesterAvengerCrossValidationFinalAnalytics {
    double baDispersion;
    double baEstimatedHorizontalAccuracy;
    unsigned int countBALocations;
    double deltaFindMyDistance;
    _Bool deviceFound;
    unsigned int deviceMotionState;
    double findMyEstimatedHorizontalAccuracy;
    unsigned int sigEnv;
    double truncatedDeviceLocationLatitude;
    double truncatedDeviceLocationLongitude;
    unsigned int timeOfDay;
    double distanceAccuracyRatio;
};

struct CLSubHarvesterAvengerSettings {
    CDUnknownFunctionPointerType *_vptr$Settings;
    double fMaximumTimeOffsetThreshold;
    double fMaximumTimeOffsetThresholdNotMoving;
    double fMaximumWaitTimeForActiveBestLocationRequest;
    double fMaximumWaitTimeForActiveFineLocationRequest;
    unsigned int fMaximumNumberOfAdvertisementsInCache;
    unsigned int fMaximumBestRequestsPerDay;
    unsigned int fMaximumFineRequestsPerDay;
    double fAnalyticsHoldoffInterval;
    _Bool fCrossValidationEnabled;
    unsigned int fMaximumCrossvalidationRequests;
    double fCrossValidationRequestLimitShortResetInterval;
    double fCrossValidationRequestLimitLongResetInterval;
    double fCrossValidationDurationInterval;
    double fCrossValidationQueryBAInterval;
    double fCrossValidationFinalQueryInterval;
    _Bool fCrossValidationAllowedToRunWithoutVisit;
    double fCrossValidationRequestInterval;
    double fEnabledAnalyticsHoldoffInterval;
    unsigned int fMaximumDataCollectionRequests;
    double fDataCollectionRequestResetInterval;
    double fDataCollectionRequestInterval;
    double fDataCollectionRequestWaitInterval;
    double fActivityBasedSpeedDriving;
    double fActivityBasedSpeedCycling;
    double fActivityBasedSpeedRunning;
    double fActivityBasedSpeedWalking;
    double fSaveBeaconPayloadCacheInterval;
    double fMaximumActivityBasedBeaconPayloadCacheDuration;
    double fTimeShiftForRegeotag;
    int fMaximumPayloadsPerKey;
    double fMinimumOverlappingPercentage;
    double fMaximumDrivingSpeed;
    double fActivityBasedRegeotaggingFetchDuration;
};

struct CLSwimEntry {
    unsigned long long _field1;
    unsigned char _field2[16];
    unsigned char _field3[16];
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    int _field10;
    int _field11;
    int _field12;
    int _field13;
    float _field14;
    float _field15;
    float _field16;
    int _field17;
    int _field18;
    double _field19;
    double _field20;
    int _field21;
};

struct CLTileFileDownloadDetails {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    double _field4;
    int _field5;
    double _field6;
    _Bool _field7;
    _Bool _field8;
};

struct CLVO2MaxCloudKitStats {
    _Bool syncEngineEnabled;
    int outputSaveQueuedCount;
    int outputSaveAttemptedCount;
    int outputSaveSuccessCount;
    int outputSaveFailureCount;
    int outputFetchSuccessCount;
    int outputFetchFailureCount;
    int inputSaveQueuedCount;
    int inputSaveAttemptedCount;
    int inputSaveSuccessCount;
    int inputSaveFailureCount;
    int inputFetchSuccessCount;
    int inputFetchFailureCount;
    int forcedFetchRequestedCount;
    double secondsOfDataCollection;
};

struct CLVO2MaxInputCache;

struct CLVO2MaxInputStore;

struct CLVO2MaxRetrocomputeBodyMetricsDb;

struct CLVO2MaxRetrocomputeRecorderDb;

struct CLVO2MaxStagingOutputStore;

struct CLVehicleConnection {
    double _field1;
    double _field2;
    char _field3[256];
    double _field4;
};

struct CLVisualLocalizationPropagation {
    CDUnknownFunctionPointerType *_vptr$CLVisualLocalizationPropagation;
    struct CMFixedSizeQueue<CMVector<float, 3>, 400UL> fVlfRotationRateHistory;
    struct CMFixedSizeQueue<unsigned long long, 400UL> fVlfTimestampHistory;
    struct CMOQuaternion fAttitudePropagated;
    float fAttitudeUncertainty;
    unsigned long long fTimestamp;
    struct CMOQuaternion fAttitudeQuaternion;
};

struct CLWalkingSpeedCalRecorderDb;

struct CLWifiRangeResult;

struct CLWorkoutSessionDetails {
    int _field1;
    double _field2;
    long long _field3;
    unsigned long long _field4;
};

struct CLWorkoutUpdate {
    double _field1;
    int _field2;
    int _field3;
    unsigned int _field4;
};

struct CLZoneBoundary_ {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
};

struct CMCalibrationTrackRawStrideLength {
    double _field1;
    int _field2;
    _Bool _field3;
};

struct CMFixedSizeQueue<CMVector<float, 3>, 400UL> {
    CDStruct_b91b6b9f fHeadAndSize;
    unsigned int fCapacity;
    char fBuffer[12];
    struct CMQueueStorage<CMVector<float, 3>, 400UL> fStorage;
};

struct CMFixedSizeQueue<double, 2UL> {
    CDStruct_b91b6b9f fHeadAndSize;
    unsigned int fCapacity;
    char fBuffer[8];
    struct CMQueueStorage<double, 2UL> fStorage;
};

struct CMFixedSizeQueue<unsigned long long, 400UL> {
    CDStruct_b91b6b9f fHeadAndSize;
    unsigned int fCapacity;
    char fBuffer[8];
    struct CMQueueStorage<unsigned long long, 400UL> fStorage;
};

struct CMKFFilteredPressureSample {
    float _field1;
    double _field2;
    float _field3;
    float _field4;
    double _field5;
    float _field6;
    float _field7;
};

struct CMOQuaternion {
    float elements[4];
};

struct CMQueueStorage<CMVector<float, 3>, 400UL> {
    char buffer[4788];
};

struct CMQueueStorage<double, 2UL> {
    char buffer[8];
};

struct CMQueueStorage<unsigned long long, 400UL> {
    char buffer[3192];
};

struct CMStrideCalRecorderDb;

struct CMWakeGestureEventVisitor;

struct Cell {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    int _field8;
};

struct ChoreaScore {
    double _field1;
    int _field2;
    float _field3;
    float _field4;
    int _field5;
};

struct Client;

struct CompassCalibration {
    unsigned char _field1;
    char _field2;
    unsigned char _field3;
    unsigned char _field4;
    _Bool _field5;
    float _field6[3];
    float _field7[3];
    float _field8[3];
    float _field9;
    float _field10;
    float _field11;
    float _field12;
    float _field13;
    float _field14;
    float _field15;
    float _field16;
    float _field17;
};

struct Config {
    struct FallStatsConfig _field1;
    _Bool _field2;
};

struct DetailedConnectionInfo {
    _Bool _field1;
    _Bool _field2;
    int _field3;
    int _field4;
    int _field5;
    _Bool _field6;
};

struct DeviceTouchState {
    _Bool _field1;
    double _field2;
};

struct DirectionOfTravelAssistance {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    int _field15;
    double _field16;
    double _field17;
};

struct Dispatcher;

struct External;

struct FallModel {
    float fRatioMaxAbsX[17];
    float fRatioMaxAbsY[17];
    float fRatioMaxAbsZ[17];
    float fRatioMaxJerkVM[67];
    float fRatioMinInertialZ[21];
    float fRatioAccelPathLength[10];
    float fRatioMaxAngleChangePreimpact[16];
    float fRatioMaxAngleChangePostimpact[16];
    struct LikelihoodRatioInfo fLikelihoodRatioInfo[8];
};

struct FallStatsConfig {
    unsigned long long _field1;
    unsigned char _field2;
    unsigned char _field3;
    unsigned char _field4;
    unsigned char _field5;
    unsigned char _field6;
    unsigned char _field7;
};

struct FallThresholds {
    float fImpactMaxAccelNormAlertThreshold;
    float fImpactMaxAccelNormLoggingStatsThreshold;
    float fImpactMaxAccelNormLoggingHeartRateThreshold;
    float fImpactMaxAccelNormLoggingHighResolutionSensorDataThreshold;
    float fTripFallPosteriorRatioDetectionThreshold;
    float fSlipFallPosteriorRatioDetectionThreshold;
    float fOtherFallPosteriorRatioDetectionThreshold;
    float fTripNearFallPosteriorRatioDetectionThreshold;
    float fSlipNearFallPosteriorRatioDetectionThreshold;
    float fOtherNearFallPosteriorRatioDetectionThreshold;
    int fTotalLongLieThreshold;
    int fConsecutiveLongLieThreshold;
    float fAlertGatingMotionThreshold;
    float fCyclingImpactGravityVarianceThreshold;
    float fCyclingImpactCrownVarianceThreshold;
    float fCyclingImpactMaxAbsYThreshold;
    float fCyclingDistanceTraveledPostImpactThreshold;
    int fCyclingEpochsDetectedPostImpactThreshold;
    int fOtherWorkoutQuiescenceThresholdLow;
    int fOtherWorkoutQuiescenceThresholdHigh;
    int fOtherWorkoutConsecutiveLongLieThreshold;
    _Bool fOtherWorkoutShouldCancelAlertOnStepsThreshold;
    _Bool fOtherWorkoutShouldCancelAlertOnStandThreshold;
    _Bool fOtherWorkoutShouldCancelAlertOnActiveThreshold;
    unsigned char fRefereeOperatingModeOverride;
    unsigned char fAllDayStateMachineOperatingModeOverride;
    unsigned char fCyclingStateMachineEnabledOverride;
    unsigned char fAllDayStateMachineEnabledOverride;
};

struct FalseStepDetectorState {
    unsigned int accelPoseXHigh:1;
    unsigned int accelVarXYZLow:1;
    unsigned int gyroNumSamplesSufficient:1;
    unsigned int gyroVarXHigh:1;
    unsigned int consecutiveRequirement:1;
    unsigned int isVehicularLowConfidence:1;
    unsigned int isVehicularHighConfidence:1;
    unsigned int consistentStepsProtection:1;
};

struct FeaturesAllDay;

struct FeaturesCycling;

struct FeaturesPedestrian;

struct FitnessPlusInfo {
    _Bool _field1;
    char _field2[64];
    long long _field3;
};

struct FormMetrics {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned int _field7;
    double _field8;
    double _field9;
    double _field10;
    int _field11;
    int _field12;
    double _field13;
    _Bool _field14;
    double _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
    double _field20;
    double _field21;
    double _field22;
    double _field23;
};

struct GaitMetrics {
    unsigned char _field1;
    unsigned char _field2;
    unsigned char _field3;
    unsigned char _field4;
    unsigned char _field5;
    unsigned char _field6;
    unsigned char _field7;
    unsigned char _field8;
    unsigned long long _field9;
    unsigned long long _field10;
    float _field11;
    float _field12;
    float _field13;
    float _field14;
    float _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    float _field21;
};

struct GaitMetricsRecorderDb;

struct HRRecoveryResult {
    int _field1;
    double _field2;
    double _field3;
    double _field4;
    long long _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    double _field11;
    double _field12;
    double _field13;
    double _field14;
    double _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
    double _field20;
    double _field21;
    _Bool _field22;
    double _field23;
    double _field24;
    double _field25;
    double _field26;
    _Bool _field27;
    _Bool _field28;
};

struct HarvestData {
    double _field1;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> _field7;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> _field8;
    int _field9;
    _Bool _field10;
    _Bool _field11;
    struct CLMotionActivity _field12;
    struct CLMotionActivity _field13;
    struct CLMotionActivity _field14;
};

struct HealthKitQueryDelegate;

struct HighFrequencyFeatures {
    struct MagnitudeFeatures fMagnitudeFeatures;
    struct JerkFeatures fJerkFeatures;
};

struct INotifier {
    CDUnknownFunctionPointerType *_field1;
};

struct Impact {
    unsigned short fSeq;
    unsigned char fTrialCount;
    char fCrown;
    unsigned long long fNow;
    unsigned char fAge;
    unsigned char fState;
    char fFallType;
    _Bool fIsFall;
    _Bool fIsNearFall;
    _Bool fFallAlertSent;
    unsigned char fSimulated;
    unsigned long long fTimestamp;
    struct HighFrequencyFeatures fHighFrequencyFeatures;
    unsigned long long fPeakTimestamp;
    float fAccelPathLength;
    float fMinInertialZ;
    float fMinInertialZHighFreq;
    float fAngleChangePreImpact;
    float fAngleChangePostImpact;
    float fMaxAngleChangePreImpact;
    float fMaxAngleChangePostImpact;
    float fSumDeltaAngles;
    float fPosteriorRatio;
    float fPoseAtImpact;
    float fTiltAngle;
    float fSwingAngle;
    float fAccelPathLengthWithPeak;
    float fPathLengthHarmonicMean;
    float fPathLengthDecorrelation;
    float fPathLengthDelaySpread;
    float fGravityVariance;
    float fCrownVariance;
    float fMedianAbsGravityY;
    float fAbruptGravityChangeAngle;
    float fFallDistance;
    _Bool fHasMotionBeforeImpact;
    unsigned char fImpactState;
    unsigned char fOperatingMode;
    union {
        struct FeaturesAllDay featuresAllDay;
        struct FeaturesPedestrian featuresPedestrian;
        struct FeaturesCycling featuresCycling;
    } ;
};

struct ImpactData {
    double _field1;
    double _field2;
    unsigned char _field3;
    struct {
        float _field1[4];
        union {
            unsigned long long _field1;
            unsigned long long _field2;
        } _field2;
    } _field4;
};

struct ImpactEvent {
    struct Impact fImpact;
    unsigned char fResponse;
    unsigned char fResolution;
    double fAbsoluteTimestamp;
    double fAbsoluteImpactTimestamp;
    double fTimestamp;
    double fSOSCallTimestamp;
    unsigned char fFallSOSState;
};

struct IndoorOutdoorUpdate {
    double _field1;
    long long _field2;
    long long _field3;
};

struct JerkFeatures {
    float fJerkVectorMagMax;
};

struct LeapSecondChange {
    unsigned long long _field1;
    short _field2;
};

struct LeapSecondInfo {
    short _field1;
    unsigned char _field2;
    struct LeapSecondChange _field3;
};

struct LikelihoodRatioInfo {
    float firstBinEdge;
    float binSize;
    unsigned char binNum;
};

struct LocationDerivedSpeed {
    double _field1;
    double _field2;
    double _field3;
};

struct LteCell {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    double _field8;
    double _field9;
    int _field10;
    int _field11;
    int _field12;
    int _field13;
    int _field14;
    int _field15;
    int _field16;
    int _field17;
    int _field18;
};

struct MagnitudeFeatures {
    float fXMin;
    float fXMax;
    float fYMin;
    float fYMax;
    float fZMin;
    float fZMax;
};

struct MapMatchedPositionAssistance {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
};

struct MeasurementData;

struct MediatedMotionActivity {
    double _field1;
    struct CLMotionActivity _field2;
    int _field3;
    struct CLNatalieFeatures _field4;
    long long _field5;
    long long _field6;
    _Bool _field7;
    _Bool _field8;
    unsigned char _field9[16];
};

struct Metric {
    _Bool _field1;
    double _field2;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> _field3;
};

struct MonitoringParameters {
    double latencyBudget;
    double retryRate;
    _Bool queryALS;
};

struct MotionFitnessDaily {
    struct Metric _field1;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> _field2;
    int _field3;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> _field4;
    _Bool _field5;
    unsigned int _field6;
    unsigned int _field7;
    unsigned int _field8;
    unsigned int _field9;
    unsigned int _field10;
    unsigned int _field11;
    unsigned int _field12;
    unsigned int _field13;
    long long _field14;
    long long _field15;
    unsigned int _field16;
    unsigned int _field17;
    _Bool _field18;
};

struct MotionOverride {
    int _field1;
    struct CLMotionActivity _field2;
    long long _field3;
    struct WorkoutSettings _field4;
};

struct Name {
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fUserName;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fExecutable;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fBundlePath;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fLimitingBundleId;
    _Bool fBundleRequiresProxy;
    _Bool fSystemService;
    _Bool fHarvestableSystemService;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fBundleId;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fPluginBundleId;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> fCounterpartBundleId;
    _Bool fValidProxyData;
    _Bool fWatchKitPlugin;
    _Bool fIsAppClip;
};

struct NormalDistribution {
    double _field1;
    double _field2;
};

struct OdometerEntry {
    double _field1;
    double _field2;
    struct CLOdometerEntry _field3;
};

struct PredictedGnssAvailability {
    int _field1;
    int _field2;
    double _field3;
    double _field4;
};

struct ProcessedBoutResult;

struct ReachabilityState {
    int _field1;
    int _field2;
    _Bool _field3;
    _Bool _field4;
};

struct RebaseEvent {
    float latitude;
    float longitude;
    _Bool inVisit;
    _Bool demAvailableInTrack;
    _Bool forcedGPSRecently;
    int rebaseSource;
    _Bool inOutdoorWorkout;
    _Bool firstRebaseSinceLocationdStart;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> altitudeError_binned;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> timeToFirstRebase_binned;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> referenceUncertainty_binned;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> uncertainty_binned;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> timeSinceVisitEntry_binned;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> timeSinceLastRebase_binned;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> correction_binned;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> distanceSinceLastRebase_binned;
};

struct ReferencePairedWithPressure {
    struct NormalDistribution _field1;
    struct NormalDistribution _field2;
    int _field3;
};

struct RegInfo {
    struct MonitoringParameters settledParameters;
    struct MonitoringParameters unsettledParameters;
};

struct RelativeAltitude;

struct RoutineVisit {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
};

struct SPUGaitMetrics {
    struct GaitMetrics _field1;
    double _field2;
};

struct SatelliteReport {
    struct vector<CLClientSatelliteInfo, std::allocator<CLClientSatelliteInfo>> _field1;
    struct vector<CLClientSatelliteInfo, std::allocator<CLClientSatelliteInfo>> _field2;
    struct vector<CLClientSatelliteInfo, std::allocator<CLClientSatelliteInfo>> _field3;
    struct vector<CLClientSatelliteInfo, std::allocator<CLClientSatelliteInfo>> _field4;
    struct vector<CLClientSatelliteInfo, std::allocator<CLClientSatelliteInfo>> _field5;
};

struct ScanResult {
    double _field1;
    struct vector<CLWifiService_Type::AccessPoint, std::allocator<CLWifiService_Type::AccessPoint>> _field2;
};

struct ScdmaCell {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    int _field8;
};

struct StrideCalInfo {
    int _field1;
    int _field2;
    int _field3;
    double _field4;
    double _field5;
    double _field6;
    int _field7;
    double _field8;
    double _field9;
    double _field10;
};

struct SwimAttrib {
    long long _field1;
    double _field2;
};

struct TechnologyStatus {
    int _field1;
    _Bool _field2;
};

struct TremorScore {
    double _field1;
    int _field2;
    float _field3;
    float _field4;
};

struct TunnelBridgeAssistance {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    _Bool _field6;
    _Bool _field7;
    _Bool _field8;
    _Bool _field9;
};

struct TunnelEndPositionAssistance {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    _Bool _field10;
    int _field11;
    _Bool _field12;
    double _field13;
    double _field14;
    double _field15;
    double _field16;
};

struct VO2MaxCloudKitSyncEngineMetadata {
    unsigned long long _field1;
    double _field2;
    double _field3;
    id _field4;
};

struct VO2MaxHealthKitSample {
    double _field1;
    double _field2;
    double _field3;
    unsigned char _field4[16];
    unsigned int _field5;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> _field6;
};

struct VO2MaxInput {
    unsigned long long _field1;
    unsigned char _field2[16];
    float _field3;
    double _field4;
    float _field5;
    float _field6;
    double _field7;
    int _field8;
    double _field9;
    _Bool _field10;
    _Bool _field11;
    int _field12;
    long long _field13;
    double _field14;
    double _field15;
    _Bool _field16;
};

struct VO2MaxOutput {
    unsigned long long _field1;
    unsigned char _field2[16];
    double _field3;
    double _field4;
    long long _field5;
    double _field6;
    double _field7;
    double _field8;
    unsigned char _field9[16];
    double _field10;
    double _field11;
    int _field12;
    _Bool _field13;
    _Bool _field14;
    unsigned int _field15;
    double _field16;
    double _field17;
};

struct VO2MaxResult {
    double _field1;
    long long _field2;
    double _field3;
    _Bool _field4;
    _Bool _field5;
    _Bool _field6;
    _Bool _field7;
    unsigned char _field8[16];
    _Bool _field9;
    double _field10;
    double _field11;
    int _field12;
    int _field13;
};

struct VO2MaxRetrocomputeHistory {
    unsigned long long _field1;
    double _field2;
    int _field3;
    int _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    unsigned char _field10[16];
    double _field11;
    double _field12;
    unsigned int _field13;
    unsigned int _field14;
    unsigned int _field15;
    unsigned int _field16;
    double _field17;
    double _field18;
    double _field19;
    unsigned int _field20;
    double _field21;
};

struct VO2MaxRetrocomputeSessionResult {
    unsigned char _field1[16];
    double _field2;
    _Bool _field3;
    struct vector<VO2MaxSummary, std::allocator<VO2MaxSummary>> _field4;
    struct VO2MaxOutput _field5;
    struct VO2MaxHealthKitSample _field6;
    int _field7;
};

struct VO2MaxSessionAttributes {
    unsigned long long _field1;
    double _field2;
    unsigned char _field3[16];
    double _field4;
    double _field5;
    unsigned int _field6;
    _Bool _field7;
    int _field8;
    id _field9;
    id _field10;
};

struct VO2MaxSessionStats {
    double _field1;
    float _field2;
    _Bool _field3;
    _Bool _field4;
};

struct VO2MaxStagingLostEstimate;

struct VO2MaxStagingOutput {
    unsigned long long _field1;
    unsigned char _field2[16];
    double _field3;
    double _field4;
    long long _field5;
    double _field6;
    double _field7;
    double _field8;
    unsigned char _field9[16];
    double _field10;
    double _field11;
    int _field12;
    _Bool _field13;
    _Bool _field14;
    unsigned int _field15;
    double _field16;
    double _field17;
    int _field18;
    unsigned int _field19;
    _Bool _field20;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> _field21;
    double _field22;
};

struct VO2MaxSummary;

struct WalkingBoutExtractor;

struct WalkingSteadinessClassifier;

struct WorkoutEvent {
    double _field1;
    double _field2;
    long long _field3;
    double _field4;
    struct CLWorkoutSessionDetails _field5;
    struct WorkoutSettings _field6;
};

struct WorkoutRecorderHealthKitInfo {
    CDUnknownFunctionPointerType *_vptr$Base;
    double _restingHeartRate;
    double _walkingHeartRateAverage;
    unsigned int _workoutActivityType;
    struct {
        unsigned int restingHeartRate:1;
        unsigned int walkingHeartRateAverage:1;
        unsigned int workoutActivityType:1;
    } _has;
};

struct WorkoutSettings {
    unsigned char _field1[16];
    unsigned char _field2[16];
    long long _field3;
    long long _field4;
    union WorkoutAttrib _field5;
    struct FitnessPlusInfo _field6;
    unsigned long long _field7;
};

struct WriterManager;

struct XtraFileAvailable {
    double _field1;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> _field2;
};

struct _CLClientManagerStateTrackerState {
    int locationServicesEnabledStatus;
    _Bool locationRestricted;
};

struct _CLDaemonStatusStateTrackerState {
    struct Battery batteryData;
    int reachability;
    int thermalLevel;
    _Bool airplaneMode;
    _Bool batterySaverModeEnabled;
    _Bool restrictedMode;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct __CFString;

struct __shared_weak_count;

struct __tree_end_node<std::__tree_node_base<void *>*> {
    void *__left_;
};

struct array<CLBarometerCalibrationContextManager *, 7UL> {
    CLBarometerCalibrationContextManager *__elems_[7];
};

struct array<std::deque<std::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData>>, 7UL> {
    struct deque<std::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData>, std::allocator<std::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData>>> __elems_[7];
};

struct basic_string<char, std::char_traits<char>, std::allocator<char>> {
    struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    unsigned long long __cap_;
                    unsigned long long __size_;
                    char *__data_;
                } __l;
                struct __short {
                    union {
                        unsigned char __size_;
                        char __lx;
                    } ;
                    char __data_[23];
                } __s;
                struct __raw {
                    unsigned long long __words[3];
                } __r;
            } ;
        } __value_;
    } __r_;
};

struct bitset<2UL> {
    unsigned long long _field1;
};

struct deque<CLElevationChangeEntry, std::allocator<CLElevationChangeEntry>> {
    struct __split_buffer<CLElevationChangeEntry *, std::allocator<CLElevationChangeEntry *>> {
        struct CLElevationChangeEntry **__first_;
        struct CLElevationChangeEntry **__begin_;
        struct CLElevationChangeEntry **__end_;
        struct __compressed_pair<CLElevationChangeEntry **, std::allocator<CLElevationChangeEntry *>> {
            struct CLElevationChangeEntry **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::allocator<CLElevationChangeEntry>> {
        unsigned long long __value_;
    } __size_;
};

struct deque<CLRunning::FormMetrics, std::allocator<CLRunning::FormMetrics>> {
    struct __split_buffer<CLRunning::FormMetrics *, std::allocator<CLRunning::FormMetrics *>> {
        struct FormMetrics **__first_;
        struct FormMetrics **__begin_;
        struct FormMetrics **__end_;
        struct __compressed_pair<CLRunning::FormMetrics **, std::allocator<CLRunning::FormMetrics *>> {
            struct FormMetrics **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::allocator<CLRunning::FormMetrics>> {
        unsigned long long __value_;
    } __size_;
};

struct deque<RelativeAltitude, std::allocator<RelativeAltitude>> {
    struct __split_buffer<RelativeAltitude *, std::allocator<RelativeAltitude *>> {
        struct RelativeAltitude **__first_;
        struct RelativeAltitude **__begin_;
        struct RelativeAltitude **__end_;
        struct __compressed_pair<RelativeAltitude **, std::allocator<RelativeAltitude *>> {
            struct RelativeAltitude **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::allocator<RelativeAltitude>> {
        unsigned long long __value_;
    } __size_;
};

struct deque<float, std::allocator<float>> {
    struct __split_buffer<float *, std::allocator<float *>> {
        float **__first_;
        float **__begin_;
        float **__end_;
        struct __compressed_pair<float **, std::allocator<float *>> {
            float **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::allocator<float>> {
        unsigned long long __value_;
    } __size_;
};

struct deque<std::pair<double, double>, std::allocator<std::pair<double, double>>> {
    struct __split_buffer<std::pair<double, double>*, std::allocator<std::pair<double, double>*>> {
        void **__first_;
        void **__begin_;
        void **__end_;
        struct __compressed_pair<std::pair<double, double>**, std::allocator<std::pair<double, double>*>> {
            void **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::allocator<std::pair<double, double>>> {
        unsigned long long __value_;
    } __size_;
};

struct deque<std::pair<double, unsigned int>, std::allocator<std::pair<double, unsigned int>>> {
    struct __split_buffer<std::pair<double, unsigned int>*, std::allocator<std::pair<double, unsigned int>*>> {
        void **__first_;
        void **__begin_;
        void **__end_;
        struct __compressed_pair<std::pair<double, unsigned int>**, std::allocator<std::pair<double, unsigned int>*>> {
            void **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::allocator<std::pair<double, unsigned int>>> {
        unsigned long long __value_;
    } __size_;
};

struct deque<std::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData>, std::allocator<std::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData>>> {
    struct __split_buffer<std::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData>*, std::allocator<std::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData>*>> {
        void **__first_;
        void **__begin_;
        void **__end_;
        struct __compressed_pair<std::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData>**, std::allocator<std::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData>*>> {
            void **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::allocator<std::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData>>> {
        unsigned long long __value_;
    } __size_;
};

struct duration<long double, std::ratio<1, 1>> {
    long double __rep_;
};

struct list<CLDaemonLocation, std::allocator<CLDaemonLocation>> {
    struct __list_node_base<CLDaemonLocation, void *> {
        void *__prev_;
        void *__next_;
    } __end_;
    struct __compressed_pair<unsigned long, std::allocator<std::__list_node<CLDaemonLocation, void *>>> {
        unsigned long long __value_;
    } __size_alloc_;
};

struct list<CLPredictedWalkDistanceBoutEntry, std::allocator<CLPredictedWalkDistanceBoutEntry>> {
    struct __list_node_base<CLPredictedWalkDistanceBoutEntry, void *> {
        void *__prev_;
        void *__next_;
    } __end_;
    struct __compressed_pair<unsigned long, std::allocator<std::__list_node<CLPredictedWalkDistanceBoutEntry, void *>>> {
        unsigned long long __value_;
    } __size_alloc_;
};

struct list<CMMsl::Item *, std::allocator<CMMsl::Item *>> {
    struct __list_node_base<CMMsl::Item *, void *> {
        void *__prev_;
        void *__next_;
    } __end_;
    struct __compressed_pair<unsigned long, std::allocator<std::__list_node<CMMsl::Item *, void *>>> {
        unsigned long long __value_;
    } __size_alloc_;
};

struct map<CLBarometerCalibration_Types::Source, double, std::less<CLBarometerCalibration_Types::Source>, std::allocator<std::pair<const CLBarometerCalibration_Types::Source, double>>> {
    struct __tree<std::__value_type<CLBarometerCalibration_Types::Source, double>, std::__map_value_compare<CLBarometerCalibration_Types::Source, std::__value_type<CLBarometerCalibration_Types::Source, double>, std::less<CLBarometerCalibration_Types::Source>, true>, std::allocator<std::__value_type<CLBarometerCalibration_Types::Source, double>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<CLBarometerCalibration_Types::Source, double>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<CLBarometerCalibration_Types::Source, std::__value_type<CLBarometerCalibration_Types::Source, double>, std::less<CLBarometerCalibration_Types::Source>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<id<CLSignificantVisitManagerClientProtocol>, NSString *, std::less<id<CLSignificantVisitManagerClientProtocol>>, std::allocator<std::pair<const id<CLSignificantVisitManagerClientProtocol>, NSString *>>> {
    struct __tree<std::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::__map_value_compare<id<CLSignificantVisitManagerClientProtocol>, std::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::less<id<CLSignificantVisitManagerClientProtocol>>, true>, std::allocator<std::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<id<CLSignificantVisitManagerClientProtocol>, std::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::less<id<CLSignificantVisitManagerClientProtocol>>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<int, int, std::less<int>, std::allocator<std::pair<const int, int>>> {
    struct __tree<std::__value_type<int, int>, std::__map_value_compare<int, std::__value_type<int, int>, std::less<int>, true>, std::allocator<std::__value_type<int, int>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<int, int>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<int, std::__value_type<int, int>, std::less<int>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<int, std::deque<CLPressure::Sample>, std::less<int>, std::allocator<std::pair<const int, std::deque<CLPressure::Sample>>>> {
    struct __tree<std::__value_type<int, std::deque<CLPressure::Sample>>, std::__map_value_compare<int, std::__value_type<int, std::deque<CLPressure::Sample>>, std::less<int>, true>, std::allocator<std::__value_type<int, std::deque<CLPressure::Sample>>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<int, std::deque<CLPressure::Sample>>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<int, std::__value_type<int, std::deque<CLPressure::Sample>>, std::less<int>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<unsigned int, CLBarometerCalibrationSource *, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, CLBarometerCalibrationSource *>>> {
    struct __tree<std::__value_type<unsigned int, CLBarometerCalibrationSource *>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, CLBarometerCalibrationSource *>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, CLBarometerCalibrationSource *>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<unsigned int, CLBarometerCalibrationSource *>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, CLBarometerCalibrationSource *>, std::less<unsigned int>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<unsigned long, int, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, int>>> {
    struct __tree<std::__value_type<unsigned long, int>, std::__map_value_compare<unsigned long, std::__value_type<unsigned long, int>, std::less<unsigned long>, true>, std::allocator<std::__value_type<unsigned long, int>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<unsigned long, int>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned long, std::__value_type<unsigned long, int>, std::less<unsigned long>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct optional<CLWifiService_Type::AccessPoint> {
    union {
        char _field1;
        struct AccessPoint _field2;
    } _field1;
    _Bool _field2;
};

struct os_state_hints_s {
    unsigned int _field1;
    char *_field2;
    unsigned int _field3;
    unsigned int _field4;
};

struct queue<std::pair<double, unsigned int>, std::deque<std::pair<double, unsigned int>>> {
    struct deque<std::pair<double, unsigned int>, std::allocator<std::pair<double, unsigned int>>> c;
};

struct shared_ptr<CLAvengerHarvestInterface::External> {
    struct External *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData> {
    struct CLBarometerCalibrationData *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationWifiData> {
    struct CLBarometerCalibrationWifiData *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLBatchedLocations> {
    struct CLBatchedLocations *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLCardioChangeHistoryDb> {
    struct CLCardioChangeHistoryDb *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CLHRRecoveryInputHRRecorderDb> {
    struct CLHRRecoveryInputHRRecorderDb *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CLHRRecoveryInputWRRecorderDb> {
    struct CLHRRecoveryInputWRRecorderDb *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CLHRRecoverySessionRecorderDb> {
    struct CLHRRecoverySessionRecorderDb *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CLHarvestController> {
    struct CLHarvestController *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CLMobility::BoutBoundaryRecorderDb> {
    struct BoutBoundaryRecorderDb *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CLMobility::BoutMetricsRecorderDb> {
    struct BoutMetricsRecorderDb *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CLMobility::GaitMetricsRecorderDb> {
    struct GaitMetricsRecorderDb *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CLMobility::HealthKitQueryDelegate> {
    struct HealthKitQueryDelegate *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CLMonitorGps> {
    struct CLMonitorGps *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CLPolicyProactive> {
    struct CLPolicyProactive *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CLPolicyTrip> {
    struct CLPolicyTrip *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CLPredictedWalkDistanceBoutRecorderDb> {
    struct CLPredictedWalkDistanceBoutRecorderDb *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CLStepCountRecorderDb> {
    struct CLStepCountRecorderDb *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CLVO2MaxInputCache> {
    struct CLVO2MaxInputCache *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CLVO2MaxInputStore> {
    struct CLVO2MaxInputStore *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CLWalkingSpeedCalRecorderDb> {
    struct CLWalkingSpeedCalRecorderDb *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const gnss::MeasurementData> {
    struct MeasurementData *_field1;
    struct __shared_weak_count *_field2;
};

struct time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono::duration<long double>> {
    struct duration<long double, std::ratio<1, 1>> __d_;
};

struct unique_ptr<CLActivityAggregator<CLCardioChange::EstimateResult>, std::default_delete<CLActivityAggregator<CLCardioChange::EstimateResult>>> {
    struct __compressed_pair<CLActivityAggregator<CLCardioChange::EstimateResult>*, std::default_delete<CLActivityAggregator<CLCardioChange::EstimateResult>>> {
        void *__value_;
    } __ptr_;
};

struct unique_ptr<CLActivityAggregator<CLMobility::BoutBoundary>, std::default_delete<CLActivityAggregator<CLMobility::BoutBoundary>>> {
    struct __compressed_pair<CLActivityAggregator<CLMobility::BoutBoundary>*, std::default_delete<CLActivityAggregator<CLMobility::BoutBoundary>>> {
        void *__value_;
    } __ptr_;
};

struct unique_ptr<CLActivityAggregator<CLMobility::BoutMetrics>, std::default_delete<CLActivityAggregator<CLMobility::BoutMetrics>>> {
    struct __compressed_pair<CLActivityAggregator<CLMobility::BoutMetrics>*, std::default_delete<CLActivityAggregator<CLMobility::BoutMetrics>>> {
        void *__value_;
    } __ptr_;
};

struct unique_ptr<CLActivityAggregator<CLMobility::GaitMetrics>, std::default_delete<CLActivityAggregator<CLMobility::GaitMetrics>>> {
    struct __compressed_pair<CLActivityAggregator<CLMobility::GaitMetrics>*, std::default_delete<CLActivityAggregator<CLMobility::GaitMetrics>>> {
        void *__value_;
    } __ptr_;
};

struct unique_ptr<CLActivityAggregator<CLPredictedWalkDistanceBoutEntry>, std::default_delete<CLActivityAggregator<CLPredictedWalkDistanceBoutEntry>>> {
    struct __compressed_pair<CLActivityAggregator<CLPredictedWalkDistanceBoutEntry>*, std::default_delete<CLActivityAggregator<CLPredictedWalkDistanceBoutEntry>>> {
        void *__value_;
    } __ptr_;
};

struct unique_ptr<CLActivityAggregator<HRRecoveryInputHR>, std::default_delete<CLActivityAggregator<HRRecoveryInputHR>>> {
    struct __compressed_pair<CLActivityAggregator<HRRecoveryInputHR>*, std::default_delete<CLActivityAggregator<HRRecoveryInputHR>>> {
        void *__value_;
    } __ptr_;
};

struct unique_ptr<CLActivityAggregator<HRRecoveryInputWR>, std::default_delete<CLActivityAggregator<HRRecoveryInputWR>>> {
    struct __compressed_pair<CLActivityAggregator<HRRecoveryInputWR>*, std::default_delete<CLActivityAggregator<HRRecoveryInputWR>>> {
        void *__value_;
    } __ptr_;
};

struct unique_ptr<CLActivityAggregator<HRRecoverySession>, std::default_delete<CLActivityAggregator<HRRecoverySession>>> {
    struct __compressed_pair<CLActivityAggregator<HRRecoverySession>*, std::default_delete<CLActivityAggregator<HRRecoverySession>>> {
        void *__value_;
    } __ptr_;
};

struct unique_ptr<CLAnalyticsLogger, std::default_delete<CLAnalyticsLogger>> {
    struct __compressed_pair<CLAnalyticsLogger *, std::default_delete<CLAnalyticsLogger>> {
        struct CLAnalyticsLogger *__value_;
    } __ptr_;
};

struct unique_ptr<CLAppMonitor_Type::Client, std::default_delete<CLAppMonitor_Type::Client>> {
    struct __compressed_pair<CLAppMonitor_Type::Client *, std::default_delete<CLAppMonitor_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLCardioChangeEstimator, std::default_delete<CLCardioChangeEstimator>> {
    struct __compressed_pair<CLCardioChangeEstimator *, std::default_delete<CLCardioChangeEstimator>> {
        struct CLCardioChangeEstimator *__value_;
    } __ptr_;
};

struct unique_ptr<CLCatherineNotifier_Type::Client, std::default_delete<CLCatherineNotifier_Type::Client>> {
    struct __compressed_pair<CLCatherineNotifier_Type::Client *, std::default_delete<CLCatherineNotifier_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLClientManager_Type::Client, std::default_delete<CLClientManager_Type::Client>> {
    struct __compressed_pair<CLClientManager_Type::Client *, std::default_delete<CLClientManager_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLCompanionNotifier_Type::Client, std::default_delete<CLCompanionNotifier_Type::Client>> {
    struct __compressed_pair<CLCompanionNotifier_Type::Client *, std::default_delete<CLCompanionNotifier_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLDaemonStatus_Type::Client, std::default_delete<CLDaemonStatus_Type::Client>> {
    struct __compressed_pair<CLDaemonStatus_Type::Client *, std::default_delete<CLDaemonStatus_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLDarwinNotifier_Type::Client, std::default_delete<CLDarwinNotifier_Type::Client>> {
    struct __compressed_pair<CLDarwinNotifier_Type::Client *, std::default_delete<CLDarwinNotifier_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLDataProtectionManager_Type::Client, std::default_delete<CLDataProtectionManager_Type::Client>> {
    struct __compressed_pair<CLDataProtectionManager_Type::Client *, std::default_delete<CLDataProtectionManager_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLFilteredLocationController_Type::Client, std::default_delete<CLFilteredLocationController_Type::Client>> {
    struct __compressed_pair<CLFilteredLocationController_Type::Client *, std::default_delete<CLFilteredLocationController_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLGeomagneticModelProvider_Type::Client, std::default_delete<CLGeomagneticModelProvider_Type::Client>> {
    struct __compressed_pair<CLGeomagneticModelProvider_Type::Client *, std::default_delete<CLGeomagneticModelProvider_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLGnssProvider_Type::Client, std::default_delete<CLGnssProvider_Type::Client>> {
    struct __compressed_pair<CLGnssProvider_Type::Client *, std::default_delete<CLGnssProvider_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLHRRecoveryEstimator, std::default_delete<CLHRRecoveryEstimator>> {
    struct __compressed_pair<CLHRRecoveryEstimator *, std::default_delete<CLHRRecoveryEstimator>> {
        struct CLHRRecoveryEstimator *__value_;
    } __ptr_;
};

struct unique_ptr<CLLocationAwarenessProvider_Type::Client, std::default_delete<CLLocationAwarenessProvider_Type::Client>> {
    struct __compressed_pair<CLLocationAwarenessProvider_Type::Client *, std::default_delete<CLLocationAwarenessProvider_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLLocationController_Type::Client, std::default_delete<CLLocationController_Type::Client>> {
    struct __compressed_pair<CLLocationController_Type::Client *, std::default_delete<CLLocationController_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLMobility::WalkingBoutExtractor, std::default_delete<CLMobility::WalkingBoutExtractor>> {
    struct __compressed_pair<CLMobility::WalkingBoutExtractor *, std::default_delete<CLMobility::WalkingBoutExtractor>> {
        struct WalkingBoutExtractor *__value_;
    } __ptr_;
};

struct unique_ptr<CLMobility::WalkingSteadinessClassifier, std::default_delete<CLMobility::WalkingSteadinessClassifier>> {
    struct __compressed_pair<CLMobility::WalkingSteadinessClassifier *, std::default_delete<CLMobility::WalkingSteadinessClassifier>> {
        struct WalkingSteadinessClassifier *__value_;
    } __ptr_;
};

struct unique_ptr<CLMotionActivity, std::default_delete<CLMotionActivity>> {
    struct __compressed_pair<CLMotionActivity *, std::default_delete<CLMotionActivity>> {
        struct CLMotionActivity *__value_;
    } __ptr_;
};

struct unique_ptr<CLMotionNotifier::CallbackDispatcher<CMSPU::GestureReport::Sample>, std::default_delete<CLMotionNotifier::CallbackDispatcher<CMSPU::GestureReport::Sample>>> {
    struct __compressed_pair<CLMotionNotifier::CallbackDispatcher<CMSPU::GestureReport::Sample>*, std::default_delete<CLMotionNotifier::CallbackDispatcher<CMSPU::GestureReport::Sample>>> {
        void *__value_;
    } __ptr_;
};

struct unique_ptr<CLMotionNotifier::Dispatcher, std::default_delete<CLMotionNotifier::Dispatcher>> {
    struct __compressed_pair<CLMotionNotifier::Dispatcher *, std::default_delete<CLMotionNotifier::Dispatcher>> {
        struct Dispatcher *__value_;
    } __ptr_;
};

struct unique_ptr<CLMotionNotifier::SiloDispatcher<CLBarometerCalibration_Types::CMKFFilteredPressureSample>, std::default_delete<CLMotionNotifier::SiloDispatcher<CLBarometerCalibration_Types::CMKFFilteredPressureSample>>> {
    struct __compressed_pair<CLMotionNotifier::SiloDispatcher<CLBarometerCalibration_Types::CMKFFilteredPressureSample>*, std::default_delete<CLMotionNotifier::SiloDispatcher<CLBarometerCalibration_Types::CMKFFilteredPressureSample>>> {
        void *__value_;
    } __ptr_;
};

struct unique_ptr<CLMotionNotifier::SiloDispatcher<CLMobility::SPUGaitMetrics>, std::default_delete<CLMotionNotifier::SiloDispatcher<CLMobility::SPUGaitMetrics>>> {
    struct __compressed_pair<CLMotionNotifier::SiloDispatcher<CLMobility::SPUGaitMetrics>*, std::default_delete<CLMotionNotifier::SiloDispatcher<CLMobility::SPUGaitMetrics>>> {
        void *__value_;
    } __ptr_;
};

struct unique_ptr<CLMotionStateMediator_Type::Client, std::default_delete<CLMotionStateMediator_Type::Client>> {
    struct __compressed_pair<CLMotionStateMediator_Type::Client *, std::default_delete<CLMotionStateMediator_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLMotionStateObserver_Type::Client, std::default_delete<CLMotionStateObserver_Type::Client>> {
    struct __compressed_pair<CLMotionStateObserver_Type::Client *, std::default_delete<CLMotionStateObserver_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLMotionState_Type::Client, std::default_delete<CLMotionState_Type::Client>> {
    struct __compressed_pair<CLMotionState_Type::Client *, std::default_delete<CLMotionState_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLNADController, std::default_delete<CLNADController>> {
    struct __compressed_pair<CLNADController *, std::default_delete<CLNADController>> {
        struct CLNADController *__value_;
    } __ptr_;
};

struct unique_ptr<CLNatalimetryNotifier_Type::Client, std::default_delete<CLNatalimetryNotifier_Type::Client>> {
    struct __compressed_pair<CLNatalimetryNotifier_Type::Client *, std::default_delete<CLNatalimetryNotifier_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLNearbydInterfaceManager, std::default_delete<CLNearbydInterfaceManager>> {
    struct __compressed_pair<CLNearbydInterfaceManager *, std::default_delete<CLNearbydInterfaceManager>> {
        struct CLNearbydInterfaceManager *__value_;
    } __ptr_;
};

struct unique_ptr<CLOdometerNotifier_Type::Client, std::default_delete<CLOdometerNotifier_Type::Client>> {
    struct __compressed_pair<CLOdometerNotifier_Type::Client *, std::default_delete<CLOdometerNotifier_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLPowerAssertion, std::default_delete<CLPowerAssertion>> {
    struct __compressed_pair<CLPowerAssertion *, std::default_delete<CLPowerAssertion>> {
        struct CLPowerAssertion *__value_;
    } __ptr_;
};

struct unique_ptr<CLPredictedWalkDistanceBoutDetector, std::default_delete<CLPredictedWalkDistanceBoutDetector>> {
    struct __compressed_pair<CLPredictedWalkDistanceBoutDetector *, std::default_delete<CLPredictedWalkDistanceBoutDetector>> {
        struct CLPredictedWalkDistanceBoutDetector *__value_;
    } __ptr_;
};

struct unique_ptr<CLPredictedWalkDistanceEstimator, std::default_delete<CLPredictedWalkDistanceEstimator>> {
    struct __compressed_pair<CLPredictedWalkDistanceEstimator *, std::default_delete<CLPredictedWalkDistanceEstimator>> {
        struct CLPredictedWalkDistanceEstimator *__value_;
    } __ptr_;
};

struct unique_ptr<CLRecordingSettings, std::default_delete<CLRecordingSettings>> {
    struct __compressed_pair<CLRecordingSettings *, std::default_delete<CLRecordingSettings>> {
        struct CLRecordingSettings *__value_;
    } __ptr_;
};

struct unique_ptr<CLRollingPowerAssertion, std::default_delete<CLRollingPowerAssertion>> {
    struct __compressed_pair<CLRollingPowerAssertion *, std::default_delete<CLRollingPowerAssertion>> {
        struct CLRollingPowerAssertion *__value_;
    } __ptr_;
};

struct unique_ptr<CLServiceLocationProvider_Type::Client, std::default_delete<CLServiceLocationProvider_Type::Client>> {
    struct __compressed_pair<CLServiceLocationProvider_Type::Client *, std::default_delete<CLServiceLocationProvider_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLSignificantElevationEstimator, std::default_delete<CLSignificantElevationEstimator>> {
    struct __compressed_pair<CLSignificantElevationEstimator *, std::default_delete<CLSignificantElevationEstimator>> {
        struct CLSignificantElevationEstimator *__value_;
    } __ptr_;
};

struct unique_ptr<CLStepCountNotifier_Type::Client, std::default_delete<CLStepCountNotifier_Type::Client>> {
    struct __compressed_pair<CLStepCountNotifier_Type::Client *, std::default_delete<CLStepCountNotifier_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLStreamingAwareLocationProvider_Type::Client, std::default_delete<CLStreamingAwareLocationProvider_Type::Client>> {
    struct __compressed_pair<CLStreamingAwareLocationProvider_Type::Client *, std::default_delete<CLStreamingAwareLocationProvider_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLTilesManager_Type::Client, std::default_delete<CLTilesManager_Type::Client>> {
    struct __compressed_pair<CLTilesManager_Type::Client *, std::default_delete<CLTilesManager_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLVO2MaxRetrocomputeBodyMetricsDb, std::default_delete<CLVO2MaxRetrocomputeBodyMetricsDb>> {
    struct __compressed_pair<CLVO2MaxRetrocomputeBodyMetricsDb *, std::default_delete<CLVO2MaxRetrocomputeBodyMetricsDb>> {
        struct CLVO2MaxRetrocomputeBodyMetricsDb *__value_;
    } __ptr_;
};

struct unique_ptr<CLVO2MaxRetrocomputeRecorderDb, std::default_delete<CLVO2MaxRetrocomputeRecorderDb>> {
    struct __compressed_pair<CLVO2MaxRetrocomputeRecorderDb *, std::default_delete<CLVO2MaxRetrocomputeRecorderDb>> {
        struct CLVO2MaxRetrocomputeRecorderDb *__value_;
    } __ptr_;
};

struct unique_ptr<CLVO2MaxStagingOutputStore, std::default_delete<CLVO2MaxStagingOutputStore>> {
    struct __compressed_pair<CLVO2MaxStagingOutputStore *, std::default_delete<CLVO2MaxStagingOutputStore>> {
        struct CLVO2MaxStagingOutputStore *__value_;
    } __ptr_;
};

struct unique_ptr<CLWatchOrientationSettingsNotifier_Type::Client, std::default_delete<CLWatchOrientationSettingsNotifier_Type::Client>> {
    struct __compressed_pair<CLWatchOrientationSettingsNotifier_Type::Client *, std::default_delete<CLWatchOrientationSettingsNotifier_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLWifiService_Type::Client, std::default_delete<CLWifiService_Type::Client>> {
    struct __compressed_pair<CLWifiService_Type::Client *, std::default_delete<CLWifiService_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::WriterManager, std::default_delete<CMMsl::WriterManager>> {
    struct __compressed_pair<CMMsl::WriterManager *, std::default_delete<CMMsl::WriterManager>> {
        struct WriterManager *__value_;
    } __ptr_;
};

struct unique_ptr<CMStrideCalRecorderDb, std::default_delete<CMStrideCalRecorderDb>> {
    struct __compressed_pair<CMStrideCalRecorderDb *, std::default_delete<CMStrideCalRecorderDb>> {
        struct CMStrideCalRecorderDb *__value_;
    } __ptr_;
};

struct unique_ptr<CMWakeGestureEventVisitor, std::default_delete<CMWakeGestureEventVisitor>> {
    struct __compressed_pair<CMWakeGestureEventVisitor *, std::default_delete<CMWakeGestureEventVisitor>> {
        struct CMWakeGestureEventVisitor *__value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<CMWorkoutType, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<CMWorkoutType, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<CMWorkoutType, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<CMWorkoutType, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<CMWorkoutType, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<CMWorkoutType, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unordered_map<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket, std::hash<CLMacAddress>, std::equal_to<CLMacAddress>, std::allocator<std::pair<const CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>>> {
    struct __hash_table<std::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, std::__unordered_map_hasher<CLMacAddress, std::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, std::hash<CLMacAddress>, std::equal_to<CLMacAddress>, true>, std::__unordered_map_equal<CLMacAddress, std::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, std::equal_to<CLMacAddress>, std::hash<CLMacAddress>, true>, std::allocator<std::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<CLMacAddress, std::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, std::hash<CLMacAddress>, std::equal_to<CLMacAddress>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<CLMacAddress, std::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, std::equal_to<CLMacAddress>, std::hash<CLMacAddress>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_set<CMWorkoutType, std::hash<CMWorkoutType>, std::equal_to<CMWorkoutType>, std::allocator<CMWorkoutType>> {
    struct __hash_table<CMWorkoutType, std::hash<CMWorkoutType>, std::equal_to<CMWorkoutType>, std::allocator<CMWorkoutType>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<CMWorkoutType, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<CMWorkoutType, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<CMWorkoutType, void *>*>, std::allocator<std::__hash_node<CMWorkoutType, void *>>> {
            struct __hash_node_base<std::__hash_node<CMWorkoutType, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::hash<CMWorkoutType>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::equal_to<CMWorkoutType>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct uuid {
    unsigned char _field1[16];
};

struct vector<CLClientSatelliteInfo, std::allocator<CLClientSatelliteInfo>> {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    struct __compressed_pair<CLClientSatelliteInfo *, std::allocator<CLClientSatelliteInfo>> {
        CDStruct_183601bc *_field1;
    } _field3;
};

struct vector<CLDaemonLocation, std::allocator<CLDaemonLocation>> {
    struct CLDaemonLocation *__begin_;
    struct CLDaemonLocation *__end_;
    struct __compressed_pair<CLDaemonLocation *, std::allocator<CLDaemonLocation>> {
        struct CLDaemonLocation *__value_;
    } __end_cap_;
};

struct vector<CLMobility::ProcessedBoutResult, std::allocator<CLMobility::ProcessedBoutResult>> {
    struct ProcessedBoutResult *_field1;
    struct ProcessedBoutResult *_field2;
    struct __compressed_pair<CLMobility::ProcessedBoutResult *, std::allocator<CLMobility::ProcessedBoutResult>> {
        struct ProcessedBoutResult *_field1;
    } _field3;
};

struct vector<CLWifiRangeResult, std::allocator<CLWifiRangeResult>> {
    struct CLWifiRangeResult *_field1;
    struct CLWifiRangeResult *_field2;
    struct __compressed_pair<CLWifiRangeResult *, std::allocator<CLWifiRangeResult>> {
        struct CLWifiRangeResult *_field1;
    } _field3;
};

struct vector<CLWifiService_Type::AccessPoint, std::allocator<CLWifiService_Type::AccessPoint>> {
    struct AccessPoint *_field1;
    struct AccessPoint *_field2;
    struct __compressed_pair<CLWifiService_Type::AccessPoint *, std::allocator<CLWifiService_Type::AccessPoint>> {
        struct AccessPoint *_field1;
    } _field3;
};

struct vector<VO2MaxStagingLostEstimate, std::allocator<VO2MaxStagingLostEstimate>> {
    struct VO2MaxStagingLostEstimate *_field1;
    struct VO2MaxStagingLostEstimate *_field2;
    struct __compressed_pair<VO2MaxStagingLostEstimate *, std::allocator<VO2MaxStagingLostEstimate>> {
        struct VO2MaxStagingLostEstimate *_field1;
    } _field3;
};

struct vector<VO2MaxStagingOutput, std::allocator<VO2MaxStagingOutput>> {
    struct VO2MaxStagingOutput *__begin_;
    struct VO2MaxStagingOutput *__end_;
    struct __compressed_pair<VO2MaxStagingOutput *, std::allocator<VO2MaxStagingOutput>> {
        struct VO2MaxStagingOutput *__value_;
    } __end_cap_;
};

struct vector<VO2MaxSummary, std::allocator<VO2MaxSummary>> {
    struct VO2MaxSummary *_field1;
    struct VO2MaxSummary *_field2;
    struct __compressed_pair<VO2MaxSummary *, std::allocator<VO2MaxSummary>> {
        struct VO2MaxSummary *_field1;
    } _field3;
};

struct vector<double, std::allocator<double>> {
    double *__begin_;
    double *__end_;
    struct __compressed_pair<double *, std::allocator<double>> {
        double *__value_;
    } __end_cap_;
};

struct vector<float, std::allocator<float>> {
    float *__begin_;
    float *__end_;
    struct __compressed_pair<float *, std::allocator<float>> {
        float *__value_;
    } __end_cap_;
};

struct vector<std::pair<double, CLMotionActivity::Type>, std::allocator<std::pair<double, CLMotionActivity::Type>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::pair<double, CLMotionActivity::Type>*, std::allocator<std::pair<double, CLMotionActivity::Type>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::shared_ptr<CLSubHarvester>, std::allocator<std::shared_ptr<CLSubHarvester>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::shared_ptr<CLSubHarvester>*, std::allocator<std::shared_ptr<CLSubHarvester>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::vector<float>, std::allocator<std::vector<float>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::vector<float>*, std::allocator<std::vector<float>>> {
        void *__value_;
    } __end_cap_;
};

#if 0
// Names with conflicting types:
typedef struct {
    int _field1;
    _Bool _field2;
} NotificationData_6933e140;

typedef struct {
    double _field1;
    struct {
        float _field1;
        float _field2;
    } _field2;
} Sample_b71dd899;

typedef struct {
    struct FalsePositiveSuppressionFeatures {
        unsigned long long _field1;
        unsigned long long _field2;
        unsigned long long _field3;
        unsigned short _field4;
        float _field5;
        float _field6;
        float _field7;
        int _field8;
        float _field9;
        int _field10;
        unsigned long long _field11;
        unsigned long long _field12;
    } _field1;
    double _field2;
    double _field3;
} FalsePositiveSuppressionFeatures_8c0e6519;

typedef struct {
    struct FilteredPressure {
        unsigned char _field1;
        unsigned char _field2[3];
        float _field3;
        float _field4;
        unsigned long long _field5;
        unsigned long long _field6;
    } _field1;
    double _field2;
} FilteredPressure_e74e912d;

typedef struct {
    struct Pressure {
        unsigned char _field1;
        unsigned char _field2[3];
        float _field3;
        float _field4;
        unsigned long long _field5;
        unsigned long long _field6;
    } _field1;
    double _field2;
} Pressure_df92a120;

typedef struct {
    int _field1;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> _field2;
    _Bool _field3;
} NotificationData_39764f2d;

typedef struct {
    struct CLDaemonLocation _field1;
    struct CLDaemonLocationPrivate _field2;
    struct shared_ptr<CLBatchedLocations> _field3;
    struct TechnologyStatus _field4;
    _Bool _field5;
    double _field6;
    int _field7;
    CDStruct_d2b197d1 _field8;
    CDStruct_2c43369c _field9;
    struct XtraFileAvailable _field10;
    int _field11;
    struct LocationDerivedSpeed _field12;
    struct {
        double _field1;
        double _field2;
        double _field3;
        int _field4;
    } _field13;
    struct {
        double _field1;
        double _field2;
        double _field3;
        double _field4;
        double _field5;
        double _field6;
        _Bool _field7;
        double _field8[3][3];
        double _field9;
        double _field10;
        double _field11;
        unsigned long long _field12;
        int _field13;
    } _field14;
    struct shared_ptr<const gnss::MeasurementData> _field15;
    int _field16;
    struct {
        int _field1;
        double _field2;
        double _field3;
        double _field4;
        double _field5;
        double _field6;
        double _field7;
        double _field8[5];
        double _field9;
        double _field10;
        double _field11;
        double _field12;
        int _field13;
        int _field14;
    } _field17;
    struct CLStrongPtr<NSData *> _field18;
    struct PredictedGnssAvailability _field19;
    struct CLBasebandTimeFreqTransfer _field20;
    struct CLGnssBasebandCausesL1InterferenceGnssBandChangeData _field21;
    struct CLRhythmicGnssStatusUpdate _field22;
    struct CLRhythmicStreamingControl _field23;
} NotificationData_75a78a93;

typedef struct {
    struct Name _field1;
    _Bool _field2;
    int _field3;
} NotificationData_d6a0b07d;

typedef struct {
    _Bool _field1;
    char _field2;
    struct AssociationState _field3;
    struct ScanResult _field4;
    _Bool _field5;
    _Bool _field6;
    _Bool _field7;
    struct vector<CLWifiRangeResult, std::allocator<CLWifiRangeResult>> _field8;
    _Bool _field9;
    _Bool _field10;
} NotificationData_79f2e7e8;

#endif

#pragma mark Typedef'd Structures

typedef struct {
    unsigned short fHead;
    unsigned short fSize;
} CDStruct_b91b6b9f;

typedef struct {
    unsigned int _field1[8];
} CDStruct_6ad76789;

typedef struct {
    int *list;
    unsigned long long count;
    unsigned long long size;
} CDStruct_95bda58d;

typedef struct {
    char _field1;
} CDStruct_2920cfb7;

typedef struct {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    int _field5;
    int _field6;
    int _field7;
    int _field8;
    double _field9[50];
    double _field10[50];
} CDStruct_5e97c62c;

typedef struct {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
} CDStruct_d2b197d1;

typedef struct {
    double speed;
    double timestamp;
    double uncertainty;
} CDStruct_56299a79;

typedef struct {
    double latitude;
    double longitude;
} CDStruct_2c43369c;

typedef struct {
    float _field1;
    float _field2;
    float _field3;
} CDStruct_869f9c67;

typedef struct CDStruct_183601bc;

typedef struct {
    double _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    CDStruct_d2b197d1 _field6[50];
} CDStruct_15521927;

typedef struct {
    int _field1;
    int _field2;
    CDStruct_2c43369c _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    double _field11;
    double _field12;
    double _field13;
    int _field14;
    double _field15;
    int _field16;
    CDStruct_2c43369c _field17;
    double _field18;
    int _field19;
    unsigned int _field20;
    int _field21;
    int _field22;
    int _field23;
    double _field24;
    _Bool _field25;
} CDStruct_c17e8280;

typedef struct {
    int _field1;
    double _field2;
    double _field3;
    union {
        struct {
            CDStruct_869f9c67 _field1;
            CDStruct_869f9c67 _field2;
        } _field1;
        struct {
            _Bool _field1;
            char _field2[282];
        } _field2;
    } _field4;
} CDStruct_5b0a5b35;

typedef struct {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
    float _field5;
    float _field6;
    int _field7;
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> _field8;
    _Bool _field9;
} CDStruct_eef1b093;

// Ambiguous groups
typedef struct {
    unsigned int arfcn:1;
    unsigned int psc:1;
} CDStruct_6bbaae90;

typedef struct {
    unsigned int mode:1;
} CDStruct_ad4540a6;

typedef struct {
    unsigned int timestamp:1;
} CDStruct_b5306035;

typedef struct array<std::deque<std::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData>>, 7UL> {
    struct deque<std::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData>, std::allocator<std::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData>>> __elems_[7];
} array_c6ef73e3;

typedef struct shared_ptr<CLAvengerHarvestInterface::External> {
    struct External *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_c7246d68;

typedef struct shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData> {
    struct CLBarometerCalibrationData *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_16a5184d;

typedef struct shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationWifiData> {
    struct CLBarometerCalibrationWifiData *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_760f25b1;

typedef struct shared_ptr<CLStepCountRecorderDb> {
    struct CLStepCountRecorderDb *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_a3117978;

typedef struct time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono::duration<long double>> {
    struct duration<long double, std::ratio<1, 1>> __d_;
} time_point_84284884;

typedef struct unique_ptr<CLRecordingSettings, std::default_delete<CLRecordingSettings>> {
    struct __compressed_pair<CLRecordingSettings *, std::default_delete<CLRecordingSettings>> {
        struct CLRecordingSettings *__value_;
    } __ptr_;
} unique_ptr_4889cf95;

typedef struct vector<CLMobility::ProcessedBoutResult, std::allocator<CLMobility::ProcessedBoutResult>> {
    struct ProcessedBoutResult *_field1;
    struct ProcessedBoutResult *_field2;
    struct __compressed_pair<CLMobility::ProcessedBoutResult *, std::allocator<CLMobility::ProcessedBoutResult>> {
        struct ProcessedBoutResult *_field1;
    } _field3;
} vector_c734fc51;

typedef struct vector<VO2MaxStagingLostEstimate, std::allocator<VO2MaxStagingLostEstimate>> {
    struct VO2MaxStagingLostEstimate *_field1;
    struct VO2MaxStagingLostEstimate *_field2;
    struct __compressed_pair<VO2MaxStagingLostEstimate *, std::allocator<VO2MaxStagingLostEstimate>> {
        struct VO2MaxStagingLostEstimate *_field1;
    } _field3;
} vector_c99c8e88;

typedef struct vector<double, std::allocator<double>> {
    double *__begin_;
    double *__end_;
    struct __compressed_pair<double *, std::allocator<double>> {
        double *__value_;
    } __end_cap_;
} vector_0e047154;

#pragma mark Named Unions

union FalseStepDetectorStateUnion {
    struct FalseStepDetectorState falseStepDetectorState;
    unsigned char data;
};

union WorkoutAttrib {
    struct SwimAttrib _field1;
    unsigned long long _field2;
};

#if 0
// Names with conflicting types:
typedef union {
    struct CLCatherineData _field1;
    struct CLCatherineHealthKitData _field2;
    struct CLCatherineRestingData _field3;
} NotificationData_f96d9675;

typedef union {
    struct CLOdometerEntry _field1;
    struct CLElevationChangeEntry _field2;
    struct CLCoarseElevationChangeEntry _field3;
    _Bool _field4;
    id _field5;
    struct DetailedConnectionInfo _field6;
    struct CLMotionStateUpdate _field7;
    struct AbsoluteAltitudeUpdate _field8;
} NotificationData_9b0deeec;

typedef union {
    struct CLOdometerEntry _field1;
    struct CLElevationChangeEntry _field2;
    struct CLCoarseElevationChangeEntry _field3;
    struct CLSignificantElevation _field4;
} NotificationData_8bbcb6bd;

typedef union {
    struct CLWorkoutUpdate _field1;
    struct CLMotionStateUpdate _field2;
} NotificationData_913f635f;

typedef union {
    struct ReachabilityState _field1;
    struct Battery _field2;
    _Bool _field3;
    _Bool _field4;
    _Bool _field5;
    _Bool _field6;
    int _field7;
    int _field8;
    _Bool _field9;
} NotificationData_6ebe1ea3;

typedef union {
    struct CLMotionActivity _field1;
    _Bool _field2;
    struct DeviceTouchState _field3;
    CDStruct_c17e8280 _field4;
} NotificationData_165881a2;

typedef union {
    struct CLNatalieData _field1;
    _Bool _field2;
    struct CLBodyMetrics _field3;
    float _field4;
    struct CLExerciseMinuteData _field5;
    struct CLStandMinuteInputData _field6;
    struct VO2MaxResult _field7;
    struct VO2MaxSessionStats _field8;
    double _field9;
    struct CLCalorieUpdate _field10;
} NotificationData_1962ef88;

typedef union {
    struct CLStepCountEntry _field1;
    struct CLExtendedStepCountEntry _field2;
    struct CLPedometerEvent _field3;
    struct CLOdometerSuitability _field4;
    struct CLPedometerPathStraightness _field5;
} NotificationData_73bdb315;

typedef union {
    struct MediatedMotionActivity _field1;
    struct MotionOverride _field2;
    struct WorkoutEvent _field3;
    struct IndoorOutdoorUpdate _field4;
    struct ActivityEvent _field5;
} NotificationData_d1968cc7;

#endif

