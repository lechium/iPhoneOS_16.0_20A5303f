//
//     Generated by classdumpios 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class CKRecordID, CKServerChangeToken, GKCloudPlayer, NSArray, NSDate, NSDictionary, NSMutableDictionary, NSString;
@protocol OS_dispatch_queue;

@interface GKSessionCache : NSObject
{
    NSObject<OS_dispatch_queue> *_cacheQueue;	// 8 = 0x8
    NSObject<OS_dispatch_queue> *_cacheUserQueue;	// 16 = 0x10
    _Bool _userHasSubscription;	// 24 = 0x18
    _Bool _friendRecordNeedsUpdate;	// 25 = 0x19
    CKRecordID *_userRecordID;	// 32 = 0x20
    double _lastSaveTimeStamp;	// 40 = 0x28
    NSMutableDictionary *_bundleIDsByContainerName;	// 48 = 0x30
    NSMutableDictionary *_bundleIDExpirations;	// 56 = 0x38
    struct sqlite3 *_database;	// 64 = 0x40
    NSString *_databasePath;	// 72 = 0x48
    NSDate *_expiration;	// 80 = 0x50
}

- (void).cxx_destruct;	// IMP=0x002000000024bb95
- (void);	// IMP=0x001000000024bb84
@property(retain, nonatomic) NSDate *expiration; // @synthesize expiration=_expiration;
@property(retain, nonatomic) NSString *databasePath; // @synthesize databasePath=_databasePath;
@property(nonatomic) struct sqlite3 *database; // @synthesize database=_database;
@property(retain, nonatomic) NSMutableDictionary *bundleIDExpirations; // @synthesize bundleIDExpirations=_bundleIDExpirations;
@property(retain, nonatomic) NSMutableDictionary *bundleIDsByContainerName; // @synthesize bundleIDsByContainerName=_bundleIDsByContainerName;
@property(retain, nonatomic) CKRecordID *userRecordID; // @synthesize userRecordID=_userRecordID;
- (double)doubleFromRowStatement:(struct sqlite3_stmt *)arg1 column:(int)arg2;	// IMP=0x001000000024baf5
- (int)intFromRowStatement:(struct sqlite3_stmt *)arg1 column:(int)arg2;	// IMP=0x001000000024bae6
- (id)stringFromRowStatement:(struct sqlite3_stmt *)arg1 column:(int)arg2;	// IMP=0x001000000024bac0
- (id)dataFromRowStatement:(struct sqlite3_stmt *)arg1 column:(int)arg2;	// IMP=0x001000000024ba74
- (_Bool)stepStatement:(id)arg1 parameters:(id)arg2 rowHandler:(CDUnknownBlockType)arg3;	// IMP=0x001000000024b4c1
- (_Bool)executeStatement:(id)arg1;	// IMP=0x001000000024b344
- (void)closeDatabase;	// IMP=0x001000000024b323
- (_Bool)openDatabase;	// IMP=0x001000000024b2ee
- (id)sessionWithIdentifier:(id)arg1;	// IMP=0x001000000024b09d
- (id)sessionsInContainer:(id)arg1 ownerName:(id)arg2;	// IMP=0x001000000024ad86
- (id)sessionsInContainer:(id)arg1;	// IMP=0x001000000024ad72
- (id)sessionWithRecordID:(id)arg1;	// IMP=0x001000000024ad0c
- (id)sessionFromData:(id)arg1;	// IMP=0x001000000024ac69
- (void)updateWithChangedSessions:(id)arg1 removedSessions:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x0010000000249bfa
- (void)setFriendPlayers:(id)arg1 withEmails:(id)arg2;	// IMP=0x00100000002496b8
@property(readonly, nonatomic) NSDictionary *friendEmailsByID; // @dynamic friendEmailsByID;
@property(readonly, nonatomic) NSArray *friendPlayers; // @dynamic friendPlayers;
- (void)_setToken:(id)arg1 forContainerName:(id)arg2 ownerName:(id)arg3;	// IMP=0x0010000000248f13
- (void)updateWithChangedTokens:(id)arg1 removedTokenZoneIDs:(id)arg2;	// IMP=0x0010000000248a88
- (void)setToken:(id)arg1 forContainerName:(id)arg2 ownerName:(id)arg3;	// IMP=0x0010000000248948
- (id)tokenForContainerName:(id)arg1 ownerName:(id)arg2;	// IMP=0x00100000002486ba
@property(retain, nonatomic) CKServerChangeToken *sharedDBToken; // @dynamic sharedDBToken;
@property(retain, nonatomic) CKServerChangeToken *privateDBToken; // @dynamic privateDBToken;
- (void)setToken:(id)arg1 forZoneID:(id)arg2;	// IMP=0x0010000000248589
- (id)tokenForZoneID:(id)arg1;	// IMP=0x00100000002484e3
- (id)tokenFromData:(id)arg1;	// IMP=0x0010000000248440
@property(nonatomic) double lastSaveTimeStamp; // @synthesize lastSaveTimeStamp=_lastSaveTimeStamp;
@property(nonatomic) _Bool friendRecordNeedsUpdate; // @synthesize friendRecordNeedsUpdate=_friendRecordNeedsUpdate;
@property(nonatomic) _Bool userHasSubscription; // @synthesize userHasSubscription=_userHasSubscription;
- (_Bool)saveUserInfo;	// IMP=0x0010000000247ee7
- (void)readUserInfoFromDatabase;	// IMP=0x0010000000247d96
- (void)writeBundleIDsToDisk;	// IMP=0x0010000000247c49
- (void)readBundleIDsFromDisk;	// IMP=0x0010000000247abd
- (id)bundleIDCacheURL;	// IMP=0x0010000000247a0c
- (void)updateBundleIDs:(id)arg1 forContainerName:(id)arg2;	// IMP=0x001000000024786a
- (id)bundleIDsForContainerName:(id)arg1;	// IMP=0x0010000000247688
- (void)updateUserWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x00100000002470ec
@property(readonly, nonatomic) GKCloudPlayer *userPlayer; // @dynamic userPlayer;
- (void)createDatabaseIfNeeded;	// IMP=0x0010000000246b64
- (void)updateDatabasePath;	// IMP=0x0010000000246a3b
@property(nonatomic) _Bool isValid; // @dynamic isValid;
- (void)clearWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x00100000002467d1
- (id)init;	// IMP=0x00100000002466f5

@end

