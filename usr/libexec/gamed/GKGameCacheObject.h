//
//     Generated by classdumpios 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class GKAchievementDescriptionListCacheObject, GKLeaderboardSetListCacheObject, GKTurnBasedSessionListCacheObject, NSDate, NSNumber, NSSet, NSString;

@interface GKGameCacheObject
{
}

+ (id)entityName;	// IMP=0x0020000000056d70
+ (id)_gamesForFullGameDescriptors:(id)arg1 context:(id)arg2;	// IMP=0x00100000000546ef
+ (id)gamesForGameDescriptors:(id)arg1 context:(id)arg2;	// IMP=0x0010000000054530
+ (id)gamesForBundleIDs:(id)arg1 context:(id)arg2;	// IMP=0x0010000000054371
+ (id)gameForBundleID:(id)arg1 context:(id)arg2;	// IMP=0x0010000000054110
+ (id)gameForGameDescriptor:(id)arg1 context:(id)arg2;	// IMP=0x0010000000054011
+ (id)fetchSortDescriptors;	// IMP=0x0010000000053f32
+ (const void *)uniqueObjectIDLookupKey;	// IMP=0x0010000000053f25
+ (id)uniqueAttributeName;	// IMP=0x0010000000053f18
- (id)gameDescriptor;	// IMP=0x0020000000056960
- (id)leaderboardSetWithIdentifier:(id)arg1;	// IMP=0x00100000000568c0
- (id)internalRepresentation;	// IMP=0x001000000005671b
- (_Bool)storePiecesExpired;	// IMP=0x00100000000566ce
- (_Bool)storePiecesValid;	// IMP=0x001000000005669b
- (void)updateStorePiecesWithServerRepresentation:(id)arg1 expirationDate:(id)arg2;	// IMP=0x0010000000055eb5
- (void)updateWithServerRepresentation:(id)arg1 expirationDate:(id)arg2;	// IMP=0x0010000000055538
- (void)updateWithGameDescriptor:(id)arg1;	// IMP=0x0010000000054c9e
- (_Bool)isValid;	// IMP=0x0010000000054c0c

// Remaining properties
@property(retain, nonatomic) GKAchievementDescriptionListCacheObject *achievementDescriptionList; // @dynamic achievementDescriptionList;
@property(retain, nonatomic) NSSet *achievementLists; // @dynamic achievementLists;
@property(retain, nonatomic) NSNumber *adamID; // @dynamic adamID;
@property(retain, nonatomic) NSString *artistName; // @dynamic artistName;
@property(nonatomic) float averageUserRating; // @dynamic averageUserRating;
@property(retain, nonatomic) NSString *bundleID; // @dynamic bundleID;
@property(retain, nonatomic) NSString *bundleVersion; // @dynamic bundleVersion;
@property(retain, nonatomic) NSSet *compatiblePlatforms; // @dynamic compatiblePlatforms;
@property(readonly, copy) NSString *debugDescription;
@property(retain, nonatomic) NSString *defaultCategory; // @dynamic defaultCategory;
@property(readonly, copy) NSString *description;
@property(retain, nonatomic) NSNumber *externalVersion; // @dynamic externalVersion;
@property(retain, nonatomic) NSSet *flowRates; // @dynamic flowRates;
@property(retain, nonatomic) NSSet *gameRecords; // @dynamic gameRecords;
@property(nonatomic) _Bool hasAggregateLeaderboard; // @dynamic hasAggregateLeaderboard;
@property(readonly) unsigned long long hash;
@property(retain, nonatomic) NSString *image128; // @dynamic image128;
@property(retain, nonatomic) NSString *image256; // @dynamic image256;
@property(retain, nonatomic) NSString *image512; // @dynamic image512;
@property(retain, nonatomic) NSString *image64; // @dynamic image64;
@property(retain, nonatomic) NSString *imageTemplate; // @dynamic imageTemplate;
@property(retain, nonatomic) NSSet *invites; // @dynamic invites;
@property(nonatomic) _Bool isArcadeGame; // @dynamic isArcadeGame;
@property(retain, nonatomic) NSSet *leaderboardLists; // @dynamic leaderboardLists;
@property(retain, nonatomic) GKLeaderboardSetListCacheObject *leaderboardSetList; // @dynamic leaderboardSetList;
@property(retain, nonatomic) NSSet *leaderboards; // @dynamic leaderboards;
@property(retain, nonatomic) NSSet *listEntries; // @dynamic listEntries;
@property(nonatomic) unsigned int maxAchievementPoints; // @dynamic maxAchievementPoints;
@property(retain, nonatomic) NSString *name; // @dynamic name;
@property(nonatomic) unsigned int numberOfAchievements; // @dynamic numberOfAchievements;
@property(nonatomic) unsigned int numberOfCategories; // @dynamic numberOfCategories;
@property(nonatomic) unsigned int numberOfLeaderboardSets; // @dynamic numberOfLeaderboardSets;
@property(nonatomic) long long numberOfUserRatings; // @dynamic numberOfUserRatings;
@property(nonatomic) _Bool owned; // @dynamic owned;
@property(retain, nonatomic) NSNumber *platform; // @dynamic platform;
@property(retain, nonatomic) NSSet *playerLists; // @dynamic playerLists;
@property(retain, nonatomic) NSSet *players; // @dynamic players;
@property(retain, nonatomic) NSSet *playersToInvite; // @dynamic playersToInvite;
@property(nonatomic) _Bool prerendered; // @dynamic prerendered;
@property(retain, nonatomic) NSString *priceDisplay; // @dynamic priceDisplay;
@property(retain, nonatomic) NSSet *recentPlayerLists; // @dynamic recentPlayerLists;
@property(retain, nonatomic) NSSet *recommendationEntries; // @dynamic recommendationEntries;
@property(retain, nonatomic) NSString *shortBundleVersion; // @dynamic shortBundleVersion;
@property(retain, nonatomic) NSString *shortViewItemURL; // @dynamic shortViewItemURL;
@property(nonatomic) NSString *softwareType; // @dynamic softwareType;
@property(retain, nonatomic) NSDate *storePiecesExpirationDate; // @dynamic storePiecesExpirationDate;
@property(readonly) Class superclass;
@property(nonatomic) _Bool supportsAchievements; // @dynamic supportsAchievements;
@property(nonatomic) _Bool supportsChallenges; // @dynamic supportsChallenges;
@property(nonatomic) _Bool supportsLeaderboardSets; // @dynamic supportsLeaderboardSets;
@property(nonatomic) _Bool supportsLeaderboards; // @dynamic supportsLeaderboards;
@property(nonatomic) _Bool supportsMultiplayer; // @dynamic supportsMultiplayer;
@property(nonatomic) _Bool supportsTurnBasedMultiplayer; // @dynamic supportsTurnBasedMultiplayer;
@property(retain, nonatomic) NSString *tellAFriendMessageContentsUrl; // @dynamic tellAFriendMessageContentsUrl;
@property(retain, nonatomic) NSSet *topGameEntries; // @dynamic topGameEntries;
@property(retain, nonatomic) GKTurnBasedSessionListCacheObject *turnBasedSessionList; // @dynamic turnBasedSessionList;
@property(retain, nonatomic) NSSet *turnBasedSessions; // @dynamic turnBasedSessions;
@property(retain, nonatomic) NSString *viewItemURL; // @dynamic viewItemURL;

@end

