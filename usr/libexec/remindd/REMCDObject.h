//
//     Generated by classdumpios 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <CoreData/NSManagedObject.h>

@class CKRecord, CKShare, NSData, NSString, NSUUID, RDStoreControllerManagedObjectContext, REMCDAccount, REMCKCloudState, REMObjectID, REMResolutionTokenMap;

@interface REMCDObject : NSManagedObject
{
    CKRecord *_ckServerRecord;	// 8 = 0x8
    CKShare *_ckServerShare;	// 16 = 0x10
    _Bool _mergeDataRefusedToMergeMarkedForDeletion;	// 24 = 0x18
    _Bool _mergeDataRevertedLocallyMarkedForDeletion;	// 25 = 0x19
    _Bool _shouldPerformCloudSchemaCatchUpSync;	// 26 = 0x1a
    _Bool hack_willSaveHandled;	// 27 = 0x1b
    _Bool hack_didHandleShouldSyncUpDelete;	// 28 = 0x1c
    _Bool spotlightIndexCountUpdated;	// 29 = 0x1d
    _Bool validateForInsertion_handledJournalEntries;	// 30 = 0x1e
    _Bool validateForUpdate_handledJournalEntries;	// 31 = 0x1f
    REMCDAccount *previousAccount;	// 32 = 0x20
    REMResolutionTokenMap *hack_resolutionTokenMapCopy;	// 40 = 0x28
    REMResolutionTokenMap *cached_CDResolutionMap;	// 48 = 0x30
}

+ (_Bool)conformsToREMChangeTrackingIdentifiable;	// IMP=0x002000000005430c
+ (id)cdEntityName;	// IMP=0x00100000000542b5
+ (id)objectIDWithUUID:(id)arg1;	// IMP=0x0010000000054228
+ (id)newObjectID;	// IMP=0x00100000000541c6
+ (id)relationshipsEligibleForEffectiveMinimumSupportedVersionPropagationWithEntity:(id)arg1;	// IMP=0x0010000000053c14
+ (id)keyPathsForValuesAffectingEffectiveMinimumSupportedVersion;	// IMP=0x00100000000539f7
+ (_Bool)isAbstract;	// IMP=0x00100000000507a9
+ (id)ic_resultsMatchingPredicate:(id)arg1 sortDescriptors:(id)arg2 resultType:(unsigned long long)arg3 fetchBatchSize:(unsigned long long)arg4 propertiesToFetch:(id)arg5 relationshipKeyPathsForPrefetching:(id)arg6 context:(id)arg7;	// IMP=0x0010000000004f4c
+ (id)ic_objectsFromObjectIDs:(id)arg1 propertiesToFetch:(id)arg2 relationshipKeyPathsForPrefetching:(id)arg3 context:(id)arg4;	// IMP=0x0010000000004a61
+ (_Bool)shouldAttemptLocalObjectMerge;	// IMP=0x00100000000625f0
+ (id)getResolutionTokenMapFromRecord:(id)arg1;	// IMP=0x00100000000623ab
+ (id)objectCkZoneOwnerNameFromCKRecordZoneID:(id)arg1;	// IMP=0x0010000000061b57
+ (id)shareSystemFieldsTransformer;	// IMP=0x00100000000610ca
+ (id)recordSystemFieldsTransformer;	// IMP=0x0010000000061075
+ (void)resetAllDeletedByThisDeviceProperties;	// IMP=0x0010000000060f24
+ (id)deletedByThisDeviceSet;	// IMP=0x0010000000060c33
+ (id)deletedByThisDeviceOperationQueue;	// IMP=0x0010000000060bb2
+ (id)versionsByRecordIDByOperation;	// IMP=0x001000000006049c
+ (id)versionsByOperationQueue;	// IMP=0x001000000006041b
+ (id)keyPathsForValuesAffectingServerShareCheckingParent;	// IMP=0x001000000005faab
+ (id)keyPathsForValuesAffectingIsSharedReadOnly;	// IMP=0x001000000005fa0b
+ (id)keyPathsForValuesAffectingIsSharedViaICloud;	// IMP=0x001000000005f798
+ (id)keyPathsForValuesAffectingCanBeSharedViaICloud;	// IMP=0x001000000005f6fe
+ (id)keyPathsForValuesAffectingNeedsToBeDeletedFromCloud;	// IMP=0x001000000005e927
+ (void)deleteAllTemporaryAssetFilesForAllObjects;	// IMP=0x001000000005e33e
+ (void)deleteTemporaryFilesForAsset:(id)arg1;	// IMP=0x001000000005e185
+ (void)deleteTemporaryAssetFilesForOperation:(id)arg1;	// IMP=0x001000000005dca5
+ (id)temporaryAssetDirectoryURL;	// IMP=0x001000000005dacf
+ (id)assetForData:(id)arg1;	// IMP=0x001000000005d8a3
+ (id)temporaryAssets;	// IMP=0x001000000005d83e
+ (_Bool)needsToReFetchServerRecordValue:(id)arg1;	// IMP=0x001000000005c0ce
+ (id)keyPathsForValuesAffectingNeedsToBePushedToCloud;	// IMP=0x001000000005be4e
+ (_Bool)shouldSyncToCloud;	// IMP=0x001000000005bb50
+ (id)allDirtyCloudObjectIDsInContext:(id)arg1;	// IMP=0x001000000005aad9
+ (id)allDirtyCloudObjectsPredicate;	// IMP=0x001000000005aab7
+ (id)allCloudObjectIDsInContext:(id)arg1;	// IMP=0x001000000005aa3a
+ (id)allCloudObjectsInContext:(id)arg1;	// IMP=0x001000000005a934
+ (id)allCloudObjectsPredicate;	// IMP=0x001000000005a825
+ (id)newPlaceholderObjectForRecordID:(id)arg1 account:(id)arg2 context:(id)arg3;	// IMP=0x001000000005a6b2
+ (id)newObjectWithCKIdentifier:(id)arg1 context:(id)arg2 account:(id)arg3;	// IMP=0x0010000000059caf
+ (id)newObjectWithCKRecordName:(id)arg1 context:(id)arg2 account:(id)arg3;	// IMP=0x0010000000059c19
+ (id)newCloudObjectForRecord:(id)arg1 account:(id)arg2 context:(id)arg3;	// IMP=0x0010000000059c11
+ (id)newCloudObjectForRecord:(id)arg1 accountID:(id)arg2 context:(id)arg3;	// IMP=0x0010000000059a33
+ (id)existingCloudObjectForRecordID:(id)arg1 accountID:(id)arg2 context:(id)arg3;	// IMP=0x0010000000059a2b
+ (id)numberOfPushAttemptsToWaitByCKIdentifier;	// IMP=0x0010000000058691
+ (id)failedToSyncCountsByCKIdentifier;	// IMP=0x00100000000582c4
+ (id)failureCountQueue;	// IMP=0x0010000000058243
+ (id)objectWithRecordID:(id)arg1 accountID:(id)arg2 context:(id)arg3;	// IMP=0x0010000000057aee
+ (id)ckIdentifierFromRecordName:(id)arg1;	// IMP=0x0010000000057a1a
+ (id)recordTypes;	// IMP=0x0010000000056eaa
+ (id)ckRecordKeyForMinimumSupportedVersion;	// IMP=0x0010000000056e9d
+ (_Bool)conformsToICCloudObject;	// IMP=0x0010000000056e95
+ (id)subclassNamesOfREMCDObjectRepresentingRootCoreDataEntities;	// IMP=0x001000000006d48a
+ (id)subclassesOfREMCDObjectRepresentingRootCoreDataEntities;	// IMP=0x001000000006d39c
+ (id)fetchRequest;	// IMP=0x001000000006d28b
+ (id)entity;	// IMP=0x001000000006d1bd
+ (void)mergeSystemPropertiesIntoCDObject:(id)arg1 fromCKRecord:(id)arg2;	// IMP=0x00100000004796d0
- (void).cxx_destruct;	// IMP=0x0010000000054435
@property(nonatomic) _Bool validateForUpdate_handledJournalEntries; // @synthesize validateForUpdate_handledJournalEntries;
@property(nonatomic) _Bool validateForInsertion_handledJournalEntries; // @synthesize validateForInsertion_handledJournalEntries;
@property(nonatomic) _Bool spotlightIndexCountUpdated; // @synthesize spotlightIndexCountUpdated;
@property(retain, nonatomic) REMResolutionTokenMap *cached_CDResolutionMap; // @synthesize cached_CDResolutionMap;
@property(nonatomic) _Bool hack_didHandleShouldSyncUpDelete; // @synthesize hack_didHandleShouldSyncUpDelete;
@property(nonatomic) _Bool hack_willSaveHandled; // @synthesize hack_willSaveHandled;
@property(retain, nonatomic) REMResolutionTokenMap *hack_resolutionTokenMapCopy; // @synthesize hack_resolutionTokenMapCopy;
@property(retain, nonatomic) REMCDAccount *previousAccount; // @synthesize previousAccount;
- (id)remChangedObjectID;	// IMP=0x0010000000054314
- (id)remObjectIDWithError:(id *)arg1;	// IMP=0x0010000000054160
@property(readonly, nonatomic) REMObjectID *remObjectID;
- (_Bool)validateEffectiveMinimumSupportedVersionApplyingChange:(_Bool)arg1;	// IMP=0x0010000000053edb
- (void)_markDirtyForEffectiveMinimumSupportedVersionValidation;	// IMP=0x0010000000053a6f
- (long long)parentEffectiveMinimumSupportedVersion;	// IMP=0x0010000000053998
@property(nonatomic) long long effectiveMinimumSupportedVersion;
- (void)setMinimumSupportedVersion:(long long)arg1;	// IMP=0x0010000000053691
@property(readonly, nonatomic) long long minimumSupportedVersion;
- (_Bool)isUnsupported;	// IMP=0x0010000000053665
- (_Bool)_allowsObjectSupportedVersion;	// IMP=0x00100000000535ce
- (void)fixValueBeforeUnmarkingForDeletionForKey:(id)arg1;	// IMP=0x0010000000053515
- (void)fixValueBeforeMarkingForDeletionForKey:(id)arg1;	// IMP=0x0010000000053346
- (id)allChildObjects;	// IMP=0x0010000000053243
- (void)deleteAllChildrenFromLocalDatabase;	// IMP=0x00100000000530e9
- (void)recursiveMarkForDeletion:(_Bool)arg1 usingVisitedMap:(id)arg2;	// IMP=0x0010000000052f7c
- (void)traverseObjectTreeUsingVisitedMap:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0010000000052750
- (void)updateDeletedFlagAccordingToOrphanState:(id)arg1;	// IMP=0x0010000000052248
- (_Bool)shouldMarkAsDeletedInsteadOfDeletingImmediately;	// IMP=0x0010000000052240
- (_Bool)_validateZoneOwnerNamesWithLogPrefix:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000051e7e
@property(readonly, nonatomic) NSString *_parentZoneMismatchErrorDebugDescription;
- (_Bool)validateForUpdate:(id *)arg1;	// IMP=0x0010000000051a44
- (_Bool)validateForInsert:(id *)arg1;	// IMP=0x001000000005182b
- (void)didSave;	// IMP=0x001000000005177e
- (void)willSave;	// IMP=0x0010000000051322
@property(retain, nonatomic) REMCDAccount *account; // @dynamic account;
- (id)createResolutionTokenMapIfNecessary;	// IMP=0x00100000000511d1
- (id)resolutionTokenMapFromJsonData:(id)arg1;	// IMP=0x001000000005112a
- (id)jsonDataFromResolutionTokenMap:(id)arg1;	// IMP=0x00100000000510c9
@property(retain, nonatomic) NSData *resolutionTokenMapData;
@property(retain, nonatomic) REMResolutionTokenMap *resolutionTokenMap;
- (void)didChangeValueForKey:(id)arg1;	// IMP=0x001000000005098f
- (void)didTurnIntoFault;	// IMP=0x001000000005094e
- (void)awakeFromFetch;	// IMP=0x001000000005090d
- (void)awakeFromInsert;	// IMP=0x00100000000508cc
@property(readonly, nonatomic) _Bool isPlaceholder;
@property(readonly, nonatomic) _Bool isConcealed;
@property(readonly, nonatomic) RDStoreControllerManagedObjectContext *storeControllerManagedObjectContext;
@property(readonly, nonatomic) _Bool shouldPerformCloudSchemaCatchUpSync;
@property(readonly, nonatomic) _Bool mergeDataRevertedLocallyMarkedForDeletion;
@property(readonly, nonatomic) _Bool mergeDataRefusedToMergeMarkedForDeletion;
- (void)cleanUpAfterLocalObjectMerge;	// IMP=0x0010000000062608
- (_Bool)mergeWithLocalObject:(id)arg1;	// IMP=0x0010000000062600
- (id)existingLocalObjectToMergeWithPredicate:(id)arg1;	// IMP=0x00100000000625f8
- (void)generateReolutionTokenMapForTestingWithKeys:(id)arg1;	// IMP=0x0010000000062487
- (id)getResolutionTokenMapFromRecord:(id)arg1;	// IMP=0x001000000006246e
- (id)cloudKitReferenceWithRecordIDAndValidateAction:(id)arg1;	// IMP=0x001000000006234b
- (id)ic_loggingValues;	// IMP=0x0010000000061ca3
- (id)ic_loggingIdentifier;	// IMP=0x0010000000061c91
- (id)shortLoggingDescription;	// IMP=0x0010000000061c15
- (id)loggingDescription;	// IMP=0x0010000000061c03
- (_Bool)hasAllMandatoryFields;	// IMP=0x0010000000061bbb
- (void)resetUniqueIdentifier;	// IMP=0x0010000000061bb5
@property(retain, nonatomic) CKShare *ckServerShare;
- (void)updateSharedObjectOwnerName:(id)arg1;	// IMP=0x0010000000061405
@property(retain, nonatomic) CKRecord *ckServerRecord;
@property(nonatomic, getter=isInCloud) _Bool inCloud;
@property(nonatomic) _Bool deletedByThisDevice;
- (long long)isPushingSameOrLaterThanVersion:(long long)arg1;	// IMP=0x00100000000608be
- (void)setVersion:(long long)arg1 forOperation:(id)arg2;	// IMP=0x00100000000606ea
- (long long)versionForOperation:(id)arg1;	// IMP=0x0010000000060501
- (void)restoreParentReferenceAfterUnmarkingForDeletion;	// IMP=0x0010000000060415
- (void)didAcceptShare:(id)arg1;	// IMP=0x00100000000601fd
- (void)setServerShareIfNewer:(id)arg1;	// IMP=0x001000000005fc7d
- (void)updateObjectWithShare:(id)arg1;	// IMP=0x001000000005fc28
- (id)currentUserShareParticipantID;	// IMP=0x001000000005fb87
- (id)shareType;	// IMP=0x001000000005fb75
- (id)shareTitle;	// IMP=0x001000000005fb63
- (id)serverShareCheckingParent;	// IMP=0x001000000005facb
- (_Bool)isSharedReadOnly;	// IMP=0x001000000005fa2b
- (_Bool)isSharedRootObject;	// IMP=0x001000000005f97c
- (_Bool)isOwnedByCurrentUser;	// IMP=0x001000000005f938
- (_Bool)canBeRootShareObject;	// IMP=0x001000000005f930
- (_Bool)isSharedViaICloud;	// IMP=0x001000000005f7e0
- (_Bool)canBeSharedViaICloud;	// IMP=0x001000000005f72a
@property(readonly) _Bool needsToDeleteShare;
- (void)updateParentReferenceIfNecessary;	// IMP=0x001000000005f1ab
- (id)parentCloudObject;	// IMP=0x001000000005f1a3
- (void)debug_lowLevelRemoveFromParent;	// IMP=0x001000000005f136
- (void)debug_markObjectDirtyAfterUnmarkedForDeletion;	// IMP=0x001000000005f124
- (void)debug_lowLevelUnmarkForDeletion;	// IMP=0x001000000005f112
- (void)debug_markObjectDirtyAfterMarkedForDeletion;	// IMP=0x001000000005f100
- (void)debug_lowLevelMarkForDeletion;	// IMP=0x001000000005f0ee
- (void)debug_fixValuesOfKeysWithUniqueConstraintBeforeSettingMarkedForDeletion:(_Bool)arg1;	// IMP=0x001000000005f0dc
- (_Bool)supportsDeletionByTTL;	// IMP=0x001000000005f0d4
@property(nonatomic) _Bool markedForDeletion; // @dynamic markedForDeletion;
- (void)markObjectDirtyAfterUnmarkedForDeletion;	// IMP=0x001000000005ef44
- (void)lowLevelUnmarkForDeletion;	// IMP=0x001000000005ef12
- (void)unmarkForDeletion;	// IMP=0x001000000005ee08
- (void)markObjectDirtyAfterMarkedForDeletion;	// IMP=0x001000000005ed6a
- (void)lowLevelMarkForDeletion;	// IMP=0x001000000005ed32
- (void)markForDeletion;	// IMP=0x001000000005ec25
- (void)fixValuesOfKeysWithUniqueConstraintBeforeSettingMarkedForDeletion:(_Bool)arg1;	// IMP=0x001000000005e94b
- (void)fixBrokenReferences;	// IMP=0x001000000005e921
- (id)objectsToBeDeletedBeforeThisObject;	// IMP=0x001000000005e914
- (void)deleteFromLocalDatabase;	// IMP=0x001000000005e838
- (_Bool)shouldBeDeletedFromLocalDatabaseUnlessByThisDevice:(_Bool)arg1;	// IMP=0x001000000005e665
- (_Bool)isDeletable;	// IMP=0x001000000005e65d
- (void)sortChildrenObjects;	// IMP=0x001000000005d838
- (void)objectWasFetchedButDoesNotExistInCloud;	// IMP=0x001000000005d6c1
- (void)objectWasFetchedFromCloudWithRecord:(id)arg1 accountID:(id)arg2;	// IMP=0x001000000005d07c
- (void)objectWasPushedToCloudWithOperation:(id)arg1 serverRecord:(id)arg2;	// IMP=0x001000000005ce38
- (void)objectFailedToBePushedToCloudWithOperation:(id)arg1 recordID:(id)arg2 error:(id)arg3;	// IMP=0x001000000005c565
- (void)objectWillBePushedToCloudWithOperation:(id)arg1;	// IMP=0x001000000005c4e3
- (void)objectWasDeletedFromCloudByAnotherDevice;	// IMP=0x001000000005c2e9
- (void)objectWasDeletedFromCloud;	// IMP=0x001000000005c2d5
- (_Bool)needsToFetchAfterServerRecordChanged:(id)arg1;	// IMP=0x001000000005bf07
- (_Bool)hasSuccessfullyPushedLatestVersionToCloud;	// IMP=0x001000000005be7a
- (void)forcePushToCloud;	// IMP=0x001000000005bd24
@property(readonly) _Bool needsToBePushedToCloud;
- (void)mergeDataFromRecord:(id)arg1 accountID:(id)arg2;	// IMP=0x001000000005b57a
- (id)newlyCreatedRecord;	// IMP=0x001000000005af00
- (void)recursivelyFixCrossZoneRelationshipWithVisitedMap:(id)arg1 perObjectHandler:(CDUnknownBlockType)arg2;	// IMP=0x001000000005ab56
- (_Bool)isValidObject;	// IMP=0x001000000005992b
- (_Bool)isInICloudAccount;	// IMP=0x001000000005982d
- (_Bool)_isInICloudAccount;	// IMP=0x001000000005971e
@property(readonly) _Bool needsToBeDeletedFromCloud;
- (id)recordType;	// IMP=0x001000000005964d
- (long long)rd_ckDatabaseScope;	// IMP=0x0010000000059609
- (id)recordID;	// IMP=0x0010000000059315
@property(copy, nonatomic) NSString *ckZoneOwnerName; // @dynamic ckZoneOwnerName;
- (id)recordZoneName;	// IMP=0x00100000000591ea
- (id)recordName;	// IMP=0x00100000000590cd
@property(readonly, nonatomic) _Bool shouldBeIgnoredForSync;
- (void)resetFailureCounts;	// IMP=0x0010000000058f17
- (void)deleteChangeTokensAndReSync;	// IMP=0x0010000000058d7c
- (void)decrementFailureCounts;	// IMP=0x0010000000058c2a
- (void)incrementFailureCounts;	// IMP=0x0010000000058a5e
- (void)setNumberOfPushAttemptsToWaitCount:(long long)arg1;	// IMP=0x00000000000588bf
- (long long)numberOfPushAttemptsToWaitCount;	// IMP=0x00100000000586f6
- (void)setFailedToSyncCount:(long long)arg1;	// IMP=0x00100000000584f2
- (long long)failedToSyncCount;	// IMP=0x0010000000058329
- (id)ckIdentifierFromRecordName:(id)arg1;	// IMP=0x0010000000057a9d
- (void)clearServerRecord;	// IMP=0x0010000000057a06
- (void)clearChangeCount;	// IMP=0x0010000000057958
- (void)updateChangeCount;	// IMP=0x001000000005771d
- (void)setShouldSyncUpDelete;	// IMP=0x00100000000576d0
- (_Bool)shouldSyncUpDelete;	// IMP=0x00100000000576b7
- (void)_setCKIdentifierIfNecessary;	// IMP=0x0010000000057548
@property(nonatomic) _Bool ckNeedsToBeFetchedFromCloud; // @dynamic ckNeedsToBeFetchedFromCloud;
@property(readonly, nonatomic) NSString *accountCKIdentifier;
- (id)cloudAccount;	// IMP=0x001000000005723e
- (void)insertCloudStateIfNeededOnAwakeFromFetch;	// IMP=0x0010000000057066
- (void)insertCloudStateOnAwakeFromInsert;	// IMP=0x0010000000056f67
- (void)clearTransformedCKServerValueCachesOnDidTurnIntoFault;	// IMP=0x0010000000056f1a
- (_Bool)shouldCascadeMarkAsDeleteInto:(id)arg1 forRelationship:(id)arg2;	// IMP=0x0010000000063750
- (_Bool)isConnectedToAccountObject:(id)arg1;	// IMP=0x001000000006368d

// Remaining properties
@property(retain, nonatomic) REMCKCloudState *ckCloudState; // @dynamic ckCloudState;
@property(nonatomic) short ckDirtyFlags; // @dynamic ckDirtyFlags;
@property(copy, nonatomic) NSString *ckIdentifier; // @dynamic ckIdentifier;
@property(nonatomic) _Bool ckNeedsInitialFetchFromCloud; // @dynamic ckNeedsInitialFetchFromCloud;
@property(retain, nonatomic) NSData *ckServerRecordData; // @dynamic ckServerRecordData;
@property(retain, nonatomic) NSData *ckServerShareData; // @dynamic ckServerShareData;
@property(copy, nonatomic) NSString *daPushKey; // @dynamic daPushKey;
@property(copy, nonatomic) NSString *daSyncToken; // @dynamic daSyncToken;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(nonatomic) long long effectiveMinimumSupportedAppVersion; // @dynamic effectiveMinimumSupportedAppVersion;
@property(copy, nonatomic) NSString *externalIdentifier; // @dynamic externalIdentifier;
@property(copy, nonatomic) NSString *externalModificationTag; // @dynamic externalModificationTag;
@property(readonly) unsigned long long hash;
@property(copy, nonatomic) NSUUID *identifier; // @dynamic identifier;
@property(nonatomic) long long minimumSupportedAppVersion; // @dynamic minimumSupportedAppVersion;
@property(retain, nonatomic) NSString *primitiveCkZoneOwnerName; // @dynamic primitiveCkZoneOwnerName;
@property(retain, nonatomic) REMResolutionTokenMap *resolutionTokenMap_v2_JSON; // @dynamic resolutionTokenMap_v2_JSON;
@property(retain, nonatomic) NSData *resolutionTokenMap_v3_JSONData; // @dynamic resolutionTokenMap_v3_JSONData;
@property(readonly) Class superclass;

@end

