//
//     Generated by classdumpios 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class MTLBlitPassSampleBufferAttachmentDescriptorArrayInternal, MTLComputePassSampleBufferAttachmentDescriptorArrayInternal, MTLLinkedFunctions, MTLPipelineBufferDescriptorArrayInternal, MTLProfileControl, MTLRenderPassColorAttachmentDescriptorArrayInternal, MTLRenderPassSampleBufferAttachmentDescriptorArrayInternal, MTLRenderPipelineColorAttachmentDescriptorArrayInternal, MTLResourceStatePassSampleBufferAttachmentDescriptorArrayInternal, MTLStageInputOutputDescriptor, MTLStencilDescriptorInternal, MTLTileRenderPipelineColorAttachmentDescriptorArrayInternal, MTLVertexDescriptorInternal, NSArray, NSData, NSDictionary, NSObject, NSString;

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct Allocator;

struct DebugLocation {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
};

struct DebugSubProgram {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
};

struct FileIdentifier {
    int dev;
    unsigned long long ino;
};

struct FlatBufferBuilder {
    struct vector_downward buf_;
    unsigned int num_field_loc;
    unsigned short max_voffset_;
    _Bool nested;
    _Bool finished;
    unsigned long long minalign_;
    _Bool force_defaults_;
    _Bool dedup_vtables_;
    void *string_pool;
};

struct IndirectArgumentBufferCapabilities {
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :29;
};

struct MTLArgumentDescriptorPrivate {
    unsigned long long dataType;
    unsigned long long index;
    unsigned long long arrayLength;
    unsigned long long access;
    unsigned long long textureType;
    unsigned long long constantBlockAlignment;
};

struct MTLAttributeFlags {
    union {
        struct {
            unsigned int :1;
            unsigned int :1;
            unsigned int :1;
            unsigned int :5;
        } _field1;
        unsigned char _field2;
    } _field1;
};

struct MTLBlitPassDescriptorPrivate {
    MTLBlitPassSampleBufferAttachmentDescriptorArrayInternal *sampleBufferAttachments;
};

struct MTLBlitPassSampleBufferAttachmentDescriptorPrivate {
    id sampleBuffer;
    unsigned long long startOfEncoderSampleIndex;
    unsigned long long endOfEncoderSampleIndex;
};

struct MTLComputePassDescriptorPrivate {
    unsigned long long dispatchType;
    MTLComputePassSampleBufferAttachmentDescriptorArrayInternal *sampleBufferAttachments;
    _Bool allowCommandEncoderCoalescing;
};

struct MTLComputePassSampleBufferAttachmentDescriptorPrivate {
    id sampleBuffer;
    unsigned long long startOfEncoderSampleIndex;
    unsigned long long endOfEncoderSampleIndex;
};

struct MTLComputePipelineDescriptorPrivate {
    NSString *label;
    id computeFunction;
    _Bool threadGroupSizeIsMultipleOfThreadExecutionWidth;
    unsigned short maxTotalThreadsPerThreadgroup;
    MTLStageInputOutputDescriptor *stageInputDescriptor;
    NSDictionary *driverCompilerOptions;
    MTLPipelineBufferDescriptorArrayInternal *buffers;
    NSArray *binaryArchives;
    union {
        NSArray *preloadedLibraries;
        NSArray *insertLibraries;
    } ;
    id pipelineLibrary;
    _Bool supportIndirectCommandBuffers;
    long long textureWriteRoundingMode;
    _Bool forceResourceIndex;
    unsigned long long resourceIndex;
    NSDictionary *pluginData;
    _Bool needsCustomBorderColorSamplers;
    unsigned int openGLMode:1;
    unsigned int openCLMode:1;
    unsigned int reserved:30;
    NSArray *functionPointers;
    MTLLinkedFunctions *linkedFunctions;
    unsigned long long maxStackCallDepth;
    _Bool supportAddingBinaryFunctions;
    MTLProfileControl *profileControl;
};

struct MTLDepthStencilDescriptorPrivate {
    MTLStencilDescriptorInternal *frontFaceStencil;
    MTLStencilDescriptorInternal *backFaceStencil;
    unsigned long long depthCompareFunction;
    _Bool depthWriteEnabled;
    NSString *label;
};

struct MTLFunctionData {
    unsigned long long bitCodeOffset;
    unsigned long long bitCodeFileSize;
    unsigned long long publicArgumentsOffset;
    unsigned long long privateArgumentsOffset;
    unsigned long long sourceArchiveOffset;
    unsigned short airMajorVersion;
    unsigned short airMinorVersion;
    unsigned short languageMajorVersion;
    unsigned short languageMinorVersion;
    CDStruct_41a22ec7 bitcodeHash;
    unsigned char bitcodeType;
    NSData *pluginData;
    unsigned char renderTargetArrayIndexType;
    unsigned int patchType:2;
    unsigned int controlPointCount:6;
    NSObject *functionInputs;
};

struct MTLFunctionId {
    CDStruct_41a22ec7 _field1;
    CDStruct_41a22ec7 _field2[4];
    unsigned int _field3;
};

struct MTLHeapDescriptorPrivate {
    unsigned long long _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    long long _field4;
    _Bool _field5;
    long long _field6;
    unsigned long long _field7;
    unsigned long long _field8;
    unsigned long long _field9;
};

struct MTLIOScratchBufferPrivate {
    CDStruct_51606cd7 _field1;
    id _field2;
    void *_field3;
    id _field4;
};

struct MTLIntersectionFunctionTableDescriptorPrivate {
    unsigned long long functionCount;
    _Bool forceResourceIndex;
    unsigned long long resourceIndex;
};

struct MTLLibraryData {
    CDUnknownFunctionPointerType *_field1;
    CDStruct_41a22ec7 _field2;
    _Atomic int _field3;
    id _field4;
    id _field5;
};

struct MTLLinkedFunctionsPrivate {
    NSArray *functions;
    NSArray *privateFunctions;
    NSArray *binaryFunctions;
    NSDictionary *groups;
};

struct MTLMultiHashKey {
    CDStruct_41a22ec7 _field1;
    CDStruct_41a22ec7 _field2[4];
    unsigned int _field3;
};

struct MTLPipelineBufferDescriptorPrivate {
    union {
        struct {
            unsigned int mutability:2;
        } ;
        CDStruct_914d909e ;
    } ;
};

struct MTLRenderPassAttachmentDescriptorPrivate {
    id texture;
    unsigned long long level;
    unsigned long long slice;
    unsigned long long depthPlane;
    unsigned long long loadAction;
    unsigned long long storeAction;
    unsigned long long storeActionOptions;
    CDStruct_3ead2808 clearColor;
    double clearDepth;
    unsigned int clearStencil;
    unsigned long long stencilResolveFilter;
    id resolveTexture;
    unsigned long long resolveLevel;
    unsigned long long resolveSlice;
    unsigned long long resolveDepthPlane;
    unsigned long long resolveFilter;
    unsigned long long width;
    unsigned long long height;
    _Bool yInvert;
};

struct MTLRenderPassDescriptorPrivate {
    MTLRenderPassColorAttachmentDescriptorArrayInternal *attachments;
    id visibilityResultBuffer;
    unsigned long long renderTargetWidth;
    unsigned long long renderTargetHeight;
    unsigned long long defaultColorSampleCount;
    _Bool fineGrainedBackgroundVisibilityEnabled;
    _Bool skipEmptyTilesOnClearEnabled;
    _Bool ditherEnabled;
    _Bool openGLModeEnabled;
    unsigned long long renderTargetArrayLength;
    unsigned long long tileWidth;
    unsigned long long tileHeight;
    union {
        unsigned long long defaultSampleCount;
        unsigned long long defaultRasterSampleCount;
    } ;
    unsigned long long imageBlockSampleLength;
    unsigned long long threadgroupMemoryLength;
    CDStruct_6e3f967a customSamplePositions[4];
    unsigned long long numCustomSamplePositions;
    id rasterizationRateMap;
    MTLRenderPassSampleBufferAttachmentDescriptorArrayInternal *sampleBufferAttachments;
    _Bool pointCoordYFlipEnabled;
};

struct MTLRenderPassSampleBufferAttachmentDescriptorPrivate {
    id sampleBuffer;
    unsigned long long startOfVertexSampleIndex;
    unsigned long long endOfVertexSampleIndex;
    unsigned long long startOfFragmentSampleIndex;
    unsigned long long endOfFragmentSampleIndex;
};

struct MTLRenderPipelineAttachmentDescriptorPrivate {
    union {
        struct {
            unsigned int blendingEnabled:1;
            unsigned int rgbBlendOperation:3;
            unsigned int alphaBlendOperation:3;
            unsigned int sourceRGBBlendFactor:5;
            unsigned int sourceAlphaBlendFactor:5;
            unsigned int destinationRGBBlendFactor:5;
            unsigned int destinationAlphaBlendFactor:5;
            unsigned int writeMask:4;
            unsigned int logicOpEnabled:1;
            unsigned int logicOp:4;
            unsigned int pixelFormat:28;
        } ;
        CDStruct_914d909e ;
    } ;
};

struct MTLRenderPipelineDescriptorPrivate {
    MTLRenderPipelineColorAttachmentDescriptorArrayInternal *attachments;
    unsigned long long rtBlendDescHash[8];
    unsigned long long depthAttachmentPixelFormat;
    unsigned long long stencilAttachmentPixelFormat;
    unsigned long long tessellationPartitionMode;
    unsigned long long maxTessellationFactor;
    _Bool tessellationFactorScaleEnabled;
    unsigned long long tessellationFactorFormat;
    unsigned long long tessellationControlPointIndexType;
    unsigned long long tessellationFactorStepFunction;
    unsigned long long tessellationOutputWindingOrder;
    unsigned long long postVertexDumpBufferIndex;
    _Bool supportIndirectCommandBuffers;
    long long textureWriteRoundingMode;
    CDUnion_a2c16d69 ;
    unsigned long long sampleMask;
    union {
        unsigned int sampleCoverageHash;
        float sampleCoverage;
    } ;
    unsigned long long paddingToRemove;
    unsigned long long colorSampleCount;
    union {
        unsigned int miscHash[2];
        struct {
            unsigned int alphaToCoverageEnabled:1;
            unsigned int alphaToOneEnabled:1;
            unsigned int rasterizationEnabled:1;
            unsigned int inputPrimitiveTopology:2;
            unsigned int private0:1;
            unsigned int depthStencilWriteDisabled:1;
            unsigned int openGLMode:1;
            unsigned int sampleCoverageInvert:1;
            unsigned int private4:1;
            unsigned int vertexAmplificationMode:1;
            unsigned int twoSideEnabled:1;
            unsigned int pointSizeOutputVS:1;
            unsigned int pointCoordLowerLeft:1;
            unsigned int pointSmoothEnabled:1;
            unsigned int clipDistanceEnableMask:8;
            unsigned int alphaTestFunc:3;
            unsigned int alphaTestEnabled:1;
            unsigned int logicOp:4;
            unsigned int logicOpEnabled:1;
            unsigned int forceResourceIndex:1;
            unsigned int forceSoftwareVertexFetch:1;
            unsigned int objectThreadgroupSizeIsMultipleOfThreadExecutionWidth:1;
            unsigned int meshThreadgroupSizeIsMultipleOfThreadExecutionWidth:1;
        } ;
    } ;
    unsigned int vertexDepthCompareClampMask;
    unsigned int fragmentDepthCompareClampMask;
    unsigned long long resourceIndex;
    NSString *label;
    id vertexFunction;
    id fragmentFunction;
    MTLVertexDescriptorInternal *vertexDescriptor;
    id objectFunction;
    id meshFunction;
    CDStruct_da2e99ad objectThreadsPerThreadgroup_DO_NOT_USE_WILL_BE_REMOVED;
    CDStruct_da2e99ad meshThreadsPerThreadgroup_DO_NOT_USE_WILL_BE_REMOVED;
    CDStruct_da2e99ad maxPipelineChildren;
    unsigned long long pipelineMemoryLength;
    MTLPipelineBufferDescriptorArrayInternal *objectBuffers;
    MTLPipelineBufferDescriptorArrayInternal *meshBuffers;
    unsigned long long maxTotalThreadsPerObjectThreadgroup;
    unsigned long long maxTotalThreadsPerMeshThreadgroup;
    MTLPipelineBufferDescriptorArrayInternal *vertexBuffers;
    MTLPipelineBufferDescriptorArrayInternal *fragmentBuffers;
    NSDictionary *driverCompilerOptions;
    id pipelineLibrary;
    void *pad0;
    void *pad1;
    NSDictionary *pluginData;
    _Bool needsCustomBorderColorSamplers;
    unsigned int maxVertexAmplificationCount;
    NSArray *binaryArchives;
    MTLLinkedFunctions *vertexLinkedFunctions;
    MTLLinkedFunctions *fragmentLinkedFunctions;
    MTLLinkedFunctions *objectLinkedFunctions;
    MTLLinkedFunctions *meshLinkedFunctions;
    NSArray *vertexPreloadedLibraries;
    NSArray *fragmentPreloadedLibraries;
    NSArray *objectPreloadedLibraries;
    NSArray *meshPreloadedLibraries;
    unsigned long long maxVertexStackCallDepth;
    unsigned long long maxFragmentStackCallDepth;
    _Bool supportAddingVertexBinaryFunctions;
    _Bool supportAddingFragmentBinaryFunctions;
    unsigned long long maxMeshStackCallDepth;
    unsigned long long maxObjectStackCallDepth;
    _Bool supportAddingMeshBinaryFunctions;
    _Bool supportAddingObjectBinaryFunctions;
    MTLProfileControl *profileControl;
    unsigned int explicitVisibilityGroupID;
};

struct MTLResourceID {
    unsigned long long _field1;
};

struct MTLResourceStatePassDescriptorPrivate {
    MTLResourceStatePassSampleBufferAttachmentDescriptorArrayInternal *sampleBufferAttachments;
};

struct MTLResourceStatePassSampleBufferAttachmentDescriptorPrivate {
    id sampleBuffer;
    unsigned long long startOfEncoderSampleIndex;
    unsigned long long endOfEncoderSampleIndex;
};

struct MTLSamplerDescriptorPrivate {
    union {
        struct {
            unsigned int minFilter:2;
            unsigned int magFilter:2;
            unsigned int mipFilter:2;
            unsigned int sAddressMode:3;
            unsigned int tAddressMode:3;
            unsigned int rAddressMode:3;
            unsigned int normalizedCoords:1;
            unsigned int borderColor:2;
            unsigned int lodAverage:1;
            unsigned int compareFunction:3;
            unsigned int supportArgumentBuffers:1;
            unsigned int forceResourceIndex:1;
            unsigned int forceSeamsOnCubemapFiltering:1;
        } ;
        unsigned int miscHash;
    } ;
    union {
        unsigned int lodMinClampHash;
        float lodMinClamp;
    } ;
    union {
        unsigned int lodMaxClampHash;
        float lodMaxClamp;
    } ;
    union {
        unsigned int lodBiasHash;
        float lodBias;
    } ;
    unsigned long long maxAnisotropy;
    NSString *label;
    unsigned long long resourceIndex;
    unsigned int customBorderColorValue[4];
    unsigned long long pixelFormat;
};

struct MTLStencilDescriptorPrivate {
    unsigned long long stencilCompareFunction;
    unsigned long long stencilFailureOperation;
    unsigned long long depthFailureOperation;
    unsigned long long depthStencilPassOperation;
    unsigned int readMask;
    unsigned int writeMask;
};

struct MTLTargetDeviceArch {
    unsigned long long _field1;
    unsigned int _field2;
    char *_field3;
};

struct MTLTextureDescriptorPrivate {
    unsigned long long textureType;
    unsigned long long pixelFormat;
    unsigned long long width;
    unsigned long long height;
    unsigned long long depth;
    unsigned long long mipmapLevelCount;
    unsigned long long sampleCount;
    unsigned long long arrayLength;
    _Bool zeroFill;
    unsigned long long rotation;
    _Bool framebufferOnly;
    _Bool isDrawable;
    unsigned int swizzle;
    _Bool writeSwizzleEnabled;
    unsigned long long compressionMode;
    union {
        unsigned long long textureUsage;
        unsigned long long usage;
    } ;
    unsigned long long resourceOptions;
    unsigned long long sparseSurfaceDefaultValue;
    _Bool allowGPUOptimizedContents;
    _Bool forceResourceIndex;
    unsigned long long resourceIndex;
    unsigned long long protectionOptions;
    unsigned long long compressionFootprint;
    long long compressionType;
    unsigned long long resolvedUsage;
    unsigned long long cpuCacheMode;
    unsigned long long storageMode;
};

struct MTLTileRenderPipelineAttachmentDescriptorPrivate {
    union {
        struct {
            unsigned int pixelFormat;
        } ;
        struct {
            unsigned int bits;
        } ;
    } ;
};

struct MTLTileRenderPipelineDescriptorPrivate {
    MTLTileRenderPipelineColorAttachmentDescriptorArrayInternal *attachments;
    CDUnion_a2c16d69 ;
    NSString *label;
    id tileFunction;
    _Bool threadgroupSizeMatchesTileSize;
    unsigned long long paddingToRemove;
    unsigned long long colorSampleCount;
    MTLPipelineBufferDescriptorArrayInternal *tileBuffers;
    unsigned short maxTotalThreadsPerThreadgroup;
    long long textureWriteRoundingMode;
    NSDictionary *pluginData;
    NSArray *binaryArchives;
    MTLLinkedFunctions *linkedFunctions;
    NSArray *preloadedLibraries;
    unsigned long long maxStackCallDepth;
    _Bool supportAddingBinaryFunctions;
    MTLProfileControl *profileControl;
};

struct MTLVisibleFunctionTableDescriptorPrivate {
    unsigned long long functionCount;
    _Bool forceResourceIndex;
    unsigned long long resourceIndex;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct os_unfair_lock_s {
    unsigned int _field1;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLLoadedFile *, id>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLLoadedFile *, id>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLLoadedFile *, id>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLLoadedFile *, id>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLLoadedFile *, id>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLLoadedFile *, id>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unordered_map<MTLLoadedFile *, id, std::hash<MTLLoadedFile *>, std::equal_to<MTLLoadedFile *>, std::allocator<std::pair<MTLLoadedFile *const, id>>> {
    struct __hash_table<std::__hash_value_type<MTLLoadedFile *, id>, std::__unordered_map_hasher<MTLLoadedFile *, std::__hash_value_type<MTLLoadedFile *, id>, std::hash<MTLLoadedFile *>, std::equal_to<MTLLoadedFile *>, true>, std::__unordered_map_equal<MTLLoadedFile *, std::__hash_value_type<MTLLoadedFile *, id>, std::equal_to<MTLLoadedFile *>, std::hash<MTLLoadedFile *>, true>, std::allocator<std::__hash_value_type<MTLLoadedFile *, id>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLLoadedFile *, id>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLLoadedFile *, id>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLLoadedFile *, id>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<MTLLoadedFile *, id>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<MTLLoadedFile *, id>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<MTLLoadedFile *, std::__hash_value_type<MTLLoadedFile *, id>, std::hash<MTLLoadedFile *>, std::equal_to<MTLLoadedFile *>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<MTLLoadedFile *, std::__hash_value_type<MTLLoadedFile *, id>, std::equal_to<MTLLoadedFile *>, std::hash<MTLLoadedFile *>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct vector<MTLRasterizationRateLayerDescriptor *, std::allocator<MTLRasterizationRateLayerDescriptor *>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<MTLRasterizationRateLayerDescriptor **, std::allocator<MTLRasterizationRateLayerDescriptor *>> {
        id *__value_;
    } __end_cap_;
};

struct vector_downward {
    struct Allocator *allocator_;
    _Bool own_allocator_;
    unsigned long long initial_size_;
    unsigned long long buffer_minalign_;
    unsigned long long reserved_;
    char *buf_;
    char *cur_;
    char *scratch_;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned char _field1;
    unsigned char _field2;
    unsigned char _field3;
    unsigned char _field4;
} CDStruct_a06f635e;

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned int _field7;
    unsigned int _field8;
    unsigned int _field9;
    unsigned int _field10;
    unsigned int _field11;
    unsigned int _field12;
    unsigned int _field13;
    unsigned int _field14;
    unsigned int _field15;
    unsigned int _field16;
    unsigned int _field17;
    unsigned int _field18;
    unsigned int _field19;
    unsigned int _field20;
    unsigned int _field21;
    unsigned int _field22;
    unsigned int _field23;
    unsigned int _field24;
    unsigned int _field25;
    unsigned int _field26;
    float _field27;
    float _field28;
    unsigned int _field29;
    unsigned int _field30;
    unsigned int _field31;
    unsigned int _field32;
    unsigned int _field33;
    unsigned int _field34;
    unsigned int _field35;
    unsigned int _field36;
    unsigned int _field37;
    unsigned int _field38;
    unsigned int _field39;
    unsigned int _field40;
    unsigned int _field41;
    unsigned int _field42;
    unsigned int _field43;
    unsigned int _field44;
    unsigned int _field45;
    unsigned int _field46;
    unsigned int _field47;
    unsigned int _field48;
    unsigned int _field49;
    unsigned int _field50;
    unsigned int _field51;
    unsigned int _field52;
    unsigned int _field53;
    unsigned int _field54;
    unsigned int _field55;
    unsigned int _field56;
    unsigned int _field57;
    unsigned int _field58;
    unsigned int _field59;
    unsigned int _field60;
    unsigned int _field61;
    unsigned int _field62;
    unsigned int _field63;
    unsigned long long _field64;
} CDStruct_e1c34685;

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
} CDStruct_32a7f38a;

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
} CDStruct_c0454aff;

typedef struct {
    unsigned long long width;
    unsigned long long height;
    unsigned long long depth;
} CDStruct_da2e99ad;

typedef struct {
    unsigned long long _field1;
    unsigned long long _field2;
} CDStruct_4bcfbbae;

typedef struct {
    unsigned long long bits;
} CDStruct_914d909e;

typedef struct {
    unsigned char key[32];
} CDStruct_41a22ec7;

typedef struct {
    unsigned int _field1[3];
} CDStruct_22c8f40a;

typedef struct {
    unsigned int fragmentUsesDiscard:1;
    unsigned int fragmentWritesSampleMask:1;
    unsigned int fragmentWritesDepth:1;
    unsigned int vertexRegisterSpill:1;
    unsigned int fragmentRegisterSpill:1;
    unsigned int fragmentReadsFramebufferValues:1;
    unsigned int fragmentPunchThrough:1;
    unsigned int vertexWritesPointSize:1;
    unsigned int private2:1;
    unsigned int reserved:55;
} CDStruct_7ce1aa5b;

typedef struct {
    unsigned int kernelRegisterSpill:1;
    unsigned int threadgroupBarrier:1;
    unsigned int deviceMemoryAtomics:1;
    unsigned int threadgroupMemoryAtomics:1;
    unsigned int reserved:60;
} CDStruct_596dc0d1;

typedef struct {
    double red;
    double green;
    double blue;
    double alpha;
} CDStruct_3ead2808;

typedef struct {
    float x;
    float y;
} CDStruct_6e3f967a;

typedef struct {
    _Bool _field1;
    unsigned long long _field2;
    struct *_field3;
} CDStruct_dbc1e4aa;

typedef struct {
    struct MTLIOScratchBufferPrivate *tqh_first;
    struct MTLIOScratchBufferPrivate **tqh_last;
} CDStruct_51606cd7;

typedef struct {
    CDStruct_da2e99ad _field1;
    CDStruct_da2e99ad _field2;
} CDStruct_caaed6bc;

#pragma mark Typedef'd Unions

// Ambiguous groups
typedef union {
    unsigned long long sampleCount;
    unsigned long long rasterSampleCount;
} CDUnion_a2c16d69;

