//
//     Generated by classdumpios 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class NSArray, NSCountedSet, NSError, NSFileAccessProcessManager, NSMutableArray, NSMutableDictionary, NSMutableOrderedSet, NSMutableSet, NSString, NSXPCConnection;
@protocol OS_dispatch_queue, OS_dispatch_semaphore;

__attribute__((visibility("hidden")))
@interface NSFileAccessClaim : NSObject
{
    NSXPCConnection *_client;	// 8 = 0x8
    NSString *_claimID;	// 16 = 0x10
    NSString *_purposeIDOrNil;	// 24 = 0x18
    _Bool _cameFromSuperarbiter;	// 32 = 0x20
    unsigned long long _blockageCount;	// 40 = 0x28
    _Bool _didWait;	// 48 = 0x30
    _Bool _isRevoked;	// 49 = 0x31
    NSMutableArray *_claimerBlockageReasons;	// 56 = 0x38
    NSError *_claimerError;	// 64 = 0x40
    NSMutableOrderedSet *_pendingClaims;	// 72 = 0x48
    NSMutableSet *_blockingClaims;	// 80 = 0x50
    NSCountedSet *_blockingReactorIDs;	// 88 = 0x58
    NSMutableArray *_providerCancellationProcedures;	// 96 = 0x60
    NSMutableDictionary *_reacquisitionProceduresByPresenterID;	// 104 = 0x68
    NSMutableArray *_revocationProcedures;	// 112 = 0x70
    NSMutableArray *_devaluationProcedures;	// 120 = 0x78
    NSMutableArray *_finishingProcedures;	// 128 = 0x80
    NSFileAccessProcessManager *_processManager;	// 136 = 0x88
    NSObject<OS_dispatch_semaphore> *_claimerWaiter;	// 144 = 0x90
    _Bool _hasInvokedClaimer;	// 152 = 0x98
    _Bool _shouldEnableMaterializationDuringAccessorBlock;	// 153 = 0x99
    id _claimerOrNil;	// 160 = 0xa0
    CDUnknownBlockType _serverClaimerOrNil;	// 168 = 0xa8
    NSMutableArray *_sandboxTokens;	// 176 = 0xb0
    NSObject<OS_dispatch_queue> *_arbiterQueue;	// 184 = 0xb8
    id _originatingReactorQueueID;	// 192 = 0xc0
    NSMutableDictionary *_fileHandlesForEvictionProtection;	// 200 = 0xc8
}

+ (_Bool)supportsSecureCoding;	// IMP=0x0010000000621dd8
+ (_Bool)canNewWriteOfItemAtLocation:(id)arg1 options:(unsigned long long)arg2 safelyOverlapExistingWriteOfItemAtLocation:(id)arg3 options:(unsigned long long)arg4;	// IMP=0x0010000000621865
+ (_Bool)canReadingItemAtLocation:(id)arg1 options:(unsigned long long)arg2 safelyOverlapNewWriting:(_Bool)arg3 ofItemAtLocation:(id)arg4 options:(unsigned long long)arg5;	// IMP=0x00100000006217fc
@property _Bool shouldEnableMaterializationDuringAccessorBlock; // @synthesize shouldEnableMaterializationDuringAccessorBlock=_shouldEnableMaterializationDuringAccessorBlock;
@property(readonly) NSObject<OS_dispatch_semaphore> *claimerWaiter; // @synthesize claimerWaiter=_claimerWaiter;
- (void)_protectIfNecessaryFileAtURL:(id)arg1 withOptions:(unsigned long long)arg2 forReading:(_Bool)arg3;	// IMP=0x0000000000628bb4
- (void)protectFilesAgainstEviction;	// IMP=0x0000000000628bae
- (_Bool)shouldCancelInsteadOfWaiting;	// IMP=0x0000000000628ba6
@property(readonly, copy) NSArray *allURLs;
- (void)disavowed;	// IMP=0x0000000000628a85
- (void)finished;	// IMP=0x0000000000628881
- (_Bool)shouldBeRevokedPriorToInvokingAccessor;	// IMP=0x0000000000628879
- (id)purposeIDOfClaimOnItemAtLocation:(id)arg1 forMessagingPresenter:(id)arg2;	// IMP=0x00000000006286b8
- (_Bool)checkIfSymbolicLinkAtURL:(id)arg1 withResolutionCount:(long long *)arg2 andIfSoThenReevaluateSelf:(CDUnknownBlockType)arg3;	// IMP=0x00000000006283e1
- (id)description;	// IMP=0x00000000006283c8
- (id)descriptionWithIndenting:(id)arg1;	// IMP=0x0000000000627f74
- (void)itemAtLocation:(id)arg1 wasReplacedByItemAtLocation:(id)arg2;	// IMP=0x0000000000627f6e
- (_Bool)isRevoked;	// IMP=0x0000000000627f65
- (_Bool)isGranted;	// IMP=0x0000000000627f4d
- (void)devalueOldClaim:(id)arg1;	// IMP=0x0000000000627f47
- (void)cancelled;	// IMP=0x0000000000627d88
- (void)devalueSelf;	// IMP=0x0000000000627aa5
- (void)revoked;	// IMP=0x0000000000627790
- (void)invokeClaimer;	// IMP=0x000000000062775f
- (void)prepareItemForUploadingFromURL:(id)arg1 thenContinue:(CDUnknownBlockType)arg2;	// IMP=0x00000000006266be
- (_Bool)_writeArchiveOfDirectoryAtURL:(id)arg1 toURL:(id)arg2 error:(id *)arg3;	// IMP=0x000000000062600c
- (_Bool)canAccessLocations:(id)arg1 forReading:(_Bool)arg2 error:(id *)arg3;	// IMP=0x0000000000625d0d
- (void)makePresentersOfItemAtLocation:(id)arg1 orContainedItem:(_Bool)arg2 relinquishUsingProcedureGetter:(CDUnknownBlockType)arg3;	// IMP=0x00000000006251e5
- (void)makeProviderOfItemAtLocation:(id)arg1 provideOrAttachPhysicalURLIfNecessaryForPurposeID:(id)arg2 writingOptions:(unsigned long long)arg3 thenContinue:(CDUnknownBlockType)arg4;	// IMP=0x000000000062506e
- (void)makeProviderOfItemAtLocation:(id)arg1 provideOrAttachPhysicalURLIfNecessaryForPurposeID:(id)arg2 readingOptions:(unsigned long long)arg3 thenContinue:(CDUnknownBlockType)arg4;	// IMP=0x0000000000624f05
- (void)makeProviderOfItemAtLocation:(id)arg1 providePhysicalURLThenContinue:(CDUnknownBlockType)arg2;	// IMP=0x0000000000624c36
- (void)makeProvidersProvideItemsForReadingLocations:(id)arg1 options:(unsigned long long *)arg2 andWritingLocationsIfNecessary:(id)arg3 options:(unsigned long long *)arg4 thenContinue:(CDUnknownBlockType)arg5;	// IMP=0x00000000006241e4
- (void)_checkIfMovingRequiresProvidingAmongWritingLocations:(id)arg1 options:(unsigned long long *)arg2 thenContinue:(CDUnknownBlockType)arg3;	// IMP=0x000000000062363a
- (void)makeProviderOfItemAtLocation:(id)arg1 provideIfNecessaryWithOptions:(unsigned long long)arg2 thenContinue:(CDUnknownBlockType)arg3;	// IMP=0x000000000062313e
- (_Bool)shouldMakeProviderProvideItemAtLocation:(id)arg1 withOptions:(unsigned long long)arg2;	// IMP=0x00000000006230d1
- (void)ensureProvidersOfItemsAtReadingLocations:(id)arg1 writingLocations:(id)arg2 thenContinue:(CDUnknownBlockType)arg3;	// IMP=0x0000000000622fe9
- (void)granted;	// IMP=0x0000000000622fe3
- (_Bool)isBlockedByWritingItemAtLocation:(id)arg1 options:(unsigned long long)arg2;	// IMP=0x0000000000622fdb
- (_Bool)isBlockedByReadingItemAtLocation:(id)arg1 options:(unsigned long long)arg2;	// IMP=0x0000000000622fd3
- (void)removePendingClaims:(id)arg1;	// IMP=0x0000000000622e59
- (id)pendingClaims;	// IMP=0x0000000000622e37
- (void)addPendingClaim:(id)arg1;	// IMP=0x0000000000622d99
- (void)evaluateNewClaim:(id)arg1;	// IMP=0x0000000000622c56
- (void)scheduleBlockedClaim:(id)arg1;	// IMP=0x00000000006229cc
- (void)givePriorityToClaim:(id)arg1;	// IMP=0x0000000000622816
- (_Bool)isBlockedByClaimWithPurposeID:(id)arg1;	// IMP=0x00000000006226db
- (_Bool)claimerInvokingIsBlockedByReactorWithID:(id)arg1;	// IMP=0x00000000006225a1
- (void)removeBlockingReactorID:(id)arg1;	// IMP=0x000000000062258b
- (void)addBlockingReactorID:(id)arg1;	// IMP=0x000000000062254e
- (void)whenFinishedPerformProcedure:(CDUnknownBlockType)arg1;	// IMP=0x00000000006224e4
- (void)whenDevaluedPerformProcedure:(CDUnknownBlockType)arg1;	// IMP=0x0000000000622483
- (void)whenRevokedPerformProcedure:(CDUnknownBlockType)arg1;	// IMP=0x0000000000622422
- (_Bool)evaluateSelfWithRootNode:(id)arg1 checkSubarbitrability:(_Bool)arg2;	// IMP=0x000000000062241a
- (id)claimerError;	// IMP=0x0000000000622403
- (void)setClaimerError:(id)arg1;	// IMP=0x00000000006223ce
- (void)unblockClaimerForReason:(id)arg1;	// IMP=0x000000000062235e
- (void)blockClaimerForReason:(id)arg1;	// IMP=0x0000000000622312
- (_Bool)didWait;	// IMP=0x0000000000622309
- (void)unblock;	// IMP=0x0000000000622260
- (void)block;	// IMP=0x000000000062222e
- (void)startObservingClientState;	// IMP=0x0000000000621fe6
- (_Bool)cameFromSuperarbiter;	// IMP=0x0000000000621fdd
- (void)setCameFromSuperarbiter;	// IMP=0x0000000000621fd3
- (void)acceptClaimFromClient:(id)arg1 arbiterQueue:(id)arg2 grantHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000000621f1f
- (void)prepareClaimForGrantingWithArbiterQueue:(id)arg1;	// IMP=0x0000000000621e4c
- (void)forwardUsingConnection:(id)arg1 crashHandler:(CDUnknownBlockType)arg2;	// IMP=0x0000000000621e46
- (int)clientProcessIdentifier;	// IMP=0x0000000000621e25
- (id)purposeID;	// IMP=0x0000000000621e0e
- (id)claimID;	// IMP=0x0000000000621df7
- (id)client;	// IMP=0x0000000000621de0
- (id)initWithCoder:(id)arg1;	// IMP=0x0000000000621cd5
- (void)encodeWithCoder:(id)arg1;	// IMP=0x0000000000621c2a
- (void)dealloc;	// IMP=0x0000000000621aed
- (id)initWithClient:(id)arg1 claimID:(id)arg2 purposeID:(id)arg3;	// IMP=0x0000000000621a45
- (void)_setupWithClaimID:(id)arg1 purposeID:(id)arg2 originatingReactorQueueID:(id)arg3;	// IMP=0x00000000006219af
- (_Bool)shouldInformProvidersAboutEndOfWriteWithOptions:(unsigned long long)arg1;	// IMP=0x0000000000621985
- (_Bool)shouldWritingWithOptions:(unsigned long long)arg1 causePresenterToRelinquish:(id)arg2;	// IMP=0x0000000000621975
- (_Bool)shouldReadingWithOptions:(unsigned long long)arg1 causePresenterToRelinquish:(id)arg2;	// IMP=0x00000000006218f6

@end

