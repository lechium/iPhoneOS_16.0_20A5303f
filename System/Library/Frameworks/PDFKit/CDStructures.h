//
//     Generated by classdumpios 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGAffineTransform {
    double a;
    double b;
    double c;
    double d;
    double tx;
    double ty;
};

struct CGDisplayListEntry;

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct PDFDetectedFormRow;

struct TextAnnotationAnimationProperties {
    struct CGRect visibleTextViewRectInScrollView;
    double animationDuration;
    double originDelta;
};

struct UIEdgeInsets {
    double top;
    double left;
    double bottom;
    double right;
};

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct mutex {
    struct _opaque_pthread_mutex_t {
        long long __sig;
        char __opaque[56];
    } __m_;
};

struct os_unfair_lock_s {
    unsigned int _os_unfair_lock_opaque;
};

struct vector<PDFDetectedFormRow, std::allocator<PDFDetectedFormRow>> {
    struct PDFDetectedFormRow *__begin_;
    struct PDFDetectedFormRow *__end_;
    struct __compressed_pair<PDFDetectedFormRow *, std::allocator<PDFDetectedFormRow>> {
        struct PDFDetectedFormRow *__value_;
    } __end_cap_;
};

struct vector<const CGDisplayListEntry *, std::allocator<const CGDisplayListEntry *>> {
    struct CGDisplayListEntry **_field1;
    struct CGDisplayListEntry **_field2;
    struct __compressed_pair<const CGDisplayListEntry **, std::allocator<const CGDisplayListEntry *>> {
        struct CGDisplayListEntry **_field1;
    } _field3;
};

#pragma mark Typedef'd Structures

// Template types
typedef struct vector<const CGDisplayListEntry *, std::allocator<const CGDisplayListEntry *>> {
    struct CGDisplayListEntry **_field1;
    struct CGDisplayListEntry **_field2;
    struct __compressed_pair<const CGDisplayListEntry **, std::allocator<const CGDisplayListEntry *>> {
        struct CGDisplayListEntry **_field1;
    } _field3;
} vector_dc32f2d1;

