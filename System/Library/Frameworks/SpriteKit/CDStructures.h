//
//     Generated by classdumpios 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double width;
    double height;
};

struct MaxRectTexturePacker;

struct PKPath;

struct SKCAction;

struct SKCAnimateMesh {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    id _field20;
    id _field21;
    id _field22;
    _Bool _field23;
};

struct SKCColorize {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    CDStruct_818bb265 _field20;
    float _field21;
    CDStruct_818bb265 _field22;
    float _field23;
    CDStruct_818bb265 _field24;
    float _field25;
    _Bool _field26;
};

struct SKCCustomAction {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    CDUnknownBlockType _field20;
};

struct SKCFade {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    float _field21;
    float _field22;
    _Bool _field23;
};

struct SKCFalloff {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    float _field21;
    float _field22;
    float _field23;
    float _field24;
    _Bool _field25;
    _Bool _field26;
};

struct SKCFollowPath {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    unsigned int _field21;
    struct PKPath *_field22;
    struct {
        float _field1;
        float _field2;
    } _field23;
    _Bool _field24;
    _Bool _field25;
};

struct SKCHide {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    _Bool _field20;
};

struct SKCMove {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    struct {
        float _field1;
        float _field2;
    } _field21;
    struct {
        float _field1;
        float _field2;
    } _field22;
    struct {
        float _field1;
        float _field2;
    } _field23;
    _Bool _field24;
    _Bool _field25;
    _Bool _field26;
    _Bool _field27;
};

struct SKCPlaySound {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    id _field20;
    _Bool _field21;
    _Bool _field22;
};

struct SKCRepeat {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    struct SKCAction *_field20;
    unsigned long long _field21;
    unsigned long long _field22;
    _Bool _field23;
};

struct SKCResize {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    struct {
        float _field1;
        float _field2;
    } _field21;
    struct {
        float _field1;
        float _field2;
    } _field22;
    struct {
        float _field1;
        float _field2;
    } _field23;
    _Bool _field24;
    _Bool _field25;
    _Bool _field26;
    _Bool _field27;
};

struct SKCRotate {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    float _field21;
    float _field22;
    float _field23;
    float _field24;
    float _field25;
    float _field26;
    float _field27;
    float _field28;
    float _field29;
    _Bool _field30;
    _Bool _field31;
    _Bool _field32;
    _Bool _field33;
    _Bool _field34;
    _Bool _field35;
};

struct SKCScale {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    float _field21;
    float _field22;
    float _field23;
    float _field24;
    float _field25;
    float _field26;
    float _field27;
    float _field28;
    _Bool _field29;
    _Bool _field30;
    _Bool _field31;
    _Bool _field32;
    _Bool _field33;
    struct CGSize _field34;
};

struct SKCSpeed {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    float _field21;
    float _field22;
    float _field23;
    float _field24;
    _Bool _field25;
    _Bool _field26;
};

struct SKCStrength {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    float _field21;
    float _field22;
    float _field23;
    float _field24;
    _Bool _field25;
    _Bool _field26;
};

struct SKCWait {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
};

struct __shared_weak_count;

struct __tree_end_node<std::__tree_node_base<void *>*> {
    void *__left_;
};

struct _opaque_pthread_mutex_t {
    long long __sig;
    char __opaque[56];
};

struct jet_texture;

struct map<unsigned int, double, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, double>>> {
    struct __tree<std::__value_type<unsigned int, double>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, double>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, double>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<unsigned int, double>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, double>, std::less<unsigned int>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<unsigned short, SKSpriteNode *, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, SKSpriteNode *>>> {
    struct __tree<std::__value_type<unsigned short, SKSpriteNode *>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, SKSpriteNode *>, std::less<unsigned short>, true>, std::allocator<std::__value_type<unsigned short, SKSpriteNode *>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<unsigned short, SKSpriteNode *>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, SKSpriteNode *>, std::less<unsigned short>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<unsigned short, double, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, double>>> {
    struct __tree<std::__value_type<unsigned short, double>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, double>, std::less<unsigned short>, true>, std::allocator<std::__value_type<unsigned short, double>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<unsigned short, double>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, double>, std::less<unsigned short>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct shared_ptr<MaxRectTexturePacker> {
    struct MaxRectTexturePacker *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<jet_texture> {
    struct jet_texture *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
} CDStruct_818bb265;

// Ambiguous groups
typedef struct {
    float _field1;
    float _field2;
} CDStruct_b2fbf00d;

typedef struct shared_ptr<MaxRectTexturePacker> {
    struct MaxRectTexturePacker *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_7747cbe3;

typedef struct shared_ptr<jet_texture> {
    struct jet_texture *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_bb77cfd9;

#pragma mark Named Unions

union _GLKVector2 {
    struct {
        float x;
        float y;
    } ;
    struct {
        float s;
        float t;
    } ;
    float v[2];
};

