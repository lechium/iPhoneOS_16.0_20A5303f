//
//     Generated by classdumpios 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class NSArray, NSDictionary, NSIndexSet, NSString, NSUndoManager, RTIInputSystemSourceSession, UIColor, UIGestureRecognizer, UIImage, UIInputContextHistory, UITextInputAssistantItem, UITextInputPasswordRules, UITextInteractionAssistant, UITextPosition, UITextRange, UIView, UIWKTextInteractionAssistant, UIWebFormAccessory, UIWebTouchEventsGestureRecognizer, WKBrowsingContextController, WKDateTimeInputControl, WKFormSelectControl, _UISupplementalLexicon;
@protocol NSObject><NSCopying, UITextInputDelegate, UITextInputSuggestionDelegate, UITextInputTokenizer, WKFormControl;

__attribute__((visibility("hidden")))
@interface WKContentView
{
    struct RefPtr<WebKit::WebPageProxy, WTF::RawPtrTraits<WebKit::WebPageProxy>, WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>> _page;	// 8 = 0x8
    struct WeakObjCPtr<WKWebView> _webView;	// 16 = 0x10
    struct RetainPtr<WKDeferringGestureRecognizer> _touchStartDeferringGestureRecognizerForImmediatelyResettableGestures;	// 24 = 0x18
    struct RetainPtr<WKDeferringGestureRecognizer> _touchStartDeferringGestureRecognizerForDelayedResettableGestures;	// 32 = 0x20
    struct RetainPtr<WKDeferringGestureRecognizer> _touchStartDeferringGestureRecognizerForSyntheticTapGestures;	// 40 = 0x28
    struct RetainPtr<WKDeferringGestureRecognizer> _touchEndDeferringGestureRecognizerForImmediatelyResettableGestures;	// 48 = 0x30
    struct RetainPtr<WKDeferringGestureRecognizer> _touchEndDeferringGestureRecognizerForDelayedResettableGestures;	// 56 = 0x38
    struct RetainPtr<WKDeferringGestureRecognizer> _touchEndDeferringGestureRecognizerForSyntheticTapGestures;	// 64 = 0x40
    struct optional<WTF::HashSet<WTF::RetainPtr<WKDeferringGestureRecognizer>>> _failedTouchStartDeferringGestures;	// 72 = 0x48
    struct RetainPtr<WKDeferringGestureRecognizer> _imageAnalysisDeferringGestureRecognizer;	// 88 = 0x58
    struct unique_ptr<WebKit::GestureRecognizerConsistencyEnforcer, std::default_delete<WebKit::GestureRecognizerConsistencyEnforcer>> _gestureRecognizerConsistencyEnforcer;	// 96 = 0x60
    struct RetainPtr<UIWebTouchEventsGestureRecognizer> _touchEventGestureRecognizer;	// 104 = 0x68
    _Bool _touchEventsCanPreventNativeGestures;	// 112 = 0x70
    _Bool _preventsPanningInXAxis;	// 113 = 0x71
    _Bool _preventsPanningInYAxis;	// 114 = 0x72
    struct RetainPtr<WKSyntheticTapGestureRecognizer> _singleTapGestureRecognizer;	// 120 = 0x78
    struct RetainPtr<WKHighlightLongPressGestureRecognizer> _highlightLongPressGestureRecognizer;	// 128 = 0x80
    struct RetainPtr<UILongPressGestureRecognizer> _longPressGestureRecognizer;	// 136 = 0x88
    struct RetainPtr<WKSyntheticTapGestureRecognizer> _doubleTapGestureRecognizer;	// 144 = 0x90
    struct RetainPtr<UITapGestureRecognizer> _nonBlockingDoubleTapGestureRecognizer;	// 152 = 0x98
    struct RetainPtr<UITapGestureRecognizer> _doubleTapGestureRecognizerForDoubleClick;	// 160 = 0xa0
    struct RetainPtr<UITapGestureRecognizer> _twoFingerDoubleTapGestureRecognizer;	// 168 = 0xa8
    struct RetainPtr<UITapGestureRecognizer> _twoFingerSingleTapGestureRecognizer;	// 176 = 0xb0
    struct RetainPtr<WKInspectorNodeSearchGestureRecognizer> _inspectorNodeSearchGestureRecognizer;	// 184 = 0xb8
    struct RetainPtr<WKTouchActionGestureRecognizer> _touchActionGestureRecognizer;	// 192 = 0xc0
    struct RetainPtr<UISwipeGestureRecognizer> _touchActionLeftSwipeGestureRecognizer;	// 200 = 0xc8
    struct RetainPtr<UISwipeGestureRecognizer> _touchActionRightSwipeGestureRecognizer;	// 208 = 0xd0
    struct RetainPtr<UISwipeGestureRecognizer> _touchActionUpSwipeGestureRecognizer;	// 216 = 0xd8
    struct RetainPtr<UISwipeGestureRecognizer> _touchActionDownSwipeGestureRecognizer;	// 224 = 0xe0
    struct RetainPtr<WKMouseGestureRecognizer> _mouseGestureRecognizer;	// 232 = 0xe8
    struct RetainPtr<WKMouseGestureRecognizer> _alternateMouseGestureRecognizer;	// 240 = 0xf0
    unsigned char _mouseEventPolicy;	// 248 = 0xf8
    struct RetainPtr<UIIndirectScribbleInteraction> _scribbleInteraction;	// 256 = 0x100
    struct RetainPtr<UIPointerInteraction> _pointerInteraction;	// 264 = 0x108
    _Bool _hasOutstandingPointerInteractionRequest;	// 272 = 0x110
    struct optional<std::pair<WebKit::InteractionInformationRequest, WTF::BlockPtr<void (UIPointerRegion *)>>> _deferredPointerInteractionRequest;	// 280 = 0x118
    struct RetainPtr<UIWKTextInteractionAssistant> _textInteractionAssistant;	// 312 = 0x138
    struct OptionSet<WebKit::SuppressSelectionAssistantReason> _suppressSelectionAssistantReasons;	// 320 = 0x140
    struct RetainPtr<UITextInputTraits> _traits;	// 328 = 0x148
    struct RetainPtr<UIWebFormAccessory> _formAccessoryView;	// 336 = 0x150
    struct RetainPtr<_UIHighlightView> _highlightView;	// 344 = 0x158
    struct RetainPtr<UIView> _interactionViewsContainerView;	// 352 = 0x160
    RetainPtr_f11d553d _contextMenuHintContainerView;	// 360 = 0x168
    struct WeakObjCPtr<UIScrollView> _scrollViewForTargetedPreview;	// 368 = 0x170
    struct CGPoint _scrollViewForTargetedPreviewInitialOffset;	// 376 = 0x178
    RetainPtr_f11d553d _dragPreviewContainerView;	// 392 = 0x188
    RetainPtr_f11d553d _dropPreviewContainerView;	// 400 = 0x190
    struct RetainPtr<NSString> _markedText;	// 408 = 0x198
    struct RetainPtr<WKActionSheetAssistant> _actionSheetAssistant;	// 416 = 0x1a0
    struct RetainPtr<WKAirPlayRoutePicker> _airPlayRoutePicker;	// 424 = 0x1a8
    struct RetainPtr<WKFormInputSession> _formInputSession;	// 432 = 0x1b0
    struct RetainPtr<WKFileUploadPanel> _fileUploadPanel;	// 440 = 0x1b8
    // Error: parsing type: '{FrameInfoData="isMainFrame"B"request"{ResourceRequest="m_url"{URL="m_string"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"m_isValid"b1"m_protocolIsInHTTPFamily"b1"m_cannotBeABaseURL"b1"m_portLength"b3"m_schemeEnd"b26"m_userStart"I"m_userEnd"I"m_passwordEnd"I"m_hostEnd"I"m_pathAfterLastSlash"I"m_pathEnd"I"m_queryEnd"I}"m_timeoutInterval"d"m_firstPartyForCookies"{URL="m_string"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"m_isValid"b1"m_protocolIsInHTTPFamily"b1"m_cannotBeABaseURL"b1"m_portLength"b3"m_schemeEnd"b26"m_userStart"I"m_userEnd"I"m_passwordEnd"I"m_hostEnd"I"m_pathAfterLastSlash"I"m_pathEnd"I"m_queryEnd"I}"m_httpMethod"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"m_initiatorIdentifier"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"m_cachePartition"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"m_httpHeaderFields"{HTTPHeaderMap="m_commonHeaders"{Vector<WebCore::HTTPHeaderMap::CommonHeader, 0UL, WTF::CrashOnOverflow, 6UL, WTF::FastMalloc>="m_buffer"^{CommonHeader}"m_capacity"I"m_size"I}"m_uncommonHeaders"{Vector<WebCore::HTTPHeaderMap::UncommonHeader, 0UL, WTF::CrashOnOverflow, 0UL, WTF::FastMalloc>="m_buffer"^{UncommonHeader}"m_capacity"I"m_size"I}}"m_responseContentDispositionEncodingFallbackArray"{Vector<WTF::String, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc>="m_buffer"^{String}"m_capacity"I"m_size"I}"m_httpBody"{RefPtr<WebCore::FormData, WTF::RawPtrTraits<WebCore::FormData>, WTF::DefaultRefDerefTraits<WebCore::FormData>>="m_ptr"^{FormData}}"m_cachePolicy"C"m_sameSiteDisposition"C"m_priority"C"m_requester"C"m_inspectorInitiatorNodeIdentifier"{optional<int>=""(?="__null_state_"c"__val_"i)"__engaged_"B}"m_allowCookies"b1"m_resourceRequestUpdated"b1"m_platformRequestUpdated"b1"m_resourceRequestBodyUpdated"b1"m_platformRequestBodyUpdated"b1"m_hiddenFromInspector"b1"m_isTopSite"b1"m_isAppInitiated"b1"m_systemPreviewInfo"{optional<WebCore::SystemPreviewInfo>=""(?="__null_state_"c"__val_"{SystemPreviewInfo="element"{ElementContext="boundingRect"{FloatRect="m_location"{FloatPoint="m_x"f"m_y"f}"m_size"{FloatSize="m_width"f"m_height"f}}"webPageIdentifier"{ObjectIdentifier<WebCore::PageIdentifierType>="m_identifier"Q}"documentIdentifier"{ProcessQualified<WTF::UUID>="m_object"{UUID="m_data"T}"m_processIdentifier"{ObjectIdentifier<WebCore::ProcessIdentifierType>="m_identifier"Q}}"elementIdentifier"{ObjectIdentifier<WebCore::ElementIdentifierType>="m_identifier"Q}}"previewRect"{IntRect="m_location"{IntPoint="m_x"i"m_y"i}"m_size"{IntSize="m_width"i"m_height"i}}"isPreview"B})"__engaged_"B}"m_nsRequest"{RetainPtr<NSURLRequest>="m_ptr"^v}}"securityOrigin"{SecurityOriginData="protocol"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"host"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"port"{optional<unsigned short>=""(?="__null_state_"c"__val_"S)"__engaged_"B}}"frameName"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"frameID"{optional<WTF::ObjectIdentifier<WebCore::FrameIdentifierType>>=""(?="__null_state_"c"__val_"{ObjectIdentifier<WebCore::FrameIdentifierType>="m_identifier"Q})"__engaged_"B}"parentFrameID"{optional<WTF::ObjectIdentifier<WebCore::FrameIdentifierType>>=""(?="__null_state_"c"__val_"{ObjectIdentifier<WebCore::FrameIdentifierType>="m_identifier"Q})"__engaged_"B}}', name: _frameInfoForFileUploadPanel
    struct RetainPtr<WKShareSheet> _shareSheet;	// 864 = 0x360
    struct RetainPtr<WKContactPicker> _contactPicker;	// 872 = 0x368
    struct RetainPtr<UIGestureRecognizer> _previewGestureRecognizer;	// 880 = 0x370
    struct RetainPtr<UIGestureRecognizer> _previewSecondaryGestureRecognizer;	// 888 = 0x378
    struct Vector<bool, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> _focusStateStack;	// 896 = 0x380
    struct RetainPtr<UIContextMenuInteraction> _contextMenuInteraction;	// 912 = 0x390
    struct RetainPtr<WKContextMenuElementInfo> _contextMenuElementInfo;	// 920 = 0x398
    _Bool _showLinkPreviews;	// 928 = 0x3a0
    struct RetainPtr<UIViewController> _contextMenuLegacyPreviewController;	// 936 = 0x3a8
    struct RetainPtr<UIMenu> _contextMenuLegacyMenu;	// 944 = 0x3b0
    _Bool _contextMenuHasRequestedLegacyData;	// 952 = 0x3b8
    _Bool _contextMenuActionProviderDelegateNeedsOverride;	// 953 = 0x3b9
    _Bool _isDisplayingContextMenuWithAnimation;	// 954 = 0x3ba
    struct RetainPtr<UIPreviewItemController> _previewItemController;	// 960 = 0x3c0
    struct RefPtr<WebCore::TextIndicator, WTF::RawPtrTraits<WebCore::TextIndicator>, WTF::DefaultRefDerefTraits<WebCore::TextIndicator>> _textIndicator;	// 968 = 0x3c8
    struct RetainPtr<WebTextIndicatorLayer> _textIndicatorLayer;	// 976 = 0x3d0
    struct RetainPtr<UITargetedPreview> _contextMenuInteractionTargetedPreview;	// 984 = 0x3d8
    struct unique_ptr<WebKit::SmartMagnificationController, std::default_delete<WebKit::SmartMagnificationController>> _smartMagnificationController;	// 992 = 0x3e0
    struct WeakObjCPtr<id<UITextInputDelegate>> _inputDelegate;	// 1000 = 0x3e8
    ObjectIdentifier_e7ec9792 _latestTapID;	// 1008 = 0x3f0
    struct TapHighlightInformation _tapHighlightInformation;	// 1016 = 0x3f8
    struct WebAutocorrectionContext _lastAutocorrectionContext;	// 1080 = 0x438
    struct WKAutoCorrectionData _autocorrectionData;	// 1128 = 0x468
    // Error: parsing type: '{InteractionInformationAtPosition="request"{InteractionInformationRequest="point"{IntPoint="m_x"i"m_y"i}"includeSnapshot"B"includeLinkIndicator"B"includeCaretContext"B"includeHasDoubleClickHandler"B"includeImageData"B"linkIndicatorShouldHaveLegacyMargins"B"disallowUserAgentShadowContent"B}"canBeValid"B"nodeAtPositionHasDoubleClickHandler"{optional<bool>=""(?="__null_state_"c"__val_"B)"__engaged_"B}"selectability"C"isSelected"B"prefersDraggingOverTextSelection"B"isNearMarkedText"B"touchCalloutEnabled"B"isLink"B"isImage"B"isAttachment"B"isAnimatedImage"B"isPausedVideo"B"isElement"B"isContentEditable"B"containerScrollingNodeID"Q"isDataDetectorLink"B"preventTextInteraction"B"elementContainsImageOverlay"B"shouldNotUseIBeamInEditableContent"B"isImageOverlayText"B"isVerticalWritingMode"B"adjustedPointForNodeRespondingToClickEvents"{FloatPoint="m_x"f"m_y"f}"url"{URL="m_string"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"m_isValid"b1"m_protocolIsInHTTPFamily"b1"m_cannotBeABaseURL"b1"m_portLength"b3"m_schemeEnd"b26"m_userStart"I"m_userEnd"I"m_passwordEnd"I"m_hostEnd"I"m_pathAfterLastSlash"I"m_pathEnd"I"m_queryEnd"I}"imageURL"{URL="m_string"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"m_isValid"b1"m_protocolIsInHTTPFamily"b1"m_cannotBeABaseURL"b1"m_portLength"b3"m_schemeEnd"b26"m_userStart"I"m_userEnd"I"m_passwordEnd"I"m_hostEnd"I"m_pathAfterLastSlash"I"m_pathEnd"I"m_queryEnd"I}"imageMIMEType"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"title"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"idAttribute"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"bounds"{IntRect="m_location"{IntPoint="m_x"i"m_y"i}"m_size"{IntSize="m_width"i"m_height"i}}"image"{RefPtr<WebKit::ShareableBitmap, WTF::RawPtrTraits<WebKit::ShareableBitmap>, WTF::DefaultRefDerefTraits<WebKit::ShareableBitmap>>="m_ptr"^{ShareableBitmap}}"textBefore"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"textAfter"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"caretLength"f"lineCaretExtent"{FloatRect="m_location"{FloatPoint="m_x"f"m_y"f}"m_size"{FloatSize="m_width"f"m_height"f}}"cursor"{optional<WebCore::Cursor>=""(?="__null_state_"c"__val_"{Cursor="m_type"i"m_image"{RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>>="m_ptr"^{Image}}"m_hotSpot"{IntPoint="m_x"i"m_y"i}"m_platformCursor"^v})"__engaged_"B}"linkIndicator"{TextIndicatorData="selectionRectInRootViewCoordinates"{FloatRect="m_location"{FloatPoint="m_x"f"m_y"f}"m_size"{FloatSize="m_width"f"m_height"f}}"textBoundingRectInRootViewCoordinates"{FloatRect="m_location"{FloatPoint="m_x"f"m_y"f}"m_size"{FloatSize="m_width"f"m_height"f}}"contentImageWithoutSelectionRectInRootViewCoordinates"{FloatRect="m_location"{FloatPoint="m_x"f"m_y"f}"m_size"{FloatSize="m_width"f"m_height"f}}"textRectsInBoundingRectCoordinates"{Vector<WebCore::FloatRect, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc>="m_buffer"^{FloatRect}"m_capacity"I"m_size"I}"contentImageScaleFactor"f"contentImageWithHighlight"{RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>>="m_ptr"^{Image}}"contentImageWithoutSelection"{RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>>="m_ptr"^{Image}}"contentImage"{RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>>="m_ptr"^{Image}}"estimatedBackgroundColor"{Color="m_colorAndFlags"Q}"presentationTransition"C"options"{OptionSet<WebCore::TextIndicatorOption>="m_storage"S}}"dataDetectorIdentifier"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"dataDetectorResults"{RetainPtr<NSArray>="m_ptr"^v}"dataDetectorBounds"{IntRect="m_location"{IntPoint="m_x"i"m_y"i}"m_size"{IntSize="m_width"i"m_height"i}}"elementContext"{optional<WebCore::ElementContext>=""(?="__null_state_"c"__val_"{ElementContext="boundingRect"{FloatRect="m_location"{FloatPoint="m_x"f"m_y"f}"m_size"{FloatSize="m_width"f"m_height"f}}"webPageIdentifier"{ObjectIdentifier<WebCore::PageIdentifierType>="m_identifier"Q}"documentIdentifier"{ProcessQualified<WTF::UUID>="m_object"{UUID="m_data"T}"m_processIdentifier"{ObjectIdentifier<WebCore::ProcessIdentifierType>="m_identifier"Q}}"elementIdentifier"{ObjectIdentifier<WebCore::ElementIdentifierType>="m_identifier"Q}})"__engaged_"B}"hostImageOrVideoElementContext"{optional<WebCore::ElementContext>=""(?="__null_state_"c"__val_"{ElementContext="boundingRect"{FloatRect="m_location"{FloatPoint="m_x"f"m_y"f}"m_size"{FloatSize="m_width"f"m_height"f}}"webPageIdentifier"{ObjectIdentifier<WebCore::PageIdentifierType>="m_identifier"Q}"documentIdentifier"{ProcessQualified<WTF::UUID>="m_object"{UUID="m_data"T}"m_processIdentifier"{ObjectIdentifier<WebCore::ProcessIdentifierType>="m_identifier"Q}}"elementIdentifier"{ObjectIdentifier<WebCore::ElementIdentifierType>="m_identifier"Q}})"__engaged_"B}}', name: _positionInformation
    // Error: parsing type: '{FocusedElementInformation="interactionRect"{IntRect="m_location"{IntPoint="m_x"i"m_y"i}"m_size"{IntSize="m_width"i"m_height"i}}"elementContext"{ElementContext="boundingRect"{FloatRect="m_location"{FloatPoint="m_x"f"m_y"f}"m_size"{FloatSize="m_width"f"m_height"f}}"webPageIdentifier"{ObjectIdentifier<WebCore::PageIdentifierType>="m_identifier"Q}"documentIdentifier"{ProcessQualified<WTF::UUID>="m_object"{UUID="m_data"T}"m_processIdentifier"{ObjectIdentifier<WebCore::ProcessIdentifierType>="m_identifier"Q}}"elementIdentifier"{ObjectIdentifier<WebCore::ElementIdentifierType>="m_identifier"Q}}"lastInteractionLocation"{IntPoint="m_x"i"m_y"i}"minimumScaleFactor"d"maximumScaleFactor"d"maximumScaleFactorIgnoringAlwaysScalable"d"nodeFontSize"d"hasNextNode"B"nextNodeRect"{IntRect="m_location"{IntPoint="m_x"i"m_y"i}"m_size"{IntSize="m_width"i"m_height"i}}"hasPreviousNode"B"previousNodeRect"{IntRect="m_location"{IntPoint="m_x"i"m_y"i}"m_size"{IntSize="m_width"i"m_height"i}}"isAutocorrect"B"isRTL"B"isMultiSelect"B"isReadOnly"B"allowsUserScaling"B"allowsUserScalingIgnoringAlwaysScalable"B"insideFixedPosition"B"autocapitalizeType"C"elementType"i"inputMode"C"enterKeyHint"C"formAction"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"selectOptions"{Vector<WebKit::OptionItem, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc>="m_buffer"^{OptionItem}"m_capacity"I"m_size"I}"selectedIndex"i"value"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"valueAsNumber"d"title"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"acceptsAutofilledLoginCredentials"B"isAutofillableUsernameField"B"representingPageURL"{URL="m_string"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"m_isValid"b1"m_protocolIsInHTTPFamily"b1"m_cannotBeABaseURL"b1"m_portLength"b3"m_schemeEnd"b26"m_userStart"I"m_userEnd"I"m_passwordEnd"I"m_hostEnd"I"m_pathAfterLastSlash"I"m_pathEnd"I"m_queryEnd"I}"autofillFieldName"i"placeholder"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"label"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"ariaLabel"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}"hasSuggestions"B"isFocusingWithDataListDropdown"B"colorValue"{Color="m_colorAndFlags"Q}"suggestedColors"{Vector<WebCore::Color, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc>="m_buffer"^{Color}"m_capacity"I"m_size"I}"shouldSynthesizeKeyEventsForEditing"B"isSpellCheckingEnabled"B"shouldAvoidResizingWhenInputViewBoundsChange"B"shouldAvoidScrollingWhenFocusedContentIsVisible"B"shouldUseLegacySelectPopoverDismissalBehaviorInDataActivation"B"isFocusingWithValidationMessage"B"preventScroll"B"identifier"{MonotonicObjectIdentifier<WebKit::FocusedElementInformationIdentifierType>="m_identifier"Q}"containerScrollingNodeID"Q}', name: _focusedElementInformation
    struct RetainPtr<NSObject<WKFormPeripheral>> _inputPeripheral;	// 2192 = 0x890
    struct BlockPtr<void (WebEvent *, bool)> _keyWebEventHandler;	// 2200 = 0x898
    struct CGPoint _lastInteractionLocation;	// 2208 = 0x8a0
    struct MonotonicObjectIdentifier<WebKit::TransactionIDType> _layerTreeTransactionIdAtLastInteractionStart;	// 2224 = 0x8b0
    struct WKSelectionDrawingInfo _lastSelectionDrawingInfo;	// 2232 = 0x8b8
    struct RetainPtr<WKTextRange> _cachedSelectedTextRange;	// 2296 = 0x8f8
    struct optional<WebKit::InteractionInformationRequest> _lastOutstandingPositionInformationRequest;	// 2304 = 0x900
    unsigned long long _positionInformationCallbackDepth;	// 2328 = 0x918
    struct Vector<std::optional<std::pair<WebKit::InteractionInformationRequest, WTF::BlockPtr<void (WebKit::InteractionInformationAtPosition)>>>, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> _pendingPositionInformationHandlers;	// 2336 = 0x920
    struct unique_ptr<WebKit::InputViewUpdateDeferrer, std::default_delete<WebKit::InputViewUpdateDeferrer>> _inputViewUpdateDeferrer;	// 2352 = 0x930
    struct RetainPtr<WKKeyboardScrollViewAnimator> _keyboardScrollingAnimator;	// 2360 = 0x938
    struct Vector<WTF::BlockPtr<void ()>, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> _actionsToPerformAfterEditorStateUpdate;	// 2368 = 0x940
    struct RetainPtr<UIView<WKFormControl>> _dataListTextSuggestionsInputView;	// 2384 = 0x950
    struct RetainPtr<NSArray<UITextSuggestion *>> _dataListTextSuggestions;	// 2392 = 0x958
    struct WeakObjCPtr<WKDataListSuggestionsControl> _dataListSuggestionsControl;	// 2400 = 0x960
    _Bool _isEditable;	// 2408 = 0x968
    _Bool _showingTextStyleOptions;	// 2409 = 0x969
    _Bool _hasValidPositionInformation;	// 2410 = 0x96a
    _Bool _isTapHighlightIDValid;	// 2411 = 0x96b
    _Bool _isTapHighlightFading;	// 2412 = 0x96c
    _Bool _potentialTapInProgress;	// 2413 = 0x96d
    _Bool _isDoubleTapPending;	// 2414 = 0x96e
    _Bool _longPressCanClick;	// 2415 = 0x96f
    _Bool _hasTapHighlightForPotentialTap;	// 2416 = 0x970
    _Bool _selectionNeedsUpdate;	// 2417 = 0x971
    _Bool _shouldRestoreSelection;	// 2418 = 0x972
    _Bool _usingGestureForSelection;	// 2419 = 0x973
    _Bool _inspectorNodeSearchEnabled;	// 2420 = 0x974
    _Bool _isChangingFocusUsingAccessoryTab;	// 2421 = 0x975
    _Bool _didAccessoryTabInitiateFocus;	// 2422 = 0x976
    _Bool _isExpectingFastSingleTapCommit;	// 2423 = 0x977
    _Bool _showDebugTapHighlightsForFastClicking;	// 2424 = 0x978
    _Bool _textInteractionDidChangeFocusedElement;	// 2425 = 0x979
    _Bool _treatAsContentEditableUntilNextEditorStateUpdate;	// 2426 = 0x97a
    _Bool _isWaitingOnPositionInformation;	// 2427 = 0x97b
    _Bool _autocorrectionContextNeedsUpdate;	// 2428 = 0x97c
    int _commitPotentialTapPointerId;	// 2432 = 0x980
    _Bool _keyboardDidRequestDismissal;	// 2436 = 0x984
    _Bool _candidateViewNeedsUpdate;	// 2437 = 0x985
    _Bool _seenHardwareKeyDownInNonEditableElement;	// 2438 = 0x986
    _Bool _becomingFirstResponder;	// 2439 = 0x987
    _Bool _resigningFirstResponder;	// 2440 = 0x988
    _Bool _needsDeferredEndScrollingSelectionUpdate;	// 2441 = 0x989
    _Bool _isChangingFocus;	// 2442 = 0x98a
    _Bool _isFocusingElementWithKeyboard;	// 2443 = 0x98b
    _Bool _isBlurringFocusedElement;	// 2444 = 0x98c
    _Bool _isRelinquishingFirstResponderToFocusedElement;	// 2445 = 0x98d
    _Bool _unsuppressSoftwareKeyboardAfterNextAutocorrectionContextUpdate;	// 2446 = 0x98e
    _Bool _isUnsuppressingSoftwareKeyboardUsingLastAutocorrectionContext;	// 2447 = 0x98f
    _Bool _waitingForKeyboardToStartAnimatingInAfterElementFocus;	// 2448 = 0x990
    _Bool _shouldZoomToFocusRectAfterShowingKeyboard;	// 2449 = 0x991
    _Bool _focusRequiresStrongPasswordAssistance;	// 2450 = 0x992
    _Bool _waitingForEditDragSnapshot;	// 2451 = 0x993
    long long _dropAnimationCount;	// 2456 = 0x998
    _Bool _hasSetUpInteractions;	// 2464 = 0x9a0
    unsigned long long _ignoreSelectionCommandFadeCount;	// 2472 = 0x9a8
    unsigned long long _activeTextInteractionCount;	// 2480 = 0x9b0
    long long _suppressNonEditableSingleTapTextInteractionCount;	// 2488 = 0x9b8
    struct CompletionHandler<void (WebCore::DOMPasteAccessResponse)> _domPasteRequestHandler;	// 2496 = 0x9c0
    struct optional<WebCore::DOMPasteAccessCategory> _domPasteRequestCategory;	// 2504 = 0x9c8
    struct BlockPtr<void (UIWKAutocorrectionContext *)> _pendingAutocorrectionContextHandler;	// 2512 = 0x9d0
    struct CompletionHandler<void ()> _pendingRunModalJavaScriptDialogCallback;	// 2520 = 0x9d8
    struct RetainPtr<NSDictionary> _additionalContextForStrongPasswordAssistance;	// 2528 = 0x9e0
    struct optional<int> _lastInsertedCharacterToOverrideCharacterBeforeSelection;	// 2536 = 0x9e8
    unsigned int _selectionChangeNestingLevel;	// 2544 = 0x9f0
    struct DragDropInteractionState _dragDropInteractionState;	// 2552 = 0x9f8
    struct RetainPtr<UIDragInteraction> _dragInteraction;	// 2992 = 0xbb0
    struct RetainPtr<UIDropInteraction> _dropInteraction;	// 3000 = 0xbb8
    _Bool _isAnimatingDragCancel;	// 3008 = 0xbc0
    _Bool _shouldRestoreCalloutBarAfterDrop;	// 3009 = 0xbc1
    struct RetainPtr<UIView> _visibleContentViewSnapshot;	// 3016 = 0xbc8
    struct RetainPtr<UIView> _unselectedContentSnapshot;	// 3024 = 0xbd0
    struct RetainPtr<_UITextDragCaretView> _editDropCaretView;	// 3032 = 0xbd8
    struct BlockPtr<void ()> _actionToPerformAfterReceivingEditDragSnapshot;	// 3040 = 0xbe0
    struct RetainPtr<WKImageAnalysisGestureRecognizer> _imageAnalysisGestureRecognizer;	// 3048 = 0xbe8
    struct RetainPtr<UILongPressGestureRecognizer> _imageAnalysisTimeoutGestureRecognizer;	// 3056 = 0xbf0
    struct optional<WTF::ObjectIdentifier<WebKit::ImageAnalysisRequestIdentifierType>> _pendingImageAnalysisRequestIdentifier;	// 3064 = 0xbf8
    // Error: parsing type: '{optional<WebCore::ElementContext>=""(?="__null_state_"c"__val_"{ElementContext="boundingRect"{FloatRect="m_location"{FloatPoint="m_x"f"m_y"f}"m_size"{FloatSize="m_width"f"m_height"f}}"webPageIdentifier"{ObjectIdentifier<WebCore::PageIdentifierType>="m_identifier"Q}"documentIdentifier"{ProcessQualified<WTF::UUID>="m_object"{UUID="m_data"T}"m_processIdentifier"{ObjectIdentifier<WebCore::ProcessIdentifierType>="m_identifier"Q}}"elementIdentifier"{ObjectIdentifier<WebCore::ElementIdentifierType>="m_identifier"Q}})"__engaged_"B}', name: _elementPendingImageAnalysis
    struct Vector<WTF::BlockPtr<void (WebKit::ProceedWithTextSelectionInImage)>, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> _actionsToPerformAfterPendingImageAnalysis;	// 3184 = 0xc70
    struct RetainPtr<UIMenu> _contextMenuForMachineReadableCode;	// 3200 = 0xc80
    _Bool _contextMenuWasTriggeredByImageAnalysisTimeout;	// 3208 = 0xc88
    _Bool _isProceedingWithTextSelectionInImage;	// 3209 = 0xc89
    struct RetainPtr<id> _imageAnalyzer;	// 3216 = 0xc90
    struct RetainPtr<QLPreviewController> _visualSearchPreviewController;	// 3224 = 0xc98
    RetainPtr_337fe565 _visualSearchPreviewImage;	// 3232 = 0xca0
    struct RetainPtr<NSURL> _visualSearchPreviewImageURL;	// 3240 = 0xca8
    struct RetainPtr<NSString> _visualSearchPreviewTitle;	// 3248 = 0xcb0
    struct CGRect _visualSearchPreviewImageBounds;	// 3256 = 0xcb8
    _Bool _hasSelectableTextInImage;	// 3288 = 0xcd8
    _Bool _hasVisualSearchResults;	// 3289 = 0xcd9
    unsigned int _fullscreenVideoExtractionRequestIdentifier;	// 3292 = 0xcdc
    struct RetainPtr<VKCImageAnalysisInteraction> _imageAnalysisInteraction;	// 3296 = 0xce0
    struct RetainPtr<NSMutableSet<UIButton *>> _imageAnalysisActionButtons;	// 3304 = 0xce8
    struct FloatRect _imageAnalysisInteractionBounds;	// 3312 = 0xcf0
    // Error: parsing type: '{optional<WebKit::ImageAnalysisMarkupData>=""(?="__null_state_"c"__val_"{ImageAnalysisMarkupData="element"{ElementContext="boundingRect"{FloatRect="m_location"{FloatPoint="m_x"f"m_y"f}"m_size"{FloatSize="m_width"f"m_height"f}}"webPageIdentifier"{ObjectIdentifier<WebCore::PageIdentifierType>="m_identifier"Q}"documentIdentifier"{ProcessQualified<WTF::UUID>="m_object"{UUID="m_data"T}"m_processIdentifier"{ObjectIdentifier<WebCore::ProcessIdentifierType>="m_identifier"Q}}"elementIdentifier"{ObjectIdentifier<WebCore::ElementIdentifierType>="m_identifier"Q}}"image"{RetainPtr<CGImage *>="m_ptr"^v}"preferredMIMEType"{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}})"__engaged_"B}', name: _imageAnalysisMarkupData
    RetainPtr_c27edd19 _croppedImageResult;	// 3440 = 0xd70
    struct unique_ptr<WebKit::PageClientImpl, std::default_delete<WebKit::PageClientImpl>> _pageClient;	// 3448 = 0xd78
    struct RetainPtr<WKBrowsingContextController> _browsingContextController;	// 3456 = 0xd80
    struct RetainPtr<UIView> _rootContentView;	// 3464 = 0xd88
    struct RetainPtr<UIView> _fixedClippingView;	// 3472 = 0xd90
    struct RetainPtr<WKInspectorIndicationView> _inspectorIndicationView;	// 3480 = 0xd98
    struct RetainPtr<WKInspectorHighlightView> _inspectorHighlightView;	// 3488 = 0xda0
    struct RetainPtr<_UILayerHostView> _visibilityPropagationViewForWebProcess;	// 3496 = 0xda8
    struct RetainPtr<_UILayerHostView> _visibilityPropagationViewForGPUProcess;	// 3504 = 0xdb0
    struct HistoricalVelocityData _historicalKinematicData;	// 3512 = 0xdb8
    struct RetainPtr<NSUndoManager> _undoManager;	// 3600 = 0xe10
    struct RetainPtr<WKQuirkyNSUndoManager> _quirkyUndoManager;	// 3608 = 0xe18
    struct unique_ptr<WTF::BinarySemaphore, std::default_delete<WTF::BinarySemaphore>> _pdfPrintCompletionSemaphore;	// 3616 = 0xe20
    unsigned long long _pdfPrintCallbackID;	// 3624 = 0xe28
    struct RetainPtr<CGPDFDocument *> _printedDocument;	// 3632 = 0xe30
    struct Vector<WTF::RetainPtr<NSURL>, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> _temporaryURLsToDeleteWhenDeallocated;	// 3640 = 0xe38
    _Bool _sizeChangedSinceLastVisibleContentRectUpdate;	// 3656 = 0xe48
}

- (id).cxx_construct;	// IMP=0x00000000008ca07b
- (void).cxx_destruct;	// IMP=0x00000000008c924e
@property(nonatomic) _Bool sizeChangedSinceLastVisibleContentRectUpdate; // @synthesize sizeChangedSinceLastVisibleContentRectUpdate=_sizeChangedSinceLastVisibleContentRectUpdate;
@property(readonly, nonatomic, getter=isResigningFirstResponder) _Bool resigningFirstResponder; // @synthesize resigningFirstResponder=_resigningFirstResponder;
- (void)_screenCapturedDidChange:(id)arg1;	// IMP=0x00000000008c91d5
- (void)_applicationWillEnterForeground:(id)arg1;	// IMP=0x00000000008c919d
- (void)_applicationDidEnterBackground:(id)arg1;	// IMP=0x00000000008c9165
- (void)_applicationDidBecomeActive:(id)arg1;	// IMP=0x00000000008c9150
- (void)_applicationWillResignActive:(id)arg1;	// IMP=0x00000000008c911e
- (double)_targetContentZoomScaleForRect:(const struct FloatRect *)arg1 currentScale:(double)arg2 fitEntireRect:(_Bool)arg3 minimumScale:(double)arg4 maximumScale:(double)arg5;	// IMP=0x00000000008c90c1
- (double)_contentZoomScale;	// IMP=0x00000000008c90a0
- (double)_initialScaleFactor;	// IMP=0x00000000008c907f
- (void)_zoomToInitialScaleWithOrigin:(struct CGPoint)arg1;	// IMP=0x00000000008c9020
- (void)_zoomOutWithOrigin:(struct CGPoint)arg1;	// IMP=0x00000000008c8fc1
- (_Bool)_zoomToRect:(struct CGRect)arg1 withOrigin:(struct CGPoint)arg2 fitEntireRect:(_Bool)arg3 minimumScale:(double)arg4 maximumScale:(double)arg5 minimumScrollDistance:(double)arg6;	// IMP=0x00000000008c8f1f
- (void)_zoomToFocusRect:(struct CGRect)arg1 selectionRect:(struct CGRect)arg2 fontSize:(float)arg3 minimumScale:(double)arg4 maximumScale:(double)arg5 allowScaling:(_Bool)arg6 forceScroll:(_Bool)arg7;	// IMP=0x00000000008c8e90
- (_Bool)_scrollToRect:(struct CGRect)arg1 withOrigin:(struct CGPoint)arg2 minimumScrollDistance:(double)arg3;	// IMP=0x00000000008c8e0e
- (void)_setAcceleratedCompositingRootView:(id)arg1;	// IMP=0x00000000008c8cbc
- (void)_layerTreeCommitComplete;	// IMP=0x00000000008c8c9b
- (void)_didCommitLayerTree:(const void *)arg1;	// IMP=0x00000000008c89ad
- (void)_gpuProcessDidCreateContextForVisibilityPropagation;	// IMP=0x00000000008c899b
- (void)_webProcessDidCreateContextForVisibilityPropagation;	// IMP=0x00000000008c8989
- (void)_didRelaunchProcess;	// IMP=0x00000000008c8941
- (void)_processWillSwap;	// IMP=0x00000000008c892f
- (void)_gpuProcessDidExit;	// IMP=0x00000000008c891d
- (void)_processDidExit;	// IMP=0x00000000008c887b
- (unique_ptr_7306e13f)_createDrawingAreaProxy:(void *)arg1;	// IMP=0x00000000008c8822
- (void)_webViewDestroyed;	// IMP=0x00000000008c880f
- (void)_accessibilityRegisterUIProcessTokens;	// IMP=0x00000000008c861c
- (void)_updateRemoteAccessibilityRegistration:(_Bool)arg1;	// IMP=0x00000000008c8616
- (void)_setAccessibilityWebProcessToken:(id)arg1;	// IMP=0x00000000008c8604
- (void)_updateForScreen:(id)arg1;	// IMP=0x00000000008c85aa
- (void)_windowDidMoveToScreenNotification:(id)arg1;	// IMP=0x00000000008c8561
- (void)didUpdateFocusInContext:(id)arg1 withAnimationCoordinator:(id)arg2;	// IMP=0x00000000008c84e1
- (_Bool)canBecomeFocused;	// IMP=0x00000000008c8450
@property(readonly, nonatomic) long long interfaceOrientation;
@property(readonly, nonatomic) NSUndoManager *undoManagerForWebView;
- (void)didZoomToScale:(double)arg1;	// IMP=0x00000000008c836a
- (void)willStartZoomOrScroll;	// IMP=0x00000000008c8358
- (void)didInterruptScrolling;	// IMP=0x00000000008c8344
- (void)didFinishScrolling;	// IMP=0x00000000008c8332
- (void)didUpdateVisibleRect:(struct CGRect)arg1 unobscuredRect:(struct CGRect)arg2 contentInsets:(struct UIEdgeInsets)arg3 unobscuredRectInScrollViewCoordinates:(struct CGRect)arg4 obscuredInsets:(struct UIEdgeInsets)arg5 unobscuredSafeAreaInsets:(struct UIEdgeInsets)arg6 inputViewBounds:(struct CGRect)arg7 scale:(double)arg8 minimumScale:(double)arg9 viewStability:(OptionSet_5ff1ced1)arg10 enclosedInScrollableAncestorView:(_Bool)arg11 sendEvenIfUnchanged:(_Bool)arg12;	// IMP=0x00000000008c7eff
- (struct CGRect)_computeUnobscuredContentRectRespectingInputViewBounds:(struct CGRect)arg1 inputViewBounds:(struct CGRect)arg2;	// IMP=0x00000000008c7de3
- (void)_didExitStableState;	// IMP=0x00000000008c7d9a
- (void)updateFixedClippingView:(struct FloatRect)arg1;	// IMP=0x00000000008c7cbe
@property(nonatomic, getter=isShowingInspectorIndication) _Bool showingInspectorIndication;
- (void)_hideInspectorHighlight;	// IMP=0x00000000008c7b60
- (void)_showInspectorHighlight:(const void *)arg1;	// IMP=0x00000000008c7a8e
@property(readonly, nonatomic) _Bool isFocusingElement;
- (struct OpaqueWKPage *)_pageRef;	// IMP=0x00000000008c7a5e
@property(readonly, nonatomic) WKBrowsingContextController *browsingContextController;
- (void)didMoveToWindow;	// IMP=0x00000000008c798e
- (void)willMoveToWindow:(id)arg1;	// IMP=0x00000000008c78bb
- (id)rootContentView;	// IMP=0x00000000008c78aa
- (id)webView;	// IMP=0x00000000008c7899
@property(readonly, nonatomic) void *page;
- (void)_removeTemporaryDirectoriesWhenDeallocated:(void *)arg1;	// IMP=0x00000000008c77ea
- (void)_removeTemporaryFilesIfNecessary;	// IMP=0x00000000008c76fc
- (void)dealloc;	// IMP=0x00000000008c7672
- (id)initWithFrame:(struct CGRect)arg1 processPool:(NakedRef_6f117943)arg2 configuration:(void *)arg3 webView:(id)arg4;	// IMP=0x00000000008c759b
- (void)_removeVisibilityPropagationViewForGPUProcess;	// IMP=0x00000000008c74dd
- (void)_removeVisibilityPropagationViewForWebProcess;	// IMP=0x00000000008c741f
- (void)_setupVisibilityPropagationViewForGPUProcess;	// IMP=0x00000000008c72aa
- (void)_setupVisibilityPropagationViewForWebProcess;	// IMP=0x00000000008c7166
- (id)_commonInitializationWithProcessPool:(void *)arg1 configuration:(void *)arg2;	// IMP=0x00000000008c6bf4
@property(readonly, nonatomic) struct CGPDFDocument *_wk_printedDocument;
- (_Bool)_waitForDrawToPDFCallbackIfNeeded;	// IMP=0x00000000008cac83
- (unsigned long long)_wk_pageCountForPrintFormatter:(id)arg1;	// IMP=0x00000000008ca84c
@property(readonly, nonatomic) _Bool _wk_printFormatterRequiresMainThread;
- (_Bool)_shouldAvoidSecurityHeuristicScoreUpdates;	// IMP=0x00000000008f2f1a
- (void)uninstallImageAnalysisInteraction;	// IMP=0x00000000008f2dda
- (void)installImageAnalysisInteraction:(id)arg1;	// IMP=0x00000000008f2ac3
- (void)cancelElementFullscreenVideoExtraction;	// IMP=0x00000000008f2a57
- (void)beginElementFullscreenVideoExtraction:(const void *)arg1 bounds:(struct FloatRect)arg2;	// IMP=0x00000000008f273a
@property(readonly, nonatomic) _Bool isFullscreenVideoExtractionEnabled;
- (void)cancelFullscreenVideoExtraction:(id)arg1;	// IMP=0x00000000008f2688
- (void)beginFullscreenVideoExtraction:(const void *)arg1 playerViewController:(id)arg2;	// IMP=0x00000000008f2397
- (_Bool)imageAnalysisInteraction:(id)arg1 shouldBeginAtPoint:(struct CGPoint)arg2 forAnalysisType:(unsigned long long)arg3;	// IMP=0x00000000008f2344
- (struct CGRect)contentsRectForImageAnalysisInteraction:(id)arg1;	// IMP=0x00000000008f2293
- (void)actionSheetAssistant:(id)arg1 copyCroppedImage:(id)arg2 sourceMIMEType:(id)arg3;	// IMP=0x00000000008f1f76
- (_Bool)actionSheetAssistantShouldIncludeCopyCroppedImageAction:(id)arg1;	// IMP=0x00000000008f1f61
- (void)captureTextFromCameraForWebView:(id)arg1;	// IMP=0x00000000008f1f32
- (void)imageAnalysisGestureDidTimeOut:(id)arg1;	// IMP=0x00000000008f18ad
- (void)imageAnalysisGestureDidFail:(id)arg1;	// IMP=0x00000000008f1899
- (void)_completeImageAnalysisRequestForContextMenu:(struct CGImage *)arg1 requestIdentifier:(ObjectIdentifier_073ef476)arg2 hasTextResults:(_Bool)arg3;	// IMP=0x00000000008f12fc
- (void)imageAnalysisGestureDidBegin:(id)arg1;	// IMP=0x00000000008f09d8
- (void)requestTextRecognition:(id)arg1 imageData:(const void *)arg2 source:(id)arg3 target:(id)arg4 completionHandler:(void *)arg5;	// IMP=0x00000000008f0538
- (_Bool)validateImageAnalysisRequestIdentifier:(ObjectIdentifier_073ef476)arg1;	// IMP=0x00000000008f0473
- (void)_updateContextMenuForMachineReadableCodeForImageAnalysis:(id)arg1;	// IMP=0x00000000008f03ce
- (RetainPtr_acb19053)createImageAnalyzerRequest:(unsigned long long)arg1 image:(struct CGImage *)arg2;	// IMP=0x00000000008f036d
- (RetainPtr_acb19053)createImageAnalyzerRequest:(unsigned long long)arg1 image:(struct CGImage *)arg2 imageURL:(id)arg3;	// IMP=0x00000000008f027a
- (void)_cancelImageAnalysis;	// IMP=0x00000000008f0195
- (void)_tearDownImageAnalysis;	// IMP=0x00000000008effdf
- (void)_setUpImageAnalysis;	// IMP=0x00000000008efe3f
- (_Bool)hasPendingImageAnalysisRequest;	// IMP=0x00000000008efe2e
- (id)imageAnalyzer;	// IMP=0x00000000008efdc4
- (void)actionSheetAssistant:(id)arg1 lookUpImage:(id)arg2 imageURL:(id)arg3 title:(id)arg4 imageBounds:(struct CGRect)arg5;	// IMP=0x00000000008efda0
- (_Bool)actionSheetAssistant:(id)arg1 shouldIncludeLookUpImageActionForElement:(id)arg2;	// IMP=0x00000000008efd6f
- (void)actionSheetAssistant:(id)arg1 showTextForImage:(id)arg2 imageURL:(id)arg3 title:(id)arg4 imageBounds:(struct CGRect)arg5;	// IMP=0x00000000008efd4b
- (_Bool)actionSheetAssistant:(id)arg1 shouldIncludeShowTextActionForElement:(id)arg2;	// IMP=0x00000000008efd1a
- (id)provideDataForItem:(id)arg1;	// IMP=0x00000000008efc6f
- (id)previewController:(id)arg1 previewItemAtIndex:(long long)arg2;	// IMP=0x00000000008efa47
- (long long)numberOfPreviewItemsInPreviewController:(id)arg1;	// IMP=0x00000000008efa3c
- (void)previewControllerDidDismiss:(id)arg1;	// IMP=0x00000000008ef9b6
- (id)previewController:(id)arg1 transitionImageForPreviewItem:(id)arg2 contentRect:(struct CGRect *)arg3;	// IMP=0x00000000008ef938
- (struct CGRect)previewController:(id)arg1 frameForPreviewItem:(id)arg2 inSourceView:(id *)arg3;	// IMP=0x00000000008ef915
- (void)presentVisualSearchPreviewControllerForImage:(id)arg1 imageURL:(id)arg2 title:(id)arg3 imageBounds:(struct CGRect)arg4 appearanceActions:(unsigned long long)arg5;	// IMP=0x00000000008ef78e
- (void)requestRectForFoundTextRange:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000008ef636
- (long long)compareFoundRange:(id)arg1 toRange:(id)arg2 inDocument:(id)arg3;	// IMP=0x00000000008ef5ca
- (long long)offsetFromPosition:(id)arg1 toPosition:(id)arg2 inDocument:(id)arg3;	// IMP=0x00000000008ef5b8
@property(readonly, nonatomic) _Bool supportsTextReplacement;
- (void)didEndTextSearchOperation;	// IMP=0x00000000008ef548
- (void)didBeginTextSearchOperation;	// IMP=0x00000000008ef503
- (void)clearAllDecoratedFoundText;	// IMP=0x00000000008ef4be
- (void)scrollRangeToVisible:(id)arg1 inDocument:(id)arg2;	// IMP=0x00000000008ef419
- (void)decorateFoundTextRange:(id)arg1 inDocument:(id)arg2 usingStyle:(long long)arg3;	// IMP=0x00000000008ef343
- (void)replaceFoundTextInRange:(id)arg1 inDocument:(id)arg2 withText:(id)arg3;	// IMP=0x00000000008ef21a
- (void)performTextSearchWithQueryString:(id)arg1 usingOptions:(id)arg2 resultAggregator:(id)arg3;	// IMP=0x00000000008ef0a3
- (void)findAndReplaceForWebView:(id)arg1;	// IMP=0x00000000008ef067
- (void)findPreviousForWebView:(id)arg1;	// IMP=0x00000000008ef030
- (void)findNextForWebView:(id)arg1;	// IMP=0x00000000008eeff9
- (void)findForWebView:(id)arg1;	// IMP=0x00000000008eefc0
- (void)startFadeOut;	// IMP=0x00000000008eee6b
- (void)teardownTextIndicatorLayer;	// IMP=0x00000000008eee2a
- (void)setTextIndicatorAnimationProgress:(float)arg1;	// IMP=0x00000000008eedfd
- (void)clearTextIndicator:(unsigned char)arg1;	// IMP=0x00000000008eed25
- (void)setUpTextIndicator:(Ref_72f36232)arg1;	// IMP=0x00000000008eebb0
- (void)_invokeAllActionsToPerformAfterPendingImageAnalysis:(_Bool)arg1;	// IMP=0x00000000008eeac6
- (void)_doAfterPendingImageAnalysis:(CDUnknownBlockType)arg1;	// IMP=0x00000000008eea04
- (void)_endImageAnalysisGestureDeferral:(_Bool)arg1;	// IMP=0x00000000008ee9e7
- (void)_writePromisedAttachmentToPasteboard:(void *)arg1;	// IMP=0x00000000008ee4e5
- (void)_didExitFullscreen;	// IMP=0x00000000008ee4ce
- (void)_didEnterFullscreen;	// IMP=0x00000000008ee4b7
- (void)indirectScribbleInteraction:(id)arg1 didFinishWritingInElement:(id)arg2;	// IMP=0x00000000008ee479
- (void)indirectScribbleInteraction:(id)arg1 willBeginWritingInElement:(id)arg2;	// IMP=0x00000000008ee43b
- (struct CGRect)indirectScribbleInteraction:(id)arg1 frameForElement:(id)arg2;	// IMP=0x00000000008ee3e4
- (void)indirectScribbleInteraction:(id)arg1 focusElementIfNeeded:(id)arg2 referencePoint:(struct CGPoint)arg3 completion:(CDUnknownBlockType)arg4;	// IMP=0x00000000008ee379
- (_Bool)indirectScribbleInteraction:(id)arg1 isElementFocused:(id)arg2;	// IMP=0x00000000008ee345
- (void)indirectScribbleInteraction:(id)arg1 requestElementsInRect:(struct CGRect)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x00000000008ee330
- (_Bool)_elementForTextInputContextIsFocused:(id)arg1;	// IMP=0x00000000008ee2af
- (id)_textInputContextByScribbleIdentifier:(id)arg1;	// IMP=0x00000000008ee255
- (void)cleanUpScribbleInteraction;	// IMP=0x00000000008ee214
- (void)setUpScribbleInteraction;	// IMP=0x00000000008ee1b7
- (id)pointerInteraction:(id)arg1 styleForRegion:(id)arg2;	// IMP=0x00000000008edfa2
- (id)pointerRegionForPositionInformation:(void *)arg1 point:(struct CGPoint)arg2;	// IMP=0x00000000008edd66
- (void)_pointerInteraction:(id)arg1 regionForRequest:(id)arg2 defaultRegion:(id)arg3 completion:(CDUnknownBlockType)arg4;	// IMP=0x00000000008ed4e0
- (void)setUpPointerInteraction;	// IMP=0x00000000008ed464
- (void)_showMediaControlsContextMenu:(struct FloatRect *)arg1 items:(void *)arg2 completionHandler:(void *)arg3;	// IMP=0x00000000008ed447
- (void)_setMouseEventPolicy:(unsigned char)arg1;	// IMP=0x00000000008ed42b
- (void)_configureMouseGestureRecognizer;	// IMP=0x00000000008ed3d1
- (void)mouseGestureRecognizerChanged:(id)arg1;	// IMP=0x00000000008ed2a5
- (void)setUpMouseGestureRecognizer;	// IMP=0x00000000008ed1a7
- (_Bool)shouldUseMouseGestureRecognizer;	// IMP=0x00000000008ed03b
- (void)setContinuousSpellCheckingEnabled:(_Bool)arg1;	// IMP=0x00000000008ed003
- (id)appHighlightMenu;	// IMP=0x00000000008ece6a
- (id)menuWithInlineAction:(id)arg1 identifier:(id)arg2 handler:(void *)arg3;	// IMP=0x00000000008ecc5e
- (void)buildMenuForWebViewWithBuilder:(id)arg1;	// IMP=0x00000000008ecbe7
- (void)dropInteraction:(id)arg1 sessionDidEnd:(id)arg2;	// IMP=0x00000000008ec9eb
- (void)_dropInteraction:(id)arg1 delayedPreviewProviderForDroppingItem:(id)arg2 previewProvider:(CDUnknownBlockType)arg3;	// IMP=0x00000000008ec9d4
- (id)dropInteraction:(id)arg1 previewForDroppingItem:(id)arg2 withDefault:(id)arg3;	// IMP=0x00000000008ec800
- (void)dropInteraction:(id)arg1 concludeDrop:(id)arg2;	// IMP=0x00000000008ec727
- (void)dropInteraction:(id)arg1 item:(id)arg2 willAnimateDropWithAnimator:(id)arg3;	// IMP=0x00000000008ec5c2
- (void)dropInteraction:(id)arg1 performDrop:(id)arg2;	// IMP=0x00000000008ebabf
- (void)dropInteraction:(id)arg1 sessionDidExit:(id)arg2;	// IMP=0x00000000008eb8bb
- (id)dropInteraction:(id)arg1 sessionDidUpdate:(id)arg2;	// IMP=0x00000000008eb50c
- (void)dropInteraction:(id)arg1 sessionDidEnter:(id)arg2;	// IMP=0x00000000008eb30a
- (_Bool)dropInteraction:(id)arg1 canHandleSession:(id)arg2;	// IMP=0x00000000008eb235
- (long long)_dropInteraction:(id)arg1 dataOwnerForSession:(id)arg2;	// IMP=0x00000000008eb1b7
- (void)dragInteraction:(id)arg1 sessionDidTransferItems:(id)arg2;	// IMP=0x00000000008eb19a
- (void)dragInteraction:(id)arg1 item:(id)arg2 willAnimateCancelWithAnimator:(id)arg3;	// IMP=0x00000000008eae30
- (_Bool)_dragInteraction:(id)arg1 item:(id)arg2 shouldDelaySetDownAnimationWithCompletion:(CDUnknownBlockType)arg3;	// IMP=0x00000000008eae19
- (id)dragInteraction:(id)arg1 previewForCancellingItem:(id)arg2 withDefault:(id)arg3;	// IMP=0x00000000008ead6a
- (void)dragInteraction:(id)arg1 session:(id)arg2 didEndWithOperation:(unsigned long long)arg3;	// IMP=0x00000000008eaac1
- (void)dragInteraction:(id)arg1 sessionWillBegin:(id)arg2;	// IMP=0x00000000008ea9a8
- (void)dragInteraction:(id)arg1 willAnimateLiftWithAnimator:(id)arg2 session:(id)arg3;	// IMP=0x00000000008ea51b
- (id)dragInteraction:(id)arg1 previewForLiftingItem:(id)arg2 session:(id)arg3;	// IMP=0x00000000008ea46c
- (id)dragInteraction:(id)arg1 itemsForBeginningSession:(id)arg2;	// IMP=0x00000000008ea1d1
- (void)_dragInteraction:(id)arg1 prepareForSession:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x00000000008e9f48
- (void)_dragInteraction:(id)arg1 itemsForAddingToSession:(id)arg2 withTouchAtPoint:(struct CGPoint)arg3 completion:(CDUnknownBlockType)arg4;	// IMP=0x00000000008e9db6
- (long long)_dragInteraction:(id)arg1 dataOwnerForSession:(id)arg2;	// IMP=0x00000000008e9d38
- (_Bool)_dragInteraction:(id)arg1 shouldDelayCompetingGestureRecognizer:(id)arg2;	// IMP=0x00000000008e9cfe
- (_Bool)_handleDropByInsertingImagePlaceholders:(id)arg1 session:(id)arg2;	// IMP=0x00000000008e973f
- (void)removeTextPlaceholder:(id)arg1 willInsertText:(_Bool)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000008e964a
- (void)insertTextPlaceholderWithSize:(struct CGSize)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000008e9523
- (void)selectPositionAtPoint:(struct CGPoint)arg1 withContextRequest:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000008e93df
- (void)requestDocumentContext:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000008e9094
- (void)adjustSelectionWithDelta:(struct _NSRange)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000008e8fdf
- (void)presentContextMenu:(id)arg1 atLocation:(struct CGPoint)arg2;	// IMP=0x00000000008e8f90
- (void)_removeContextMenuHintContainerIfPossible;	// IMP=0x00000000008e8ec8
- (id)_createTargetedContextMenuHintPreviewIfPossible;	// IMP=0x00000000008e8581
- (_Bool)positionInformationHasImageOverlayDataDetector;	// IMP=0x00000000008e854e
- (id)_createTargetedContextMenuHintPreviewForFocusedElement;	// IMP=0x00000000008e81c6
@property(readonly, nonatomic) _Bool supportsImagePaste;
- (id)_autofillContext;	// IMP=0x00000000008e8064
- (id)textEffectsWindow;	// IMP=0x00000000008e8024
- (void)cancelActiveTextInteractionGestures;	// IMP=0x00000000008e7fc9
- (id)_itemsForBeginningOrAddingToSessionWithRegistrationLists:(id)arg1 stagedDragSource:(const void *)arg2;	// IMP=0x00000000008e7735
- (void)_restoreCalloutBarIfNeeded;	// IMP=0x00000000008e76fb
- (id)currentDragOrDropSession;	// IMP=0x00000000008e76df
- (OptionSet_401d6bae)_allowedDragSourceActions;	// IMP=0x00000000008e766c
- (unsigned long long)_dragDestinationActionForDropSession:(id)arg1;	// IMP=0x00000000008e75e9
- (void)_prepareToDragPromisedAttachment:(const void *)arg1;	// IMP=0x00000000008e6988
- (void)_didChangeDragCaretRect:(struct CGRect)arg1 currentRect:(struct CGRect)arg2;	// IMP=0x00000000008e6816
- (void)_didPerformDragOperation:(_Bool)arg1;	// IMP=0x00000000008e6595
- (void)_deliverDelayedDropPreviewIfPossible:(optional_2e6e99e4)arg1;	// IMP=0x00000000008e6358
- (void)_didReceiveEditDragSnapshot:(optional_2e6e99e4)arg1;	// IMP=0x00000000008e6106
- (void)_willReceiveEditDragSnapshot;	// IMP=0x00000000008e60f5
- (void)cleanUpDragSourceSessionState;	// IMP=0x00000000008e5c4c
- (struct DragData)dragDataForDropSession:(id)arg1 dragDestinationAction:(unsigned long long)arg2;	// IMP=0x00000000008e5a70
- (void)computeClientAndGlobalPointsForDropSession:(id)arg1 outClientPoint:(struct CGPoint *)arg2 outGlobalPoint:(struct CGPoint *)arg3;	// IMP=0x00000000008e5a2a
- (void)_didHandleDragStartRequest:(_Bool)arg1;	// IMP=0x00000000008e5874
- (void)_didHandleAdditionalDragItemsRequest:(_Bool)arg1;	// IMP=0x00000000008e565a
- (void)_startDrag:(RetainPtr_c27edd19)arg1 item:(const void *)arg2;	// IMP=0x00000000008e5590
- (void)teardownDragAndDropInteractions;	// IMP=0x00000000008e54fd
- (void)setUpDragAndDropInteractions;	// IMP=0x00000000008e53ba
- (id)webViewUIDelegate;	// IMP=0x00000000008e5399
- (double)dragLiftDelay;	// IMP=0x00000000008e533b
- (void)_didChangeDragInteractionPolicy;	// IMP=0x00000000008e52ce
- (_Bool)deferringGestureRecognizer:(id)arg1 shouldDeferOtherGestureRecognizer:(id)arg2;	// IMP=0x00000000008e4f1e
- (void)deferringGestureRecognizer:(id)arg1 didEndTouchesWithEvent:(id)arg2;	// IMP=0x00000000008e4e3c
- (void)deferringGestureRecognizer:(id)arg1 didTransitionToState:(long long)arg2;	// IMP=0x00000000008e4e0a
- (_Bool)deferringGestureRecognizer:(id)arg1 willBeginTouchesWithEvent:(id)arg2;	// IMP=0x00000000008e4d80
- (void)_updateTargetedPreviewScrollViewUsingContainerScrollingNodeID:(unsigned long long)arg1;	// IMP=0x00000000008e4c6e
- (void)_updateFrameOfContainerForContextMenuHintPreviewsIfNeeded;	// IMP=0x00000000008e4b63
- (void)_removeContainerForContextMenuHintPreviews;	// IMP=0x00000000008e4aea
- (id)containerForContextMenuHintPreviews;	// IMP=0x00000000008e49af
- (void)_removeContainerForDragPreviews;	// IMP=0x00000000008e495c
- (id)containerForDragPreviews;	// IMP=0x00000000008e48c5
- (void)_removeContainerForDropPreviews;	// IMP=0x00000000008e4872
- (id)containerForDropPreviews;	// IMP=0x00000000008e47db
- (RetainPtr_f11d553d)_createPreviewContainerWithLayerName:(id)arg1;	// IMP=0x00000000008e4704
- (unsigned char)_dataOwnerForPasteboard:(_Bool)arg1;	// IMP=0x00000000008e4671
- (_Bool)shouldDeferGestureDueToImageAnalysis:(id)arg1;	// IMP=0x00000000008e460b
@property(readonly, nonatomic) _Bool _shouldUseLegacySelectPopoverDismissalBehavior;
@property(readonly, nonatomic) _Bool _shouldAvoidScrollingWhenFocusedContentIsVisible;
@property(readonly, nonatomic) _Bool _shouldAvoidResizingWhenInputViewBoundsChange;
@property(readonly, nonatomic) _Bool _shouldUseContextMenusForFormControls;
@property(readonly, nonatomic) _Bool _shouldUseContextMenus;
- (void)_targetedPreviewContainerDidRemoveLastSubview:(id)arg1;	// IMP=0x00000000008e4529
- (void)actionSheetAssistantDidDismissContextMenu:(id)arg1;	// IMP=0x00000000008e4508
- (void)actionSheetAssistantDidShowContextMenu:(id)arg1;	// IMP=0x00000000008e44e7
- (void)removeContextMenuViewIfPossibleForActionSheetAssistant:(id)arg1;	// IMP=0x00000000008e44d5
- (id)createTargetedContextMenuHintForActionSheetAssistant:(id)arg1;	// IMP=0x00000000008e44c3
- (void)actionSheetAssistant:(id)arg1 getAlternateURLForImage:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x00000000008e43e3
- (id)selectedTextForActionSheetAssistant:(id)arg1;	// IMP=0x00000000008e43d1
- (id)dataDetectionContextForActionSheetAssistant:(id)arg1 positionInformation:(const void *)arg2;	// IMP=0x00000000008e43bc
- (id)dataDetectionContextForPositionInformation:(const void *)arg1;	// IMP=0x00000000008e4178
- (void)actionSheetAssistantDidStopInteraction:(id)arg1;	// IMP=0x00000000008e4146
- (void)actionSheetAssistant:(id)arg1 willStartInteractionWithElement:(id)arg2;	// IMP=0x00000000008e40fa
- (RetainPtr_f649c0c3)actionSheetAssistant:(id)arg1 decideActionsForElement:(id)arg2 defaultActions:(RetainPtr_f649c0c3)arg3;	// IMP=0x00000000008e4081
- (struct CGRect)unoccludedWindowBoundsForActionSheetAssistant:(id)arg1;	// IMP=0x00000000008e3f21
- (_Bool)actionSheetAssistant:(id)arg1 showCustomSheetForElement:(id)arg2;	// IMP=0x00000000008e3e71
- (_Bool)actionSheetAssistant:(id)arg1 shouldIncludeAppLinkActionsForElement:(id)arg2;	// IMP=0x00000000008e3e4b
- (void)actionSheetAssistant:(id)arg1 shareElementWithImage:(id)arg2 rect:(struct CGRect)arg3;	// IMP=0x00000000008e3ae6
- (void)actionSheetAssistant:(id)arg1 shareElementWithURL:(id)arg2 rect:(struct CGRect)arg3;	// IMP=0x00000000008e3932
- (void)actionSheetAssistant:(id)arg1 openElementAtLocation:(struct CGPoint)arg2;	// IMP=0x00000000008e391e
- (void)actionSheetAssistant:(id)arg1 performAction:(_Bool)arg2;	// IMP=0x00000000008e3907
- (void)updatePositionInformationForActionSheetAssistant:(id)arg1;	// IMP=0x00000000008e388d
-     // Error parsing type: {optional<WebKit::InteractionInformationAtPosition>=(?=c{InteractionInformationAtPosition={InteractionInformationRequest={IntPoint=ii}BBBBBBB}B{optional<bool>=(?=cB)B}CBBBBBBBBBBBQBBBBBB{FloatPoint=ff}{URL={String={RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>=^{StringImpl}}}b1b1b1b3b26IIIIIII}{URL={String={RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>=^{StringImpl}}}b1b1b1b3b26IIIIIII}{String={RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>=^{StringImpl}}}{String={RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>=^{StringImpl}}}{String={RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>=^{StringImpl}}}{IntRect={IntPoint=ii}{IntSize=ii}}{RefPtr<WebKit::ShareableBitmap, WTF::RawPtrTraits<WebKit::ShareableBitmap>, WTF::DefaultRefDerefTraits<WebKit::ShareableBitmap>>=^{ShareableBitmap}}{String={RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>=^{StringImpl}}}{String={RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>=^{StringImpl}}}f{FloatRect={FloatPoint=ff}{FloatSize=ff}}{optional<WebCore::Cursor>=(?=c{Cursor=i{RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>>=^{Image}}{IntPoint=ii}^v})B}{TextIndicatorData={FloatRect={FloatPoint=ff}{FloatSize=ff}}{FloatRect={FloatPoint=ff}{FloatSize=ff}}{FloatRect={FloatPoint=ff}{FloatSize=ff}}{Vector<WebCore::FloatRect, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc>=^{FloatRect}II}f{RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>>=^{Image}}{RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>>=^{Image}}{RefPtr<WebCore::Image, WTF::RawPtrTraits<WebCore::Image>, WTF::DefaultRefDerefTraits<WebCore::Image>>=^{Image}}{Color=Q}C{OptionSet<WebCore::TextIndicatorOption>=S}}{String={RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>=^{StringImpl}}}{RetainPtr<NSArray>=^v}{IntRect={IntPoint=ii}{IntSize=ii}}{optional<WebCore::ElementContext>=(?=c{ElementContext={FloatRect={FloatPoint=ff}{FloatSize=ff}}{ObjectIdentifier<WebCore::PageIdentifierType>=Q}{ProcessQualified<WTF::UUID>={UUID=T}{ObjectIdentifier<WebCore::ProcessIdentifierType>=Q}}{ObjectIdentifier<WebCore::ElementIdentifierType>=Q}})B}{optional<WebCore::ElementContext>=(?=c{ElementContext={FloatRect={FloatPoint=ff}{FloatSize=ff}}{ObjectIdentifier<WebCore::PageIdentifierType>=Q}{ProcessQualified<WTF::UUID>={UUID=T}{ObjectIdentifier<WebCore::ProcessIdentifierType>=Q}}{ObjectIdentifier<WebCore::ElementIdentifierType>=Q}})B}})B}24@0:8@16, name: positionInformationForActionSheetAssistant:
- (_Bool)isAnyTouchOverActiveArea:(id)arg1;	// IMP=0x00000000008e37e0
- (_Bool)gestureRecognizer:(id)arg1 isInterruptingMomentumScrollingWithEvent:(id)arg2;	// IMP=0x00000000008e3628
- (_Bool)gestureRecognizer:(id)arg1 shouldIgnoreWebTouchWithEvent:(id)arg2;	// IMP=0x00000000008e359e
- (void)_preserveFocusWithToken:(id)arg1 destructively:(_Bool)arg2;	// IMP=0x00000000008e34d0
- (void)stopRelinquishingFirstResponderToFocusedElement;	// IMP=0x00000000008e349c
- (void)startRelinquishingFirstResponderToFocusedElement;	// IMP=0x00000000008e3468
- (_Bool)_restoreFocusWithToken:(id)arg1;	// IMP=0x00000000008e3422
- (id)inputLabelText;	// IMP=0x00000000008e33bf
- (void)contactPickerDidDismiss:(id)arg1;	// IMP=0x00000000008e3362
- (void)contactPickerDidPresent:(id)arg1;	// IMP=0x00000000008e3341
- (void)_showContactPicker:(const void *)arg1 completionHandler:(void *)arg2;	// IMP=0x00000000008e329f
- (void)shareSheet:(id)arg1 willShowActivityItems:(id)arg2;	// IMP=0x00000000008e3211
- (void)shareSheetDidDismiss:(id)arg1;	// IMP=0x00000000008e31ce
- (void)_showShareSheet:(const void *)arg1 inRect:(optional_1d8eff86)arg2 completionHandler:(void *)arg3;	// IMP=0x00000000008e3067
- (_Bool)fileUploadPanelDestinationIsManaged:(id)arg1;	// IMP=0x00000000008e2f83
- (void)fileUploadPanelDidDismiss:(id)arg1;	// IMP=0x00000000008e2f40
- (void)_showRunOpenPanel:(struct OpenPanelParameters *)arg1 frameInfo:(const void *)arg2 resultListener:(struct WebOpenPanelResultListenerProxy *)arg3;	// IMP=0x00000000008e2dda
- (void)_showPlaybackTargetPicker:(_Bool)arg1 fromRect:(const struct IntRect *)arg2 routeSharingPolicy:(unsigned char)arg3 routingContextUID:(id)arg4;	// IMP=0x00000000008e2d5f
- (void)updateTextSuggestionsForInputDelegate;	// IMP=0x00000000008e2ccb
@property(retain, nonatomic) NSArray *dataListTextSuggestions;
@property(retain, nonatomic) UIView<WKFormControl> *dataListTextSuggestionsInputView;
- (void)_stopSuppressingSelectionAssistantForReason:(unsigned char)arg1;	// IMP=0x00000000008e2b4c
- (void)_startSuppressingSelectionAssistantForReason:(unsigned char)arg1;	// IMP=0x00000000008e2b1a
- (_Bool)_shouldSuppressSelectionCommands;	// IMP=0x00000000008e2b06
- (_Bool)hasHiddenContentEditable;	// IMP=0x00000000008e2af2
- (void)prepareSelectionForContextMenuWithLocationInView:(struct CGPoint)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000008e293c
- (void)requestRVItemInSelectedRangeWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000008e289a
- (_Bool)supportsTextSelectionWithCharacterGranularity;	// IMP=0x00000000008e2892
- (_Bool)shouldAllowHidingSelectionCommands;	// IMP=0x00000000008e287d
- (void)_updateChangedSelection:(_Bool)arg1;	// IMP=0x00000000008e2125
- (void)_updateChangedSelection;	// IMP=0x00000000008e2111
- (void)selectWordForReplacement;	// IMP=0x00000000008e2017
- (void)_selectionChanged;	// IMP=0x00000000008e1e71
- (void)_updateSelectionAssistantSuppressionState;	// IMP=0x00000000008e1d64
- (void)_wheelChangedWithEvent:(id)arg1;	// IMP=0x00000000008e1d35
- (void)reloadContextViewForPresentedListViewController;	// IMP=0x00000000008e1d2f
- (void)updateCurrentFocusedElementInformation:(void *)arg1;	// IMP=0x00000000008e1bb3
- (void)_updateInitialWritingDirectionIfNecessary;	// IMP=0x00000000008e1b32
- (void)_didUpdateEditorState;	// IMP=0x00000000008e1a2b
- (void)doAfterEditorStateUpdateAfterFocusingElement:(CDUnknownBlockType)arg1;	// IMP=0x00000000008e1977
- (void)_requestDOMPasteAccessForCategory:(unsigned char)arg1 elementRect:(const struct IntRect *)arg2 originIdentifier:(const void *)arg3 completionHandler:(void *)arg4;	// IMP=0x00000000008e155f
- (void)_didUpdateInputMode:(unsigned char)arg1;	// IMP=0x00000000008e1504
- (void)_hardwareKeyboardAvailabilityChanged;	// IMP=0x00000000008e14e7
@property(readonly, nonatomic) _Bool shouldIgnoreKeyboardWillHideNotification;
- (void)_updateInputContextAfterBlurringAndRefocusingElement;	// IMP=0x00000000008e1433
- (void)_elementDidBlur;	// IMP=0x00000000008e1206
- (void)_elementDidFocus:(const void *)arg1 userIsInteracting:(_Bool)arg2 blurPreviousNode:(_Bool)arg3 activityStateChanges:(OptionSet_05ce0fa5)arg4 userObject:(id)arg5;	// IMP=0x00000000008e06d6
- (_Bool)_shouldShowKeyboardForElement:(const void *)arg1;	// IMP=0x00000000008e069b
- (void *)focusedSelectElementOptions;	// IMP=0x00000000008e0685
@property(readonly, nonatomic) const void *focusedElementInformation;
- (_Bool)_formControlRefreshEnabled;	// IMP=0x00000000008e061e
- (void)_hideKeyboard;	// IMP=0x00000000008e058e
- (void)_showKeyboard;	// IMP=0x00000000008e0529
- (void)takeTraitsFrom:(id)arg1;	// IMP=0x00000000008e04f8
- (id)rangeEnclosingPosition:(id)arg1 withGranularity:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x00000000008e04f0
- (_Bool)isPosition:(id)arg1 withinTextUnit:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x00000000008e04e8
- (id)positionFromPosition:(id)arg1 toBoundary:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x00000000008e04e0
- (_Bool)isPosition:(id)arg1 atBoundary:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x00000000008e0415
- (_Bool)hasSelection;	// IMP=0x00000000008e040d
- (id)fontForCaretSelection;	// IMP=0x00000000008e038b
- (id)textColorForCaretSelection;	// IMP=0x00000000008e0372
- (void)selectAll;	// IMP=0x00000000008e036c
- (_Bool)hasContent;	// IMP=0x00000000008e0344
- (void)setMarkedText:(id)arg1;	// IMP=0x00000000008e033e
- (id)wordRangeContainingCaretSelection;	// IMP=0x00000000008e0336
- (id)wordContainingCaretSelection;	// IMP=0x00000000008e032e
- (unsigned short)characterBeforeCaretSelection;	// IMP=0x00000000008e0326
- (void)moveForward:(unsigned int)arg1;	// IMP=0x00000000008e0320
- (void)moveBackward:(unsigned int)arg1;	// IMP=0x00000000008e031a
- (id)metadataDictionariesForDictationResults;	// IMP=0x00000000008e0312
@property(nonatomic) long long selectionGranularity;
- (id)automaticallySelectedOverlay;	// IMP=0x00000000008e02f8
- (void)setBottomBufferHeight:(double)arg1;	// IMP=0x00000000008e02f2
- (id)_moveToEndOfDocument:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x00000000008e02c6
- (id)_moveToEndOfLine:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x00000000008e029a
- (id)_moveToEndOfParagraph:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x00000000008e0238
- (id)_moveToEndOfWord:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x00000000008e020c
- (id)_moveToStartOfDocument:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x00000000008e01e0
- (id)_moveToStartOfLine:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x00000000008e01b4
- (id)_moveToStartOfParagraph:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x00000000008e0152
- (id)_moveToStartOfWord:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x00000000008e0126
- (id)_moveRight:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x00000000008e00fa
- (id)_moveLeft:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x00000000008e00ce
- (id)_moveDown:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x00000000008e00a2
- (id)_moveUp:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x00000000008e0076
- (void)_transpose;	// IMP=0x00000000008e005d
- (void)_deleteToEndOfParagraph;	// IMP=0x00000000008e0044
- (void)_deleteForwardAndNotify:(_Bool)arg1;	// IMP=0x00000000008e002b
- (void)_deleteToEndOfLine;	// IMP=0x00000000008e0012
- (void)_deleteToStartOfLine;	// IMP=0x00000000008dfff9
- (void)_deleteForwardByWord;	// IMP=0x00000000008dffe0
- (void)_deleteByWord;	// IMP=0x00000000008dffc7
- (void)executeEditCommandWithCallback:(id)arg1;	// IMP=0x00000000008dfe4f
- (void)keyboardScrollViewAnimatorDidFinishScrolling:(id)arg1;	// IMP=0x00000000008dfdf3
- (void)keyboardScrollViewAnimatorWillScroll:(id)arg1;	// IMP=0x00000000008dfde1
- (double)keyboardScrollViewAnimator:(id)arg1 distanceForIncrement:(unsigned char)arg2 inDirection:(unsigned char)arg3;	// IMP=0x00000000008dfc27
- (_Bool)isScrollableForKeyboardScrollViewAnimator:(id)arg1;	// IMP=0x00000000008dfbc2
- (void)dismissFilePicker;	// IMP=0x00000000008dfba5
- (id)filePickerAcceptedTypeIdentifiers;	// IMP=0x00000000008dfb7a
- (_Bool)_interpretKeyEvent:(id)arg1 isCharEvent:(_Bool)arg2;	// IMP=0x00000000008df962
- (void)_didHandleKeyEvent:(id)arg1 eventWasHandled:(_Bool)arg2;	// IMP=0x00000000008df8b3
- (void)handleKeyWebEvent:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000008df6c0
- (void)handleKeyWebEvent:(id)arg1;	// IMP=0x00000000008df666
- (void)generateSyntheticEditingCommand:(unsigned char)arg1;	// IMP=0x00000000008df64f
- (void)_handleKeyUIEvent:(id)arg1;	// IMP=0x00000000008df56b
- (_Bool)requiresKeyEvents;	// IMP=0x00000000008df563
- (_Bool)shouldSuppressUpdateCandidateView;	// IMP=0x00000000008df553
- (void)modifierFlagsDidChangeFrom:(long long)arg1 to:(long long)arg2;	// IMP=0x00000000008df412
- (void)_didFinishTextInteractionInTextInputContext:(id)arg1;	// IMP=0x00000000008df387
- (void)_willBeginTextInteractionInTextInputContext:(id)arg1;	// IMP=0x00000000008df303
- (void)_requestTextInputContextsInRect:(struct CGRect)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000008df12a
- (void)_focusTextInputContext:(id)arg1 placeCaretAt:(struct CGPoint)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000008def28
- (_Bool)_isTextInputContextFocused:(id)arg1;	// IMP=0x00000000008deeb1
- (struct CGRect)rectContainingCaretSelection;	// IMP=0x00000000008dee93
- (void)replaceRangeWithTextWithoutClosingTyping:(id)arg1 replacementText:(id)arg2;	// IMP=0x00000000008dee8d
- (void)setSelectedDOMRange:(id)arg1 affinityDownstream:(_Bool)arg2;	// IMP=0x00000000008dee87
- (id)selectedDOMRange;	// IMP=0x00000000008dee7f
- (struct _NSRange)_markedTextNSRange;	// IMP=0x00000000008dee6d
- (struct CGRect)rectForNSRange:(struct _NSRange)arg1;	// IMP=0x00000000008dee4f
- (struct _NSRange)selectionRange;	// IMP=0x00000000008dee3d
@property(readonly, nonatomic) UITextInteractionAssistant *interactionAssistant;
- (void)_updateTextInputTraits:(id)arg1;	// IMP=0x00000000008de957
- (id)textInputTraits;	// IMP=0x00000000008de8f7
- (void)removeEmojiAlternatives;	// IMP=0x00000000008de82a
- (void)addTextAlternatives:(id)arg1;	// IMP=0x00000000008de78d
@property(readonly, nonatomic) _Bool hasText;
- (void)insertText:(id)arg1 alternatives:(id)arg2 style:(long long)arg3;	// IMP=0x00000000008de4f2
- (void)insertText:(id)arg1;	// IMP=0x00000000008de3ab
- (_Bool)_shouldSimulateKeyboardInputOnTextInsertion;	// IMP=0x00000000008de38e
- (void)deleteBackward;	// IMP=0x00000000008de2f8
- (id)characterRangeAtPoint:(struct CGPoint)arg1;	// IMP=0x00000000008de2f0
- (id)closestPositionToPoint:(struct CGPoint)arg1 withinRange:(id)arg2;	// IMP=0x00000000008de2e8
- (id)closestPositionToPoint:(struct CGPoint)arg1;	// IMP=0x00000000008de2e0
- (struct CGRect)firstRectForRange:(id)arg1;	// IMP=0x00000000008de2c2
- (void)setBaseWritingDirection:(long long)arg1 forRange:(id)arg2;	// IMP=0x00000000008de22d
- (long long)baseWritingDirectionForPosition:(id)arg1 inDirection:(long long)arg2;	// IMP=0x00000000008de225
- (id)characterRangeByExtendingPosition:(id)arg1 inDirection:(long long)arg2;	// IMP=0x00000000008de21d
- (id)positionWithinRange:(id)arg1 farthestInDirection:(long long)arg2;	// IMP=0x00000000008de215
@property(readonly, nonatomic) id <UITextInputTokenizer> tokenizer;
- (long long)offsetFromPosition:(id)arg1 toPosition:(id)arg2;	// IMP=0x00000000008de166
- (long long)comparePosition:(id)arg1 toPosition:(id)arg2;	// IMP=0x00000000008de15e
- (id)positionFromPosition:(id)arg1 inDirection:(long long)arg2 offset:(long long)arg3;	// IMP=0x00000000008de156
- (id)positionFromPosition:(id)arg1 offset:(long long)arg2;	// IMP=0x00000000008de14e
- (id)textRangeFromPosition:(id)arg1 toPosition:(id)arg2;	// IMP=0x00000000008de146
@property(readonly, nonatomic) UITextPosition *endOfDocument;
@property(readonly, nonatomic) UITextPosition *beginningOfDocument;
- (void)unmarkText;	// IMP=0x00000000008de0fa
- (void)_setMarkedText:(id)arg1 highlights:(const void *)arg2 selectedRange:(struct _NSRange)arg3;	// IMP=0x00000000008ddfe8
- (void)setMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2;	// IMP=0x00000000008ddf9e
- (void)setAttributedMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2;	// IMP=0x00000000008ddc78
@property(copy, nonatomic) NSDictionary *markedTextStyle;
@property(readonly, nonatomic) UITextRange *markedTextRange;
- (id)markedText;	// IMP=0x00000000008ddabc
- (_Bool)hasMarkedText;	// IMP=0x00000000008dda98
@property(copy) UITextRange *selectedTextRange;
- (id)selectionRectsForRange:(id)arg1;	// IMP=0x00000000008dda47
- (struct CGRect)caretRectForPosition:(id)arg1;	// IMP=0x00000000008dda11
- (struct FloatRect)_scaledCaretRectForSelectionEnd:(struct FloatRect)arg1;	// IMP=0x00000000008dd6c8
- (struct FloatRect)_scaledCaretRectForSelectionStart:(struct FloatRect)arg1;	// IMP=0x00000000008dd669
- (void)replaceRange:(id)arg1 withText:(id)arg2;	// IMP=0x00000000008dd663
- (id)textInRange:(id)arg1;	// IMP=0x00000000008dd5fb
- (void)insertTextSuggestion:(id)arg1;	// IMP=0x00000000008dd3b1
- (void)_didChangeWebViewEditability;	// IMP=0x00000000008dd2f2
- (void)willFinishIgnoringCalloutBarFadeAfterPerformingAction;	// IMP=0x00000000008dd225
- (void)endSelectionChange;	// IMP=0x00000000008dd1e2
- (void)beginSelectionChange;	// IMP=0x00000000008dd19c
- (_Bool)_allowAnimatedUpdateSelectionRectViews;	// IMP=0x00000000008dd194
- (void)_updateAccessory;	// IMP=0x00000000008dd0a4
- (void)accessoryOpen;	// IMP=0x00000000008dd046
@property(readonly, nonatomic) UIWebFormAccessory *formAccessoryView;
- (void)accessoryAutoFill;	// IMP=0x00000000008dcf3b
- (void)accessoryTab:(_Bool)arg1;	// IMP=0x00000000008dce57
- (void)updateFocusedElementFocusedWithDataListDropdown:(_Bool)arg1;	// IMP=0x00000000008dce37
- (void)updateFocusedElementSelectedIndex:(unsigned int)arg1 allowsMultipleSelection:(_Bool)arg2;	// IMP=0x00000000008dcddf
- (void)updateFocusedElementValueAsColor:(id)arg1;	// IMP=0x00000000008dcc5c
- (void)updateFocusedElementValue:(id)arg1;	// IMP=0x00000000008dcb3c
- (void)accessoryDone;	// IMP=0x00000000008dcad4
- (void)accessoryClear;	// IMP=0x00000000008dca2e
- (void)_setDoubleTapGesturesEnabled:(_Bool)arg1;	// IMP=0x00000000008dc8ea
- (struct Color)_tapHighlightColorForFastClick:(_Bool)arg1;	// IMP=0x00000000008dc8c0
- (void)_becomeFirstResponderWithSelectionMovingForward:(_Bool)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000008dc7b5
- (void)_previousAccessoryTabForWebView:(id)arg1;	// IMP=0x00000000008dc7a1
- (void)_nextAccessoryTabForWebView:(id)arg1;	// IMP=0x00000000008dc78a
- (void)_didCommitLoadForMainFrame;	// IMP=0x00000000008dc6c3
- (void)_didStartProvisionalLoadForMainFrame;	// IMP=0x00000000008dc65e
- (void)runModalJavaScriptDialog:(void *)arg1;	// IMP=0x00000000008dc5f3
- (void)unsuppressSoftwareKeyboardUsingLastAutocorrectionContextIfNeeded;	// IMP=0x00000000008dc59b
- (void)updateSoftwareKeyboardSuppressionStateFromWebView;	// IMP=0x00000000008dc4f1
- (void)_handleAutocorrectionContext:(const void *)arg1;	// IMP=0x00000000008dc441
- (void)requestAutocorrectionContextWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000008dc1af
- (void)_cancelPendingAutocorrectionContextHandler;	// IMP=0x00000000008dc177
- (void)_invokePendingAutocorrectionContextHandler:(id)arg1;	// IMP=0x00000000008dc130
- (void)applyAutocorrection:(id)arg1 toString:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000008dbfad
- (void)requestDictationContext:(CDUnknownBlockType)arg1;	// IMP=0x00000000008dbf0b
- (void)replaceDictatedText:(id)arg1 withText:(id)arg2;	// IMP=0x00000000008dbe07
- (void)didInsertFinalDictationResult;	// IMP=0x00000000008dbdd5
- (void)willInsertFinalDictationResult;	// IMP=0x00000000008dbda3
- (struct CGRect)textLastRect;	// IMP=0x00000000008dbd12
- (struct CGRect)textFirstRect;	// IMP=0x00000000008dbc8f
- (_Bool)_selectionAtDocumentStart;	// IMP=0x00000000008dbc74
- (unsigned int)_characterInRelationToCaretSelection:(int)arg1;	// IMP=0x00000000008dbc2c
- (unsigned int)_characterBeforeCaretSelection;	// IMP=0x00000000008dbc00
- (void)updateSelectionWithExtentPoint:(struct CGPoint)arg1 withBoundary:(long long)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000008dbaa3
- (void)updateSelectionWithExtentPoint:(struct CGPoint)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000008db967
- (void)beginSelectionInDirection:(long long)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000008db88a
- (void)selectTextWithGranularity:(long long)arg1 atPoint:(struct CGPoint)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000008db73b
- (void)moveSelectionAtBoundary:(long long)arg1 inDirection:(long long)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000008db621
- (void)selectPositionAtBoundary:(long long)arg1 inDirection:(long long)arg2 fromPoint:(struct CGPoint)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000000008db4c4
- (void)_selectPositionAtPoint:(struct CGPoint)arg1 stayingWithinFocusedElement:(_Bool)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000008db3c1
- (void)selectPositionAtPoint:(struct CGPoint)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000008db35f
- (_Bool)_handleTapOverImageAnalysisInteractionButton:(struct CGPoint)arg1;	// IMP=0x00000000008db263
- (void)doAfterComputingImageAnalysisResultsForMarkup:(void *)arg1;	// IMP=0x00000000008daf03
- (id)imageAnalysisMarkupMenu;	// IMP=0x00000000008dacd7
- (void)requestRectsToEvadeForSelectionCommandsWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000008dab55
- (void)requestAutocorrectionRectsForString:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000008da9b2
@property(readonly, nonatomic) const void *autocorrectionData;
- (void)moveByOffset:(long long)arg1;	// IMP=0x00000000008da8d0
- (void)changeSelectionWithTouchesFrom:(struct CGPoint)arg1 to:(struct CGPoint)arg2 withGesture:(long long)arg3 withState:(long long)arg4;	// IMP=0x00000000008da7a2
- (void)changeSelectionWithTouchAt:(struct CGPoint)arg1 withSelectionTouch:(long long)arg2 baseIsStart:(_Bool)arg3 withFlags:(long long)arg4;	// IMP=0x00000000008da6aa
- (void)changeSelectionWithGestureAt:(struct CGPoint)arg1 withGesture:(long long)arg2 withState:(long long)arg3 withFlags:(long long)arg4;	// IMP=0x00000000008da576
- (void)changeSelectionWithGestureAt:(struct CGPoint)arg1 withGesture:(long long)arg2 withState:(long long)arg3;	// IMP=0x00000000008da55e
- (_Bool)_hasFocusedElement;	// IMP=0x00000000008da546
- (void)_didPerformAction:(SEL)arg1 sender:(id)arg2;	// IMP=0x00000000008da527
- (void)_willPerformAction:(SEL)arg1 sender:(id)arg2;	// IMP=0x00000000008da508
- (_Bool)_handleDOMPasteRequestWithResult:(unsigned char)arg1;	// IMP=0x00000000008da3e1
- (void)_accessibilityClearSelection;	// IMP=0x00000000008da3af
- (void)_accessibilityStoreSelection;	// IMP=0x00000000008da37d
- (void)_accessibilityRetrieveRectsAtSelectionOffset:(long long)arg1 withText:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000008da227
- (void)_accessibilityRetrieveRectsAtSelectionOffset:(long long)arg1 withText:(id)arg2;	// IMP=0x00000000008da212
- (void)_accessibilityRetrieveRectsEnclosingSelectionOffset:(long long)arg1 withGranularity:(long long)arg2;	// IMP=0x00000000008da13f
- (void)accessibilityRetrieveSpeakSelectionContent;	// IMP=0x00000000008da014
- (void)_defineForWebView:(id)arg1;	// IMP=0x00000000008da002
- (void)_showDictionary:(id)arg1;	// IMP=0x00000000008d9f75
- (void)_showTextStyleOptionsForWebView:(id)arg1;	// IMP=0x00000000008d9f4d
- (void)toggleUnderlineForWebView:(id)arg1;	// IMP=0x00000000008d9ee0
- (void)toggleItalicsForWebView:(id)arg1;	// IMP=0x00000000008d9e73
- (void)toggleBoldfaceForWebView:(id)arg1;	// IMP=0x00000000008d9e06
- (_Bool)shouldSynthesizeKeyEvents;	// IMP=0x00000000008d9dd8
- (void)selectAllForWebView:(id)arg1;	// IMP=0x00000000008d9d37
- (void)selectForWebView:(id)arg1;	// IMP=0x00000000008d9c5b
- (void)_pasteAsQuotationForWebView:(id)arg1;	// IMP=0x00000000008d9bba
- (void)pasteForWebView:(id)arg1;	// IMP=0x00000000008d9adc
- (void)cutForWebView:(id)arg1;	// IMP=0x00000000008d9ac3
- (void)copyForWebView:(id)arg1;	// IMP=0x00000000008d9a2d
- (void)_keyboardDidRequestDismissal:(id)arg1;	// IMP=0x00000000008d9a01
- (void)_didHideMenu:(id)arg1;	// IMP=0x00000000008d99d9
- (void)_willHideMenu:(id)arg1;	// IMP=0x00000000008d99c5
- (id)targetForActionForWebView:(SEL)arg1 withSender:(id)arg2;	// IMP=0x00000000008d9996
- (id)targetForAction:(SEL)arg1 withSender:(id)arg2;	// IMP=0x00000000008d9963
- (_Bool)canPerformActionForWebView:(SEL)arg1 withSender:(id)arg2;	// IMP=0x00000000008d8bd9
- (_Bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;	// IMP=0x00000000008d89a3
- (_Bool)shouldAllowAppHighlightCreation;	// IMP=0x00000000008d8889
- (void)tintColorDidChange;	// IMP=0x00000000008d87c9
- (void)_updateInteractionTintColor:(id)arg1;	// IMP=0x00000000008d8798
- (id)_cascadeInteractionTintColor;	// IMP=0x00000000008d85ba
@property(retain, nonatomic) UIColor *selectionHighlightColor;
@property(retain, nonatomic) UIColor *selectionBarColor;
@property(retain, nonatomic) UIColor *insertionPointColor;
- (id)textStylingAtPosition:(id)arg1 inDirection:(long long)arg2;	// IMP=0x00000000008d83d2
- (void)toggleStrikeThroughForWebView:(id)arg1;	// IMP=0x00000000008d83c0
- (void)_setTextColorForWebView:(id)arg1 sender:(id)arg2;	// IMP=0x00000000008d825e
- (void)_setFontSizeForWebView:(double)arg1 sender:(id)arg2;	// IMP=0x00000000008d81d7
- (void)_setFontForWebView:(id)arg1 sender:(id)arg2;	// IMP=0x00000000008d7fe5
- (void)decreaseSizeForWebView:(id)arg1;	// IMP=0x00000000008d7f0f
- (void)increaseSizeForWebView:(id)arg1;	// IMP=0x00000000008d7e39
- (void)_toggleStrikeThroughForWebView:(id)arg1;	// IMP=0x00000000008d7da3
- (void)_changeListTypeForWebView:(id)arg1;	// IMP=0x00000000008d7d8e
- (void)_decreaseListLevelForWebView:(id)arg1;	// IMP=0x00000000008d7d79
- (void)_increaseListLevelForWebView:(id)arg1;	// IMP=0x00000000008d7d64
- (void)pasteAndMatchStyleForWebView:(id)arg1;	// IMP=0x00000000008d7d52
- (void)_pasteAndMatchStyleForWebView:(id)arg1;	// IMP=0x00000000008d7cbc
- (void)alignJustifiedForWebView:(id)arg1;	// IMP=0x00000000008d7caa
- (void)_alignJustifiedForWebView:(id)arg1;	// IMP=0x00000000008d7c14
- (void)alignCenterForWebView:(id)arg1;	// IMP=0x00000000008d7c02
- (void)_alignCenterForWebView:(id)arg1;	// IMP=0x00000000008d7b6c
- (void)alignRightForWebView:(id)arg1;	// IMP=0x00000000008d7b5a
- (void)_alignRightForWebView:(id)arg1;	// IMP=0x00000000008d7ac4
- (void)alignLeftForWebView:(id)arg1;	// IMP=0x00000000008d7ab2
- (void)_alignLeftForWebView:(id)arg1;	// IMP=0x00000000008d7a1c
- (void)outdentForWebView:(id)arg1;	// IMP=0x00000000008d7a0a
- (void)_outdentForWebView:(id)arg1;	// IMP=0x00000000008d7974
- (void)indentForWebView:(id)arg1;	// IMP=0x00000000008d7962
- (void)_indentForWebView:(id)arg1;	// IMP=0x00000000008d78cc
- (void)insertNestedUnorderedListForWebView:(id)arg1;	// IMP=0x00000000008d78ba
- (void)_insertNestedUnorderedListForWebView:(id)arg1;	// IMP=0x00000000008d7824
- (void)insertNestedOrderedListForWebView:(id)arg1;	// IMP=0x00000000008d7812
- (void)_insertNestedOrderedListForWebView:(id)arg1;	// IMP=0x00000000008d777c
- (void)insertUnorderedListForWebView:(id)arg1;	// IMP=0x00000000008d776a
- (void)_insertUnorderedListForWebView:(id)arg1;	// IMP=0x00000000008d76d4
- (void)insertOrderedListForWebView:(id)arg1;	// IMP=0x00000000008d76c2
- (void)_insertOrderedListForWebView:(id)arg1;	// IMP=0x00000000008d762c
- (void)replaceForWebView:(id)arg1;	// IMP=0x00000000008d75f4
- (void)_transliterateChineseForWebView:(id)arg1;	// IMP=0x00000000008d75a5
- (void)_promptForReplaceForWebView:(id)arg1;	// IMP=0x00000000008d754f
- (void)selectWordBackward;	// IMP=0x00000000008d7512
- (void)replaceText:(id)arg1 withText:(id)arg2;	// IMP=0x00000000008d740e
- (_Bool)isReplaceAllowed;	// IMP=0x00000000008d73f7
- (void)makeTextWritingDirectionRightToLeftForWebView:(id)arg1;	// IMP=0x00000000008d73dd
- (void)makeTextWritingDirectionLeftToRightForWebView:(id)arg1;	// IMP=0x00000000008d73c3
- (void)makeTextWritingDirectionNaturalForWebView:(id)arg1;	// IMP=0x00000000008d73ac
- (id)alternativesForSelectedText;	// IMP=0x00000000008d72be
- (id)selectedText;	// IMP=0x00000000008d7294
- (void)_addShortcutForWebView:(id)arg1;	// IMP=0x00000000008d7201
- (void)_translateForWebView:(id)arg1;	// IMP=0x00000000008d712d
- (void)_shareForWebView:(id)arg1;	// IMP=0x00000000008d7067
- (void)_lookupForWebView:(id)arg1;	// IMP=0x00000000008d6fd3
- (void)_pasteAndMatchStyle:(id)arg1;	// IMP=0x00000000008d6f6c
- (void)_pasteAsQuotation:(id)arg1;	// IMP=0x00000000008d6f05
- (void)_changeListType:(id)arg1;	// IMP=0x00000000008d6e9e
- (void)_decreaseListLevel:(id)arg1;	// IMP=0x00000000008d6e37
- (void)_increaseListLevel:(id)arg1;	// IMP=0x00000000008d6dd0
- (void)_insertNestedUnorderedList:(id)arg1;	// IMP=0x00000000008d6d69
- (void)_insertNestedOrderedList:(id)arg1;	// IMP=0x00000000008d6d02
- (void)_insertUnorderedList:(id)arg1;	// IMP=0x00000000008d6c9b
- (void)_insertOrderedList:(id)arg1;	// IMP=0x00000000008d6c34
- (void)_toggleStrikeThrough:(id)arg1;	// IMP=0x00000000008d6bcd
- (void)_outdent:(id)arg1;	// IMP=0x00000000008d6b66
- (void)_indent:(id)arg1;	// IMP=0x00000000008d6aff
- (void)_alignRight:(id)arg1;	// IMP=0x00000000008d6a98
- (void)_alignLeft:(id)arg1;	// IMP=0x00000000008d6a31
- (void)_alignJustified:(id)arg1;	// IMP=0x00000000008d69ca
- (void)_alignCenter:(id)arg1;	// IMP=0x00000000008d6963
- (void)makeTextWritingDirectionRightToLeft:(id)arg1;	// IMP=0x00000000008d68fc
- (void)makeTextWritingDirectionLeftToRight:(id)arg1;	// IMP=0x00000000008d6895
- (void)makeTextWritingDirectionNatural:(id)arg1;	// IMP=0x00000000008d682e
- (void)pasteAndMatchStyle:(id)arg1;	// IMP=0x00000000008d67c7
- (void)decreaseSize:(id)arg1;	// IMP=0x00000000008d6760
- (void)increaseSize:(id)arg1;	// IMP=0x00000000008d66f9
- (void)toggleUnderline:(id)arg1;	// IMP=0x00000000008d6692
- (void)toggleItalics:(id)arg1;	// IMP=0x00000000008d662b
- (void)toggleBoldface:(id)arg1;	// IMP=0x00000000008d65c4
- (void)selectAll:(id)arg1;	// IMP=0x00000000008d655d
- (void)select:(id)arg1;	// IMP=0x00000000008d64f6
- (void)replace:(id)arg1;	// IMP=0x00000000008d648f
- (void)paste:(id)arg1;	// IMP=0x00000000008d6428
- (void)cut:(id)arg1;	// IMP=0x00000000008d63c1
- (void)copy:(id)arg1;	// IMP=0x00000000008d635a
- (void)_previousAccessoryTab:(id)arg1;	// IMP=0x00000000008d62f3
- (void)_nextAccessoryTab:(id)arg1;	// IMP=0x00000000008d628c
- (void)_transliterateChinese:(id)arg1;	// IMP=0x00000000008d6225
- (void)_showTextStyleOptions:(id)arg1;	// IMP=0x00000000008d61be
- (void)_share:(id)arg1;	// IMP=0x00000000008d6157
- (void)_promptForReplace:(id)arg1;	// IMP=0x00000000008d60f0
- (void)_translate:(id)arg1;	// IMP=0x00000000008d6089
- (void)_lookup:(id)arg1;	// IMP=0x00000000008d6022
- (void)_define:(id)arg1;	// IMP=0x00000000008d5fbb
- (void)_addShortcut:(id)arg1;	// IMP=0x00000000008d5f54
- (void)findAndReplace:(id)arg1;	// IMP=0x00000000008d5eed
- (void)findPrevious:(id)arg1;	// IMP=0x00000000008d5e86
- (void)findNext:(id)arg1;	// IMP=0x00000000008d5e1f
- (void)find:(id)arg1;	// IMP=0x00000000008d5db8
- (void)captureTextFromCamera:(id)arg1;	// IMP=0x00000000008d5d51
- (id)supportedPasteboardTypesForCurrentSelection;	// IMP=0x00000000008d5c15
@property(readonly, nonatomic) UIView *inputAccessoryViewForWebView;
- (id)inputAccessoryView;	// IMP=0x00000000008d5b9e
@property(readonly, nonatomic) UITextInputAssistantItem *inputAssistantItemForWebView;
- (id)inputAssistantItem;	// IMP=0x00000000008d5b4e
- (_Bool)requiresAccessoryView;	// IMP=0x00000000008d5ae2
- (_Bool)_elementTypeRequiresAccessoryView:(int)arg1;	// IMP=0x00000000008d5a9b
- (void)_didEndScrollingOrZooming;	// IMP=0x00000000008d5a34
- (void)scrollViewWillStartPanOrPinchGesture;	// IMP=0x00000000008d59da
- (void)_willStartScrollingOrZooming;	// IMP=0x00000000008d59a0
- (void)_positionInformationDidChange:(const void *)arg1;	// IMP=0x00000000008d588f
- (void)_invalidateCurrentPositionInformation;	// IMP=0x00000000008d56ed
- (void)clearSelection;	// IMP=0x00000000008d56c1
- (void)pasteWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000008d5563
- (void)setUpTextSelectionAssistant;	// IMP=0x00000000008d54fe
- (void)_attemptSyntheticClickAtLocation:(struct CGPoint)arg1 modifierFlags:(long long)arg2;	// IMP=0x00000000008d5453
- (void)_twoFingerDoubleTapRecognized:(id)arg1;	// IMP=0x00000000008d53d5
- (void)_nonBlockingDoubleTapRecognized:(id)arg1;	// IMP=0x00000000008d5395
- (void)_resetIsDoubleTapPending;	// IMP=0x00000000008d5384
- (void)_doubleTapRecognized:(id)arg1;	// IMP=0x00000000008d525b
- (void)_singleTapRecognized:(id)arg1;	// IMP=0x00000000008d4ffb
- (void)_didCompleteSyntheticClick;	// IMP=0x00000000008d4f07
- (void)_didNotHandleTapAsClick:(const struct IntPoint *)arg1;	// IMP=0x00000000008d4e71
- (void)_commitPotentialTapFailed;	// IMP=0x00000000008d4de8
- (void)_doubleTapDidFail:(id)arg1;	// IMP=0x00000000008d4d52
- (void)_singleTapDidReset:(id)arg1;	// IMP=0x00000000008d4c9c
- (void)_singleTapIdentified:(id)arg1;	// IMP=0x00000000008d4ad1
- (void)_endPotentialTapAndEnableDoubleTapGesturesIfNecessary;	// IMP=0x00000000008d499a
- (void)_longPressRecognized:(id)arg1;	// IMP=0x00000000008d48af
- (void)_twoFingerSingleTapGestureRecognized:(id)arg1;	// IMP=0x00000000008d4759
- (void)_doubleTapRecognizedForDoubleClick:(id)arg1;	// IMP=0x00000000008d4694
- (void)_highlightLongPressRecognized:(id)arg1;	// IMP=0x00000000008d448a
- (ObjectIdentifier_e7ec9792)nextTapIdentifier;	// IMP=0x00000000008d446a
- (id)webSelectionRects;	// IMP=0x00000000008d4430
- (id)webSelectionRectsForSelectionGeometries:(const void *)arg1;	// IMP=0x00000000008d4230
- (_Bool)textInteractionGesture:(long long)arg1 shouldBeginAtPoint:(struct CGPoint)arg2;	// IMP=0x00000000008d3f26
- (_Bool)pointIsNearMarkedText:(struct CGPoint)arg1;	// IMP=0x00000000008d3d9b
- (_Bool)hasSelectablePositionAtPoint:(struct CGPoint)arg1;	// IMP=0x00000000008d3b30
- (_Bool)canShowNonEmptySelectionView;	// IMP=0x00000000008d3aff
- (void)_fadeTapHighlightViewIfNeeded;	// IMP=0x00000000008d39b4
- (void)_finishInteraction;	// IMP=0x00000000008d3997
- (void)_cancelInteraction;	// IMP=0x00000000008d396f
- (_Bool)gestureRecognizerShouldBegin:(id)arg1;	// IMP=0x00000000008d32d4
- (_Bool)_shouldToggleSelectionCommandsAfterTapAt:(struct CGPoint)arg1;	// IMP=0x00000000008d3228
- (_Bool)_pointIsInsideSelectionRect:(struct CGPoint)arg1 outBoundingRect:(struct FloatRect *)arg2;	// IMP=0x00000000008d30e2
- (id)_uiTextSelectionRects;	// IMP=0x00000000008d2eee
- (id)_dataDetectionResults;	// IMP=0x00000000008d2ed6
- (void)_invokeAndRemovePendingHandlersValidForCurrentPositionInformation;	// IMP=0x00000000008d2c55
- (_Bool)_currentPositionInformationIsApproximatelyValidForRequest:(const struct InteractionInformationRequest *)arg1 radiusForApproximation:(int)arg2;	// IMP=0x00000000008d2c2e
- (_Bool)_hasValidOutstandingPositionInformationRequest:(const struct InteractionInformationRequest *)arg1;	// IMP=0x00000000008d2c0a
- (_Bool)_currentPositionInformationIsValidForRequest:(const struct InteractionInformationRequest *)arg1;	// IMP=0x00000000008d2be3
- (void)requestAsynchronousPositionInformationUpdate:(struct InteractionInformationRequest)arg1;	// IMP=0x00000000008d2b5b
- (_Bool)ensurePositionInformationIsUpToDate:(struct InteractionInformationRequest)arg1;	// IMP=0x00000000008d29bb
- (void)doAfterPositionInformationUpdate:(CDUnknownBlockType)arg1 forRequest:(struct InteractionInformationRequest)arg2;	// IMP=0x00000000008d279f
- (SEL)_actionForLongPress;	// IMP=0x00000000008d2783
- (SEL)_actionForLongPressFromPositionInformation:(const void *)arg1;	// IMP=0x00000000008d26f2
- (void)_showDataDetectorsUIForPositionInformation:(const void *)arg1;	// IMP=0x00000000008d26d5
- (void)_showDataDetectorsUI;	// IMP=0x00000000008d26b9
- (void)_showLinkSheet;	// IMP=0x00000000008d269c
- (void)_showAttachmentSheet;	// IMP=0x00000000008d2504
- (void)_showImageSheet;	// IMP=0x00000000008d24e7
- (_Bool)gestureRecognizer:(id)arg1 shouldBeRequiredToFailByGestureRecognizer:(id)arg2;	// IMP=0x00000000008d2461
- (_Bool)gestureRecognizer:(id)arg1 shouldRequireFailureOfGestureRecognizer:(id)arg2;	// IMP=0x00000000008d23b3
- (_Bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;	// IMP=0x00000000008d1e7b
- (_Bool)_shouldAdditionallyRecognizeGestureRecognizer:(id)arg1 simultaneouslyWithGestureRecognizer:(id)arg2;	// IMP=0x00000000008d1e73
- (_Bool)gestureRecognizer:(id)arg1 canBePreventedByGestureRecognizer:(id)arg2;	// IMP=0x00000000008d1df1
- (_Bool)gestureRecognizer:(id)arg1 canPreventGestureRecognizer:(id)arg2;	// IMP=0x00000000008d1d70
- (struct CGRect)_selectionClipRect;	// IMP=0x00000000008d1cff
@property(readonly, nonatomic) UIView *inputViewForWebView;
- (id)inputView;	// IMP=0x00000000008d1c3c
- (void)resetShouldZoomToFocusRectAfterShowingKeyboard;	// IMP=0x00000000008d1c0b
- (void)_zoomToRevealFocusedElement;	// IMP=0x00000000008d1a73
- (void)_keyboardDidShow;	// IMP=0x00000000008d1a27
- (void)_keyboardWillShow;	// IMP=0x00000000008d1a16
- (struct FloatRect)rectToRevealWhenZoomingToFocusedElement;	// IMP=0x00000000008d193e
- (_Bool)_requiresKeyboardResetOnReload;	// IMP=0x00000000008d1936
- (_Bool)_requiresKeyboardWhenFirstResponder;	// IMP=0x00000000008d18c5
- (_Bool)_disableAutomaticKeyboardUI;	// IMP=0x00000000008d188e
- (_Bool)_shouldShowAutomaticKeyboardUIIgnoringInputMode;	// IMP=0x00000000008d1829
- (_Bool)shouldShowAutomaticKeyboardUI;	// IMP=0x00000000008d17ce
- (void)_scrollingNodeScrollingDidEnd:(unsigned long long)arg1;	// IMP=0x00000000008d171f
- (void)_scrollingNodeScrollingWillBegin:(unsigned long long)arg1;	// IMP=0x00000000008d1702
- (void)_didScroll;	// IMP=0x00000000008d16c7
- (void)_cancelTouchEventGestureRecognizer;	// IMP=0x00000000008d16aa
- (void)_cancelLongPressGestureRecognizer;	// IMP=0x00000000008d168d
- (void)_handleSmartMagnificationInformationForPotentialTap:(ObjectIdentifier_e7ec9792)arg1 renderRect:(const struct FloatRect *)arg2 fitEntireRect:(_Bool)arg3 viewportMinimumScale:(double)arg4 viewportMaximumScale:(double)arg5 nodeIsRootLevel:(_Bool)arg6;	// IMP=0x00000000008d12b7
- (void)_disableDoubleTapGesturesDuringTapIfNecessary:(ObjectIdentifier_e7ec9792)arg1;	// IMP=0x00000000008d1294
- (_Bool)_mayDisableDoubleTapGesturesDuringSingleTap;	// IMP=0x00000000008d1284
- (void)_didGetTapHighlightForRequest:(ObjectIdentifier_e7ec9792)arg1 color:(const struct Color *)arg2 quads:(const void *)arg3 topLeftRadius:(const struct IntSize *)arg4 topRightRadius:(const struct IntSize *)arg5 bottomLeftRadius:(const struct IntSize *)arg6 bottomRightRadius:(const struct IntSize *)arg7 nodeHasBuiltInClickHandling:(_Bool)arg8;	// IMP=0x00000000008d104c
- (void)_showTapHighlight;	// IMP=0x00000000008d0e64
@property(readonly, nonatomic) UIGestureRecognizer *imageAnalysisGestureRecognizer;
@property(readonly, nonatomic) struct CGRect tapHighlightViewRect;
- (void)_updateTapHighlight;	// IMP=0x00000000008d071d
- (_Bool)_isTouchEndDeferringGesture:(id)arg1;	// IMP=0x00000000008d06ed
- (_Bool)_isTouchStartDeferringGesture:(id)arg1;	// IMP=0x00000000008d06bd
- (void)_doneDeferringTouchEnd:(_Bool)arg1;	// IMP=0x00000000008d0594
- (void)_doneDeferringTouchStart:(_Bool)arg1;	// IMP=0x00000000008d03b1
- (id)_touchEndDeferringGestures;	// IMP=0x00000000008d031b
- (id)_touchStartDeferringGestures;	// IMP=0x00000000008d0285
@property(readonly, nonatomic) NSArray *deferringGestures;
@property(readonly, nonatomic) void *gestureRecognizerConsistencyEnforcer;
@property(readonly, nonatomic) UIWebTouchEventsGestureRecognizer *touchEventGestureRecognizer;
- (void)_webTouchEvent:(const void *)arg1 preventsNativeGestures:(_Bool)arg2;	// IMP=0x00000000008d0126
- (void)_inspectorNodeSearchRecognized:(id)arg1;	// IMP=0x00000000008d005b
- (void)_resetPanningPreventionFlags;	// IMP=0x00000000008d003f
- (id)touchActionActiveTouches;	// IMP=0x00000000008d0022
- (_Bool)gestureRecognizerMayDoubleTapToZoomWebView:(id)arg1;	// IMP=0x00000000008cfffd
- (_Bool)gestureRecognizerMayPinchToZoomWebView:(id)arg1;	// IMP=0x00000000008cff18
- (_Bool)gestureRecognizerMayPanWebView:(id)arg1;	// IMP=0x00000000008cfe83
- (_Bool)gestureRecognizer:(id)arg1 shouldReceivePress:(id)arg2;	// IMP=0x00000000008cfe7b
- (_Bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;	// IMP=0x00000000008cfcb3
- (void)_handleTouchActionsForTouchEvent:(const void *)arg1;	// IMP=0x00000000008cfb45
- (void)_webTouchEventsRecognized:(id)arg1;	// IMP=0x00000000008cf4e9
- (_Bool)_touchEventsMustRequireGestureRecognizerToFail:(id)arg1;	// IMP=0x00000000008cf452
- (optional_53a37146)activeTouchIdentifierForGestureRecognizer:(id)arg1;	// IMP=0x00000000008cf298
- (void)cancelPointersForGestureRecognizer:(id)arg1;	// IMP=0x00000000008cef91
- (_Bool)resignFirstResponderForWebView;	// IMP=0x00000000008ceda9
- (void)endEditingAndUpdateFocusAppearanceWithReason:(long long)arg1;	// IMP=0x00000000008cec8b
- (_Bool)resignFirstResponder;	// IMP=0x00000000008cec6a
- (_Bool)becomeFirstResponderForWebView;	// IMP=0x00000000008cea82
- (_Bool)becomeFirstResponder;	// IMP=0x00000000008cea61
- (_Bool)canBecomeFirstResponderForWebView;	// IMP=0x00000000008cea4d
- (_Bool)canBecomeFirstResponder;	// IMP=0x00000000008cea3d
- (void)_resetInputViewDeferral;	// IMP=0x00000000008cea10
- (void)_scheduleResetInputViewDeferralAfterBecomingFirstResponder;	// IMP=0x00000000008ce9d0
- (void)_cancelPreviousResetInputViewDeferralRequest;	// IMP=0x00000000008ce9aa
- (void)_endEditing;	// IMP=0x00000000008ce94c
- (_Bool)setIsEditable:(_Bool)arg1;	// IMP=0x00000000008ce930
@property(readonly, nonatomic) _Bool isEditable;
@property(readonly, nonatomic) _Bool shouldHideSelectionWhenScrolling;
@property(readonly, nonatomic) struct CGPoint lastInteractionLocation;
@property(nonatomic) __weak id <UITextInputDelegate> inputDelegate;
@property(readonly, nonatomic) const void *positionInformation;
- (id)hitTest:(struct CGPoint)arg1 withEvent:(id)arg2;	// IMP=0x00000000008ce696
- (void)_disableInspectorNodeSearch;	// IMP=0x00000000008ce62e
- (void)_enableInspectorNodeSearch;	// IMP=0x00000000008ce5a4
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;	// IMP=0x00000000008ce46d
- (void)scrollSelectionToVisible:(_Bool)arg1;	// IMP=0x00000000008ce467
- (void)cancelAutoscroll;	// IMP=0x00000000008ce435
- (void)startAutoscroll:(struct CGPoint)arg1;	// IMP=0x00000000008ce3e4
- (struct CGRect)unobscuredContentRect;	// IMP=0x00000000008ce3b9
- (id)_scroller;	// IMP=0x00000000008ce398
- (double)inverseScale;	// IMP=0x00000000008ce341
- (id)unscaledView;	// IMP=0x00000000008ce330
- (void)_updateLongPressAndHighlightLongPressGestures;	// IMP=0x00000000008ce26c
- (void)_didChangeLinkPreviewAvailability;	// IMP=0x00000000008ce25a
- (void)_addDefaultGestureRecognizers;	// IMP=0x00000000008cdfee
- (void)_removeDefaultGestureRecognizers;	// IMP=0x00000000008cdd82
- (void)_cancelPendingKeyEventHandler;	// IMP=0x00000000008cdcb9
- (void)cleanUpInteractionPreviewContainers;	// IMP=0x00000000008cdca7
- (void)cleanUpInteraction;	// IMP=0x00000000008cd1f3
- (void)setUpInteraction;	// IMP=0x00000000008cc411
- (void)_createAndConfigureLongPressGestureRecognizer;	// IMP=0x00000000008cc364
- (void)_createAndConfigureHighlightLongPressGestureRecognizer;	// IMP=0x00000000008cc2ca
- (void)_createAndConfigureDoubleTapGestureRecognizer;	// IMP=0x00000000008cc1c3
- (id)_formInputSession;	// IMP=0x00000000008cc1b2
@property(readonly, nonatomic) _Bool preventsPanningInYAxis;
@property(readonly, nonatomic) _Bool preventsPanningInXAxis;
@property(readonly, nonatomic) UIWKTextInteractionAssistant *textInteractionAssistant;
@property(readonly, nonatomic) _Bool isShowingDataListSuggestions;
- (void)_setDataListSuggestionsControl:(id)arg1;	// IMP=0x00000000008f3e68
- (void)_selectDataListOption:(long long)arg1;	// IMP=0x00000000008f3e3a
- (void)_dismissContactPickerWithContacts:(id)arg1;	// IMP=0x00000000008f3e1d
- (id)_contentsOfUserInterfaceItem:(id)arg1;	// IMP=0x00000000008f376b
- (double)timePickerValueMinute;	// IMP=0x00000000008f370a
- (double)timePickerValueHour;	// IMP=0x00000000008f36a9
- (void)setTimePickerValueToHour:(long long)arg1 minute:(long long)arg2;	// IMP=0x00000000008f3638
@property(readonly, nonatomic) NSString *formInputLabel;
@property(readonly, nonatomic) NSString *selectFormPopoverTitle;
@property(readonly, nonatomic) NSString *textContentTypeForTesting;
- (void)setSelectedColorForColorPicker:(id)arg1;	// IMP=0x00000000008f354e
- (_Bool)selectFormAccessoryHasCheckedItemAtRow:(long long)arg1;	// IMP=0x00000000008f34f0
- (void)selectFormAccessoryPickerRow:(long long)arg1;	// IMP=0x00000000008f348f
- (void)_simulateLongPressActionAtLocation:(struct CGPoint)arg1;	// IMP=0x00000000008f3270
- (void)_simulateElementAction:(long long)arg1 atLocation:(struct CGPoint)arg2;	// IMP=0x00000000008f3052
- (void)_simulateTextEntered:(id)arg1;	// IMP=0x00000000008f3040
@property(readonly, nonatomic, getter=isAnimatingDragCancel) _Bool animatingDragCancel;
@property(readonly, nonatomic) WKFormSelectControl *selectControl;
@property(readonly, nonatomic) WKDateTimeInputControl *dateTimeInputControl;
- (void)_doAfterReceivingEditDragSnapshotForTesting:(CDUnknownBlockType)arg1;	// IMP=0x00000000008f2f37
- (void)_previewItemControllerDidCancelPreview:(id)arg1;	// IMP=0x00000000008f926b
- (id)_presentationRectsForPreviewItemController:(id)arg1;	// IMP=0x00000000008f9023
- (id)_presentationSnapshotForPreviewItemController:(id)arg1;	// IMP=0x00000000008f8f63
- (void)_previewItemController:(id)arg1 didDismissPreview:(id)arg2 committing:(_Bool)arg3;	// IMP=0x00000000008f8e84
- (void)_interactionStoppedFromPreviewItemController:(id)arg1;	// IMP=0x00000000008f8e1f
- (void)_interactionStartedFromPreviewItemController:(id)arg1;	// IMP=0x00000000008f8df1
- (void)_previewItemController:(id)arg1 commitPreview:(id)arg2;	// IMP=0x00000000008f8c92
- (id)_presentedViewControllerForPreviewItemController:(id)arg1;	// IMP=0x00000000008f7c7b
- (struct CGRect)_presentationRectForPreviewItemController:(id)arg1;	// IMP=0x00000000008f7c52
- (id)_dataForPreviewItemController:(id)arg1 atPosition:(struct CGPoint)arg2 type:(long long *)arg3;	// IMP=0x00000000008f7518
- (_Bool)_interactionShouldBeginFromPreviewItemController:(id)arg1 forPosition:(struct CGPoint)arg2;	// IMP=0x00000000008f7324
- (void)contextMenuInteraction:(id)arg1 willEndForConfiguration:(id)arg2 animator:(id)arg3;	// IMP=0x00000000008f7077
- (void)contextMenuInteraction:(id)arg1 willPerformPreviewActionForMenuWithConfiguration:(id)arg2 animator:(id)arg3;	// IMP=0x00000000008f6b01
- (id)_contextMenuInteraction:(id)arg1 styleForMenuWithConfiguration:(id)arg2;	// IMP=0x00000000008f6a95
- (id)contextMenuInteraction:(id)arg1 configuration:(id)arg2 dismissalPreviewForItemWithIdentifier:(id)arg3;	// IMP=0x00000000008f6a6d
- (void)contextMenuInteraction:(id)arg1 willDisplayMenuForConfiguration:(id)arg2 animator:(id)arg3;	// IMP=0x00000000008f6849
- (id)contextMenuInteraction:(id)arg1 configuration:(id)arg2 highlightPreviewForItemWithIdentifier:(id)arg3;	// IMP=0x00000000008f6809
- (id)_contextMenuInteraction:(id)arg1 overrideSuggestedActionsForConfiguration:(id)arg2;	// IMP=0x00000000008f67d1
- (void)continueContextMenuInteractionWithDataDetectors:(CDUnknownBlockType)arg1;	// IMP=0x00000000008f65ae
- (void)continueContextMenuInteraction:(CDUnknownBlockType)arg1;	// IMP=0x00000000008f5822
- (void)_contextMenuInteraction:(id)arg1 configurationForMenuAtLocation:(struct CGPoint)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x00000000008f55e1
- (id)contextMenuInteraction:(id)arg1 configurationForMenuAtLocation:(struct CGPoint)arg2;	// IMP=0x00000000008f55d9
- (void)assignLegacyDataForContextMenuInteraction;	// IMP=0x00000000008f4197
- (void)_unregisterPreview;	// IMP=0x00000000008f40e3
- (void)_registerPreview;	// IMP=0x00000000008f3eae

// Remaining properties
@property(copy, nonatomic) NSIndexSet *PINEntrySeparatorIndexes;
@property(readonly, nonatomic) RTIInputSystemSourceSession *_rtiSourceSession;
@property(nonatomic) long long _textInputSource;
@property(nonatomic) _Bool acceptsDictationSearchResults;
@property(nonatomic) _Bool acceptsEmoji;
@property(nonatomic) _Bool acceptsFloatingKeyboard;
@property(nonatomic) _Bool acceptsInitialEmojiKeyboard;
@property(nonatomic) _Bool acceptsPayloads;
@property(nonatomic) _Bool acceptsSplitKeyboard;
@property(nonatomic) long long autocapitalizationType;
@property(copy, nonatomic) NSString *autocorrectionContext;
@property(nonatomic) long long autocorrectionType;
@property(nonatomic) _Bool contentsIsSingleValue;
@property(readonly, nonatomic) long long cursorBehavior;
@property(readonly, copy) NSString *debugDescription;
@property(nonatomic) _Bool deferBecomingResponder;
@property(readonly, copy) NSString *description;
@property(nonatomic, getter=isDevicePasscodeEntry) _Bool devicePasscodeEntry;
@property(nonatomic) _Bool disableHandwritingKeyboard;
@property(nonatomic) _Bool disableInputBars;
@property(nonatomic) _Bool disablePrediction;
@property(nonatomic) _Bool displaySecureEditsUsingPlainText;
@property(nonatomic) _Bool displaySecureTextUsingPlainText;
@property(nonatomic) int emptyContentReturnKeyType;
@property(nonatomic) _Bool enablesReturnKeyAutomatically;
@property(nonatomic) _Bool enablesReturnKeyOnNonWhiteSpaceContent;
@property(nonatomic) struct UIEdgeInsets floatingKeyboardEdgeInsets;
@property(nonatomic) _Bool forceDefaultDictationInfo;
@property(nonatomic) long long forceDictationKeyboardType;
@property(nonatomic) _Bool forceDisableDictation;
@property(nonatomic) _Bool forceEnableDictation;
@property(nonatomic) _Bool forceFloatingKeyboard;
@property(nonatomic) _Bool hasDefaultContents;
@property(readonly) unsigned long long hash;
@property(nonatomic) _Bool hidePrediction;
@property(retain, nonatomic) UIInputContextHistory *inputContextHistory;
@property(readonly, nonatomic) id insertDictationResultPlaceholder;
@property(nonatomic) unsigned long long insertionPointWidth;
@property(nonatomic) _Bool isCarPlayIdiom;
@property(nonatomic) _Bool isSingleLineDocument;
@property(nonatomic) long long keyboardAppearance;
@property(nonatomic) long long keyboardType;
@property(nonatomic) _Bool learnsCorrections;
@property(nonatomic) _Bool loadKeyboardsForSiriLanguage;
@property(copy, nonatomic) UITextInputPasswordRules *passwordRules;
@property(nonatomic) _Bool preferOnlineDictation;
@property(nonatomic) long long preferredKeyboardStyle;
@property(copy, nonatomic) NSString *recentInputIdentifier;
@property(copy, nonatomic) NSString *responseContext;
@property(nonatomic) _Bool returnKeyGoesToNextResponder;
@property(nonatomic) long long returnKeyType;
@property(nonatomic, getter=isSecureTextEntry) _Bool secureTextEntry;
@property(readonly) id <NSObject><NSCopying> selectedTextSearchDocument;
@property(nonatomic) long long selectionAffinity;
@property(retain, nonatomic) UIColor *selectionBorderColor;
@property(nonatomic) double selectionBorderWidth;
@property(nonatomic) double selectionCornerRadius;
@property(retain, nonatomic) UIImage *selectionDragDotImage;
@property(nonatomic) struct UIEdgeInsets selectionEdgeInsets;
@property(nonatomic) int shortcutConversionType;
@property(nonatomic) _Bool showDictationButton;
@property(nonatomic) long long smartDashesType;
@property(nonatomic) long long smartInsertDeleteType;
@property(nonatomic) long long smartQuotesType;
@property(nonatomic) long long spellCheckingType;
@property(readonly) Class superclass;
@property(retain, nonatomic) _UISupplementalLexicon *supplementalLexicon;
@property(retain, nonatomic) UIImage *supplementalLexiconAmbiguousItemIcon;
@property(nonatomic) _Bool suppressReturnKeyStyling;
@property(copy, nonatomic) NSString *textContentType;
@property(readonly, nonatomic) id <UITextInputSuggestionDelegate> textInputSuggestionDelegate;
@property(readonly, nonatomic) UIView *textInputView;
@property(nonatomic) int textLoupeVisibility;
@property(readonly, nonatomic) UITextRange *textRangeForServicesInteraction;
@property(nonatomic) long long textScriptType;
@property(nonatomic) int textSelectionBehavior;
@property(nonatomic) id textSuggestionDelegate;
@property(nonatomic) struct __CFCharacterSet *textTrimmingSet;
@property(retain, nonatomic) UIColor *underlineColorForSpelling;
@property(retain, nonatomic) UIColor *underlineColorForTextAlternatives;
@property(nonatomic) _Bool useAutomaticEndpointing;
@property(nonatomic) _Bool useInterfaceLanguageForLocalization;
@property(nonatomic) struct _NSRange validTextRange;

@end

