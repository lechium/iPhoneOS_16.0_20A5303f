//
//     Generated by classdumpios 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct BaseSocketStreamClient {
    CDUnknownFunctionPointerType *_field1;
};

struct CBs {
    CDUnknownBlockType _field1;
    CDUnknownBlockType _field2;
    CDUnknownBlockType _field3;
    CDUnknownBlockType _field4;
    CDUnknownBlockType _field5;
    CDUnknownBlockType _field6;
};

struct CFURLProtocolClient {
    long long version;
    void *client;
    CDUnknownFunctionPointerType retain;
    CDUnknownFunctionPointerType release;
    CDUnknownFunctionPointerType copyDescription;
    CDUnknownFunctionPointerType wasRedirected;
    CDUnknownFunctionPointerType cacheResponseIsValid;
    CDUnknownFunctionPointerType didReceiveResponse;
    CDUnknownFunctionPointerType didLoadData;
    CDUnknownFunctionPointerType didFinishLoading;
    CDUnknownFunctionPointerType didFail;
    CDUnknownFunctionPointerType didReceiveAuthenticationChallenge;
};

struct CFURLProtocolImplementation {
    long long _field1;
    void *_field2;
    CDUnknownFunctionPointerType _field3;
    CDUnknownFunctionPointerType _field4;
    CDUnknownFunctionPointerType _field5;
    CDUnknownFunctionPointerType _field6;
    CDUnknownFunctionPointerType _field7;
    CDUnknownFunctionPointerType _field8;
    CDUnknownFunctionPointerType _field9;
};

struct CFURLProtocolInstanceCallbacks {
    long long _field1;
    CDUnknownFunctionPointerType _field2;
    CDUnknownFunctionPointerType _field3;
    CDUnknownFunctionPointerType _field4;
    CDUnknownFunctionPointerType _field5;
    CDUnknownFunctionPointerType _field6;
    CDUnknownFunctionPointerType _field7;
    CDUnknownFunctionPointerType _field8;
    CDUnknownFunctionPointerType _field9;
    CDUnknownFunctionPointerType _field10;
    CDUnknownFunctionPointerType _field11;
    CDUnknownFunctionPointerType _field12;
    CDUnknownFunctionPointerType _field13;
    void *_field14;
};

struct CoalescingDomain {
    struct map<std::string, std::vector<std::string>, std::less<std::string>, std::allocator<std::pair<const std::string, std::vector<std::string>>>> _DNS;
    struct map<std::string, std::set<std::shared_ptr<__CoalescingConnectionKey>, CoalescingConnectionKeyComparator>, std::less<std::string>, std::allocator<std::pair<const std::string, std::set<std::shared_ptr<__CoalescingConnectionKey>, CoalescingConnectionKeyComparator>>>> _ipAddressToConnectionKey;
    struct map<std::shared_ptr<__CoalescingConnectionKey>, std::set<std::string>, CoalescingConnectionKeyComparator, std::allocator<std::pair<const std::shared_ptr<__CoalescingConnectionKey>, std::set<std::string>>>> _connectionKeyToAllIPAddresses;
    struct map<std::string, std::shared_ptr<__CoalescingConnectionKey>, std::less<std::string>, std::allocator<std::pair<const std::string, std::shared_ptr<__CoalescingConnectionKey>>>> _requestHostToConnectionKey;
    struct map<std::shared_ptr<__CoalescingConnectionKey>, std::set<std::string>, CoalescingConnectionKeyComparator, std::allocator<std::pair<const std::shared_ptr<__CoalescingConnectionKey>, std::set<std::string>>>> _connectionKeyToAllRequestHosts;
};

struct CompactCookieArray;

struct CompactCookieHeader;

struct CompactHTTPCookieReference {
    CDUnknownFunctionPointerType *_field1;
    struct CompactCookieArray *_field2;
    struct CompactCookieHeader *_field3;
};

struct CompactHTTPCookieWithData {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
};

struct ConfigFlags {
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
};

struct CoreLoggable {
    CDUnknownFunctionPointerType *_field1;
};

struct CoreSchedulingSet;

struct Flags {
    unsigned int _flag_SHOULD_HANDLE_HTTP_COOKIES:1;
    unsigned int _flag_IS_MUTABLE:1;
    unsigned int _flag_SHOULD_START_SYNCHRONOUSLY:1;
    unsigned int _flag_ALLOW_CELLULAR:1;
    unsigned int _flag_PREVENTSIDLESYSTEMSLEEP:1;
    unsigned int _flag_SET_EXPLICIT_SHOULD_HANDLE_COOKIES:1;
    unsigned int _flag_SET_EXPLICIT_NETWORK_SERVICE_TYPE:1;
    unsigned int _flag_SET_EXPLICIT_ALLOWS_CELLULAR:1;
    unsigned int _flag_SET_EXPLICIT_PREVENTS_IDLE_SYSTEM_SLEEP:1;
    unsigned int _flag_SET_EXPLICIT_SHOULD_PIPELINE:1;
    unsigned int _flag_SET_EXPLICIT_CACHE_POLICY:1;
    unsigned int _flag_SET_EXPLICIT_TIMEOUT:1;
    unsigned int _flag_SET_EXPLICIT_PROXY_DICT:1;
    unsigned int _flag_SET_EXPLICIT_SSL_PROPERTIES:1;
    unsigned int _flag_SET_EXPLICIT_SHOULD_START_SYNCHRONOUSLY:1;
};

struct HTTPCookie {
    CDUnknownFunctionPointerType *_field1;
};

struct HTTPProtocol;

struct HTTPRequest;

struct HTTPResponse;

struct InterfaceRequiredForLoader;

struct InternalInit {
    id _field1;
    id _field2;
    id _field3;
    id _field4;
    _Bool _field5;
    long long _field6;
};

struct InternalProtocolImplementation {
    long long _field1;
    void *_field2;
    CDUnknownFunctionPointerType _field3;
    CDUnknownFunctionPointerType _field4;
    CDUnknownFunctionPointerType _field5;
    CDUnknownFunctionPointerType _field6;
    CDUnknownFunctionPointerType _field7;
    CDUnknownFunctionPointerType _field8;
    CDUnknownFunctionPointerType _field9;
    CDUnknownFunctionPointerType _field10;
};

struct NSCFURLProtocolClient {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    id _field3;
    id _field4;
};

struct ReadBuffer {
    CDUnknownFunctionPointerType *_field1;
    long long _field2;
    id _field3;
    long long _field4;
    unsigned char _field5;
};

struct RedirectionRecorder;

struct SessionConnectionLoadable {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    CDUnknownFunctionPointerType *_field3;
    id _field4;
};

struct SmartBlockWithArgs<bool> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct TCPIO_BlockCallbacks_Listener {
    CDUnknownFunctionPointerType *_field1;
    struct CBs _field2;
    id _field3;
    int _field4;
};

struct TCPIO_EstablishBase;

struct TransportConnection;

struct TransportConnectionObjCPP;

struct URLConnectionLoader {
    CDUnknownFunctionPointerType *_field1;
    struct __CFAllocator *_field2;
    CDUnknownFunctionPointerType *_field3;
    unsigned char _field4;
    unsigned char _field5;
    struct InterfaceRequiredForLoader *_field6;
    id _field7;
    CDUnknownFunctionPointerType *_field8;
    CDUnknownFunctionPointerType *_field9;
    id _field10;
    id _field11;
    long long _field12;
    struct RedirectionRecorder *_field13;
    unsigned char _field14;
    unsigned char _field15;
    unsigned char _field16;
    id _field17;
    unsigned char _field18;
    double _field19;
    double _field20;
    unsigned char _field21;
    struct URLProtocol *_field22;
    id _field23;
    unsigned char _field24;
    struct CoreSchedulingSet *_field25;
    double _field26;
    double _field27;
    unsigned long long _field28;
    struct ConfigFlags _field29;
    unsigned char _field30;
    unsigned char _field31;
    unsigned char _field32;
    unsigned char _field33;
    _Bool _field34;
};

struct URLProtocol;

struct URLProtocolClient {
    CDUnknownFunctionPointerType *_field1;
};

struct URLRequest {
    CDUnknownFunctionPointerType *_vptr$CoreLoggable;
    struct __CFURL *fURL;
    unsigned long long fCachePolicy;
    double fTimeout;
    struct __CFURL *fMainDocumentURL;
    struct __CFDictionary *fProtocolProperties;
    struct __CFDictionary *fProxyDict;
    struct HTTPRequest *fHTTPRequest;
    struct Flags fFlags;
    struct __CFDictionary *fSSLProps;
    struct __CFArray *fContentDispositionHeaderEncodingFallbackArray;
    long long fRequestPriority;
    unsigned long long fAllowedProtocolTypes;
    int fNetworkServiceType;
    struct __CFString *fBoundInterfaceIdentifier;
    struct __CFString *fTrackerContext;
    double fTimeWindowDelay;
    double fTimeWindowDuration;
    double fStartTimeoutTime;
    unsigned char fRequiresShortConnectionTimeout;
    unsigned char fPreventHSTSStorage;
    unsigned char fIgnoreHSTS;
    unsigned char fSchemeWasUpgradedDueToDynamicHSTS;
    unsigned char fAssumesHTTP3Capable;
    unsigned char fKnownTracker;
    unsigned char fPrivacyProxyFailClosed;
    unsigned char fPrivacyProxyFailClosedForUnreachableNonMainHosts;
    int fRequiresDNSSECValidation;
    unsigned long long fAttribution;
    double fPayloadTransmissionTimeout;
    struct __CFDictionary *fATSOverrides;
    struct unique_ptr<_CFHSTSPolicy, Deleter_CFRelease> fHSTSPolicy;
    int fAllowsExpensiveNetworkAccess;
    int fAllowsConstrainedNetworkAccess;
    struct __CFURLStorageSession *_explicitStorageSession;
};

struct URLResponse {
    CDUnknownFunctionPointerType *_vptr$CoreLoggable;
    struct __CFURL *fURL;
    struct __CFString *fMIMEType;
    struct __CFString *fTextEncodingName;
    long long fExpectedContentLength;
    double fExpiration;
    double fCreationTime;
    struct __CFDictionary *fDownloadAssessment;
    struct __CFDictionary *fSSLCertContext;
    int fRecommendedPolicy;
    struct __CFData *fPeerAddress;
    struct HTTPResponse *fHTTP;
    unsigned char fConnectionDidFallback;
    unsigned char fConnectionIsCellular;
};

struct UploadProgressInfo {
    long long _field1;
    long long _field2;
    long long _field3;
};

struct XCookieStorage {
    CDUnknownFunctionPointerType *_field1;
    struct __CFAllocator *_field2;
    int _field3;
};

struct XCredentialStorage {
    CDUnknownFunctionPointerType *_field1;
    struct __CFAllocator *_field2;
    int _field3;
};

struct _CFCachedURLResponse {
    struct __CFRuntimeBase {
        unsigned long long _field1;
        _Atomic unsigned long long _field2;
    } _field1;
    struct __CFCachedURLResponse *_field2;
};

struct _CFHSTSPolicy;

struct __CFAllocator;

struct __CFDictionary;

struct __CFString;

struct __CFURL;

struct __shared_weak_count;

struct __tree_end_node<std::__tree_node_base<void *>*> {
    void *__left_;
};

struct map<std::shared_ptr<__CoalescingConnectionKey>, std::set<std::string>, CoalescingConnectionKeyComparator, std::allocator<std::pair<const std::shared_ptr<__CoalescingConnectionKey>, std::set<std::string>>>> {
    struct __tree<std::__value_type<std::shared_ptr<__CoalescingConnectionKey>, std::set<std::string>>, std::__map_value_compare<std::shared_ptr<__CoalescingConnectionKey>, std::__value_type<std::shared_ptr<__CoalescingConnectionKey>, std::set<std::string>>, CoalescingConnectionKeyComparator, true>, std::allocator<std::__value_type<std::shared_ptr<__CoalescingConnectionKey>, std::set<std::string>>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::shared_ptr<__CoalescingConnectionKey>, std::set<std::string>>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::shared_ptr<__CoalescingConnectionKey>, std::__value_type<std::shared_ptr<__CoalescingConnectionKey>, std::set<std::string>>, CoalescingConnectionKeyComparator, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<std::string, std::set<std::shared_ptr<__CoalescingConnectionKey>, CoalescingConnectionKeyComparator>, std::less<std::string>, std::allocator<std::pair<const std::string, std::set<std::shared_ptr<__CoalescingConnectionKey>, CoalescingConnectionKeyComparator>>>> {
    struct __tree<std::__value_type<std::string, std::set<std::shared_ptr<__CoalescingConnectionKey>, CoalescingConnectionKeyComparator>>, std::__map_value_compare<std::string, std::__value_type<std::string, std::set<std::shared_ptr<__CoalescingConnectionKey>, CoalescingConnectionKeyComparator>>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, std::set<std::shared_ptr<__CoalescingConnectionKey>, CoalescingConnectionKeyComparator>>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, std::set<std::shared_ptr<__CoalescingConnectionKey>, CoalescingConnectionKeyComparator>>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, std::set<std::shared_ptr<__CoalescingConnectionKey>, CoalescingConnectionKeyComparator>>, std::less<std::string>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<std::string, std::shared_ptr<__CoalescingConnectionKey>, std::less<std::string>, std::allocator<std::pair<const std::string, std::shared_ptr<__CoalescingConnectionKey>>>> {
    struct __tree<std::__value_type<std::string, std::shared_ptr<__CoalescingConnectionKey>>, std::__map_value_compare<std::string, std::__value_type<std::string, std::shared_ptr<__CoalescingConnectionKey>>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, std::shared_ptr<__CoalescingConnectionKey>>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, std::shared_ptr<__CoalescingConnectionKey>>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, std::shared_ptr<__CoalescingConnectionKey>>, std::less<std::string>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<std::string, std::vector<std::string>, std::less<std::string>, std::allocator<std::pair<const std::string, std::vector<std::string>>>> {
    struct __tree<std::__value_type<std::string, std::vector<std::string>>, std::__map_value_compare<std::string, std::__value_type<std::string, std::vector<std::string>>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, std::vector<std::string>>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, std::vector<std::string>>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, std::vector<std::string>>, std::less<std::string>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct mutex {
    struct _opaque_pthread_mutex_t {
        long long __sig;
        char __opaque[56];
    } __m_;
};

struct os_unfair_lock_s {
    unsigned int _os_unfair_lock_opaque;
};

struct shared_ptr<HTTPProtocol> {
    struct HTTPProtocol *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<TCPIO_EstablishBase> {
    struct TCPIO_EstablishBase *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<TransportConnection> {
    struct TransportConnection *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<TransportConnectionObjCPP> {
    struct TransportConnectionObjCPP *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct stat {
    int st_dev;
    unsigned short st_mode;
    unsigned short st_nlink;
    unsigned long long st_ino;
    unsigned int st_uid;
    unsigned int st_gid;
    int st_rdev;
    struct timespec st_atimespec;
    struct timespec st_mtimespec;
    struct timespec st_ctimespec;
    struct timespec st_birthtimespec;
    long long st_size;
    long long st_blocks;
    int st_blksize;
    unsigned int st_flags;
    unsigned int st_gen;
    int st_lspare;
    long long st_qspare[2];
};

struct timespec {
    long long tv_sec;
    long long tv_nsec;
};

struct unique_ptr<_CFHSTSPolicy, Deleter_CFRelease> {
    struct __compressed_pair<_CFHSTSPolicy *, Deleter_CFRelease> {
        struct _CFHSTSPolicy *__value_;
    } __ptr_;
};

struct weak_ptr<TransportConnection> {
    struct TransportConnection *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned int _field1[8];
} CDStruct_6ad76789;

typedef struct {
    long long _field1;
    int _field2;
    unsigned int _field3;
    long long _field4;
} CDStruct_198678f7;

typedef struct {
    long long domain;
    int error;
} CDStruct_59046461;

typedef struct {
    CDStruct_198678f7 _field1;
    CDStruct_198678f7 _field2;
} CDStruct_3c1748cc;

// Template types
typedef struct shared_ptr<TransportConnection> {
    struct TransportConnection *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_8da4e70b;

