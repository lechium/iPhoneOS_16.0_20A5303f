//
//     Generated by classdumpios 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CLConnectionMessage;

struct CLDeviceMotionLiteService;

struct CLIspDataVisitor;

struct CLNotifierBase {
    CDUnknownFunctionPointerType *_field1;
};

struct CLNotifierClientBase {
    CDUnknownFunctionPointerType *_field1;
};

struct CMMagicMountStateStruct {
    double timestamp;
    _Bool mounted;
};

struct CMMotionManagerStatsCollector;

struct CMOQuaternion {
    float elements[4];
};

struct Delegate;

struct Dispatcher {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
};

struct Item;

struct LinearFit {
    float fSlope[3];
    float fIntercept[3];
};

struct MemoryDelegate {
    CDUnknownFunctionPointerType *_vptr$Delegate;
    char *fBuffer;
    unsigned long long fLength;
};

struct NonlinearGyroBiasFit {
    unsigned char fType;
    unsigned char fPadding[3];
    struct LinearFit fFits[8];
    float fTemperatures[7];
    float fOverlap;
    unsigned char fError[3][18];
};

struct Reader {
    struct Delegate *fDelegate;
    int fFd;
    unsigned long long fMappedSize;
    unsigned long long fMappedOffset;
    char *fMappedData;
    _Bool fMustScan;
    struct z_stream_s fZStream;
    struct vector<unsigned char, std::allocator<unsigned char>> fUncompressedSens;
    unsigned long long fSensRemaining;
    char *fSensData;
};

struct ReaderIterator {
    struct Reader *fReader;
    struct shared_ptr<CMMsl::Item> fItem;
};

struct __shared_weak_count;

struct deque<float, std::allocator<float>> {
    struct __split_buffer<float *, std::allocator<float *>> {
        float **__first_;
        float **__begin_;
        float **__end_;
        struct __compressed_pair<float **, std::allocator<float *>> {
            float **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::allocator<float>> {
        unsigned long long __value_;
    } __size_;
};

struct internal_state;

struct map<unsigned long, int, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, int>>> {
    struct __tree<std::__value_type<unsigned long, int>, std::__map_value_compare<unsigned long, std::__value_type<unsigned long, int>, std::less<unsigned long>, true>, std::allocator<std::__value_type<unsigned long, int>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<unsigned long, int>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> {
                void *__left_;
            } __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned long, std::__value_type<unsigned long, int>, std::less<unsigned long>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct os_unfair_lock_s {
    unsigned int _os_unfair_lock_opaque;
};

struct shared_ptr<CLConnectionMessage> {
    struct CLConnectionMessage *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CMMsl::Item> {
    struct Item *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct unique_ptr<CLDeviceMotionLiteService, std::default_delete<CLDeviceMotionLiteService>> {
    struct __compressed_pair<CLDeviceMotionLiteService *, std::default_delete<CLDeviceMotionLiteService>> {
        struct CLDeviceMotionLiteService *__value_;
    } __ptr_;
};

struct unique_ptr<CLIspDataVisitor, std::default_delete<CLIspDataVisitor>> {
    struct __compressed_pair<CLIspDataVisitor *, std::default_delete<CLIspDataVisitor>> {
        struct CLIspDataVisitor *__value_;
    } __ptr_;
};

struct unique_ptr<CMMotionManagerStatsCollector, std::default_delete<CMMotionManagerStatsCollector>> {
    struct __compressed_pair<CMMotionManagerStatsCollector *, std::default_delete<CMMotionManagerStatsCollector>> {
        struct CMMotionManagerStatsCollector *__value_;
    } __ptr_;
};

struct vector<unsigned char, std::allocator<unsigned char>> {
    char *__begin_;
    char *__end_;
    struct __compressed_pair<unsigned char *, std::allocator<unsigned char>> {
        char *__value_;
    } __end_cap_;
};

struct z_stream_s {
    char *next_in;
    unsigned int avail_in;
    unsigned long long total_in;
    char *next_out;
    unsigned int avail_out;
    unsigned long long total_out;
    char *msg;
    struct internal_state *state;
    CDUnknownFunctionPointerType zalloc;
    CDUnknownFunctionPointerType zfree;
    void *opaque;
    int data_type;
    unsigned long long adler;
    unsigned long long reserved;
};

#if 0
// Names with conflicting types:
typedef struct {
    double timestamp;
    struct {
        float pressure;
        float temperature;
    } pressureData;
} Sample_068dee23;

#endif

#pragma mark Typedef'd Structures

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct {
    unsigned long long _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
} CDStruct_b7b5e951;

typedef struct {
    unsigned int _field1[8];
} CDStruct_6ad76789;

typedef struct {
    double w;
    double x;
    double y;
    double z;
} CDStruct_bf7dff04;

typedef struct {
    double _field1;
    double _field2;
    double _field3;
    int _field4;
} CDStruct_b141a4d0;

typedef struct {
    double x;
    double y;
    double z;
} CDStruct_31142d93;

typedef struct {
    double _field1;
    double _field2;
} CDStruct_c3b9c2ee;

typedef struct {
    float x;
    float y;
    float z;
} CDStruct_03942939;

typedef struct {
    float _field1;
} CDStruct_37a3040a;

typedef struct {
    int _field1;
    int _field2;
    CDStruct_c3b9c2ee _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    double _field11;
    double _field12;
    double _field13;
    int _field14;
    double _field15;
    int _field16;
    CDStruct_c3b9c2ee _field17;
    double _field18;
    int _field19;
    unsigned int _field20;
    int _field21;
    int _field22;
    int _field23;
    double _field24;
    _Bool _field25;
} CDStruct_7cf4616f;

typedef struct {
    CDStruct_bf7dff04 _field1;
    CDStruct_31142d93 _field2;
    double _field3;
    double _field4;
    double _field5;
} CDStruct_d035bcc1;

typedef struct {
    CDStruct_bf7dff04 _field1;
    CDStruct_03942939 _field2;
    CDStruct_03942939 _field3;
    CDStruct_03942939 _field4;
    int _field5;
    _Bool _field6;
    _Bool _field7;
    _Bool _field8;
    float _field9;
    _Bool _field10;
    _Bool _field11;
    int _field12;
} CDStruct_227c825c;

typedef struct {
    int _field1;
    double _field2;
    double _field3;
    union {
        struct {
            CDStruct_03942939 _field1;
            CDStruct_03942939 _field2;
        } _field1;
        struct {
            _Bool _field1;
            char _field2[282];
        } _field2;
    } _field4;
} CDStruct_8d89f794;

// Template types
typedef struct shared_ptr<CLConnectionMessage> {
    struct CLConnectionMessage *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_bdcc6d0f;

