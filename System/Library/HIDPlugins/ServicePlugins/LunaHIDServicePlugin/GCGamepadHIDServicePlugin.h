//
//     Generated by classdumpios 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class HIDConnection, HIDDevice, HIDUserDevice, MISSING_TYPE, NSArray, NSNumber, NSString, NSXPCConnection;
@protocol GCBatteryServiceClientInterface, HIDEventDispatcher, OS_dispatch_queue, OS_dispatch_source;

@interface GCGamepadHIDServicePlugin : NSObject
{
    CDUnknownBlockType _cancelHandler;	// 8 = 0x8
    NSNumber *_prop;	// 16 = 0x10
    _Bool _activated;	// 24 = 0x18
    _Bool _clientAdded;	// 25 = 0x19
    NSObject<OS_dispatch_source> *_idleDispatchSource;	// 32 = 0x20
    struct BTSessionImpl *_session;	// 40 = 0x28
    _Bool _buttonHome;	// 48 = 0x30
    _Bool _buttonMenu;	// 49 = 0x31
    _Bool _buttonOptions;	// 50 = 0x32
    _Bool _buttonShare;	// 51 = 0x33
    struct {
        double directionPadUp;
        double directionPadDown;
        double directionPadLeft;
        double directionPadRight;
        double buttonA;
        double buttonB;
        double buttonX;
        double buttonY;
        double buttonL1;
        double buttonR1;
        double buttonL2;
        double buttonR2;
        _Bool leftThumbstick__rightThumbstick__buttonL3;
        _Bool buttonR3;
        unsigned int controllerType;
    } _gameControllerState;	// 56 = 0x38
    CDStruct_5be5f302 _gameControllerExtendedState;	// 176 = 0xb0
    unsigned int _motionSequenceNumber;	// 352 = 0x160
    CDStruct_06597ee6 _motionState;	// 360 = 0x168
    _Bool _hapticsActive;	// 464 = 0x1d0
    int _pendingHapticZeroReports;	// 468 = 0x1d4
    float _hapticDispatchFrequency;	// 472 = 0x1d8
    double _currentHapticClipTime;	// 480 = 0x1e0
    struct timespec _currentHapticDispatchTime;	// 488 = 0x1e8
    _Bool _loopHapticEvent;	// 504 = 0x1f8
    NSObject<OS_dispatch_source> *_hapticDispatchSource;	// 512 = 0x200
    NSXPCConnection *_daemonConnection;	// 520 = 0x208
    id <GCBatteryServiceClientInterface> _batteryClient;	// 528 = 0x210
    NSObject<OS_dispatch_queue> *_internalQueue;	// 536 = 0x218
    _Bool _bluetoothClassic;	// 544 = 0x220
    _Bool _usb;	// 545 = 0x221
    _Bool _bluetoothLE;	// 546 = 0x222
    _Bool _virtualDevice;	// 547 = 0x223
    unsigned int _service;	// 548 = 0x224
    float _idleTimeoutDuration;	// 552 = 0x228
    float _leftThumbstickNoiseBuffer;	// 556 = 0x22c
    float _rightThumbstickNoiseBuffer;	// 560 = 0x230
    float _leftThumbstickDeadzoneRadius;	// 564 = 0x234
    float _leftThumbstickAxisSnapRadius;	// 568 = 0x238
    float _rightThumbstickDeadzoneRadius;	// 572 = 0x23c
    float _rightThumbstickAxisSnapRadius;	// 576 = 0x240
    HIDConnection *_client;	// 584 = 0x248
    id <HIDEventDispatcher> _dispatcher;	// 592 = 0x250
    NSObject<OS_dispatch_queue> *_dispatchQueue;	// 600 = 0x258
    HIDDevice *_device;	// 608 = 0x260
    HIDUserDevice *_batteryUserDevice;	// 616 = 0x268
    unsigned long long _regID;	// 624 = 0x270
    unsigned long long _lastEventTime;	// 632 = 0x278
    NSString *_uniqueIdentifier;	// 640 = 0x280
    CDStruct_f4b747e6 *_batteryReport;	// 648 = 0x288
    NSArray *_hapticMotors;	// 656 = 0x290
}

+ (_Bool)matchService:(unsigned int)arg1 options:(id)arg2 score:(long long *)arg3;	// IMP=0x001000000000384b
- (void).cxx_destruct;	// IMP=0x00000000000079fb
@property(nonatomic) float rightThumbstickAxisSnapRadius; // @synthesize rightThumbstickAxisSnapRadius=_rightThumbstickAxisSnapRadius;
@property(nonatomic) float rightThumbstickDeadzoneRadius; // @synthesize rightThumbstickDeadzoneRadius=_rightThumbstickDeadzoneRadius;
@property(nonatomic) float leftThumbstickAxisSnapRadius; // @synthesize leftThumbstickAxisSnapRadius=_leftThumbstickAxisSnapRadius;
@property(nonatomic) float leftThumbstickDeadzoneRadius; // @synthesize leftThumbstickDeadzoneRadius=_leftThumbstickDeadzoneRadius;
@property(retain, nonatomic) NSArray *hapticMotors; // @synthesize hapticMotors=_hapticMotors;
@property(nonatomic) float rightThumbstickNoiseBuffer; // @synthesize rightThumbstickNoiseBuffer=_rightThumbstickNoiseBuffer;
@property(nonatomic) float leftThumbstickNoiseBuffer; // @synthesize leftThumbstickNoiseBuffer=_leftThumbstickNoiseBuffer;
@property(nonatomic) float idleTimeoutDuration; // @synthesize idleTimeoutDuration=_idleTimeoutDuration;
@property(readonly, nonatomic, getter=isVirtualDevice) _Bool virtualDevice; // @synthesize virtualDevice=_virtualDevice;
@property(readonly, nonatomic, getter=isBluetoothLE) _Bool bluetoothLE; // @synthesize bluetoothLE=_bluetoothLE;
@property(readonly, nonatomic, getter=isUSB) _Bool usb; // @synthesize usb=_usb;
@property(readonly, nonatomic, getter=isBluetoothClassic) _Bool bluetoothClassic; // @synthesize bluetoothClassic=_bluetoothClassic;
@property(readonly, nonatomic) CDStruct_f4b747e6 *batteryReport; // @synthesize batteryReport=_batteryReport;
@property(readonly, nonatomic) NSString *uniqueIdentifier; // @synthesize uniqueIdentifier=_uniqueIdentifier;
@property(readonly, nonatomic) unsigned long long lastEventTime; // @synthesize lastEventTime=_lastEventTime;
@property(readonly, nonatomic) HIDUserDevice *batteryUserDevice; // @synthesize batteryUserDevice=_batteryUserDevice;
@property(readonly, nonatomic) HIDDevice *device; // @synthesize device=_device;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *dispatchQueue; // @synthesize dispatchQueue=_dispatchQueue;
@property(readonly, nonatomic) unsigned int service; // @synthesize service=_service;
@property(nonatomic) __weak id <HIDEventDispatcher> dispatcher; // @synthesize dispatcher=_dispatcher;
@property(nonatomic) __weak HIDConnection *client; // @synthesize client=_client;
- (void)readBatteryWithReply:(CDUnknownBlockType)arg1;	// IMP=0x000000000000779c
- (void)connectToGenericDeviceDriverConfigurationServiceWithClient:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x000000000000778a
- (void)connectToGameIntentServiceWithClient:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x0000000000007778
- (void)connectToBatteryServiceWithClient:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x0000000000007694
- (void)connectToMotionServiceWithClient:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x0000000000007682
- (void)connectToAdaptiveTriggersServiceWithClient:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x0000000000007670
- (void)connectToLightServiceWithClient:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x000000000000765e
- (void)connectToNintendoJoyConFusionGestureServiceWithClient:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x000000000000764c
- (void)enqueueTransient:(id)arg1 hapticMotor:(unsigned long long)arg2;	// IMP=0x000000000000757f
- (void)setHapticMotor:(unsigned long long)arg1 frequency:(float)arg2 amplitude:(float)arg3;	// IMP=0x000000000000750b
- (void)fetchDeviceRegistryIDWithReply:(CDUnknownBlockType)arg1;	// IMP=0x0000000000007486
- (void)requestServiceWithReply:(CDUnknownBlockType)arg1;	// IMP=0x00000000000073c7
- (void)ping;	// IMP=0x000000000000736b
- (float)defaultHapticDispatchFrequency;	// IMP=0x000000000000735d
- (id)defaultHapticMotors;	// IMP=0x0000000000007344
- (float)defaultRightAxisSnapRadius;	// IMP=0x000000000000733b
- (float)defaultLeftAxisSnapRadius;	// IMP=0x0000000000007332
- (float)defaultRightThumbstickDeadzoneRadius;	// IMP=0x0000000000007324
- (float)defaultLeftThumbstickDeadzoneRadius;	// IMP=0x0000000000007316
- (float)defaultIdleTimeoutDuration;	// IMP=0x0000000000007308
- (float)defaultRightThumbstickNoiseBuffer;	// IMP=0x00000000000072ff
- (float)defaultLeftThumbstickNoiseBuffer;	// IMP=0x00000000000072f6
- (void)enableHaptics;	// IMP=0x000000000000702c
- (_Bool)updateHapticMotor:(id)arg1;	// IMP=0x0000000000006f24
- (void)stopHaptics;	// IMP=0x0000000000006d3a
- (unsigned int)numberOfTimesToSendZeroHapticReport;	// IMP=0x0000000000006d2f
- (_Bool)isHapticsActive;	// IMP=0x0000000000006d23
- (void)updateHaptics:(_Bool)arg1;	// IMP=0x0000000000006d1d
- (void)dispatchHapticEvent;	// IMP=0x0000000000006d17
- (_Bool)isAnyHapticMotorEnabled;	// IMP=0x0000000000006b03
- (void)dispatchShareButtonEventWithValue:(_Bool)arg1 timestamp:(unsigned long long)arg2;	// IMP=0x0000000000006a2f
- (void)dispatchOptionsButtonEventWithValue:(_Bool)arg1 timestamp:(unsigned long long)arg2;	// IMP=0x000000000000695b
- (void)dispatchMenuButtonEventWithValue:(_Bool)arg1 timestamp:(unsigned long long)arg2;	// IMP=0x0000000000006887
- (void)dispatchHomeButtonEventWithValue:(_Bool)arg1 timestamp:(unsigned long long)arg2;	// IMP=0x00000000000067b3
- (void)dispatchGameControllerExtendedEventWithState:(CDStruct_5be5f302)arg1 timestamp:(unsigned long long)arg2;	// IMP=0x000000000000629f
- (void)dispatchMotionEventWithState:(CDStruct_06597ee6)arg1 timestamp:(unsigned long long)arg2;	// IMP=0x0000000000006004
- (_Bool)isTwoAxisInputIdle:(MISSING_TYPE **)arg1 prevInput:(MISSING_TYPE **)arg2 noiseBuffer:(float)arg3;	// IMP=0x0000000000005fab
- (void)applyDeadzone:(float)arg1 axisSnapRadius:(float)arg2 input:(MISSING_TYPE **)arg3;	// IMP=0x0000000000005eaa
- (void)dispatchEvent:(id)arg1;	// IMP=0x0000000000005e93
- (void)dispatchEvent:(id)arg1 updateLastEventTime:(_Bool)arg2;	// IMP=0x0000000000005daa
- (id)createEvent:(unsigned int)arg1 timestamp:(unsigned long long)arg2;	// IMP=0x0000000000005d5c
- (_Bool)shouldDisconnectWhenIdle;	// IMP=0x0000000000005d54
- (_Bool)isIdle;	// IMP=0x0000000000005be2
- (void)updateIdleState;	// IMP=0x0000000000005b28
- (void)scheduleIdleTimer;	// IMP=0x00000000000059f2
- (_Bool)shouldCreateBatteryDevice;	// IMP=0x00000000000059ea
- (void)sendBatteryReport;	// IMP=0x00000000000058dd
- (void)updateClientBattery;	// IMP=0x0000000000005810
- (void)createVirtualHIDDeviceForBattery;	// IMP=0x00000000000054cf
- (void)disconnect;	// IMP=0x000000000000526d
- (void)setupRawReportHandling;	// IMP=0x0000000000005267
- (id)createHIDDeviceForService:(unsigned int)arg1;	// IMP=0x0000000000005233
- (void)clientNotification:(id)arg1 added:(_Bool)arg2;	// IMP=0x000000000000513f
- (void)setDispatchQueue:(id)arg1;	// IMP=0x0000000000005052
- (void)cancel;	// IMP=0x0000000000004ee8
- (void)activate;	// IMP=0x0000000000004e69
- (void)setCancelHandler:(CDUnknownBlockType)arg1;	// IMP=0x0000000000004c6b
- (void)setEventDispatcher:(id)arg1;	// IMP=0x0000000000004bad
- (id)eventMatching:(id)arg1 forClient:(id)arg2;	// IMP=0x0000000000004a3c
- (_Bool)setProperty:(id)arg1 forKey:(id)arg2 client:(id)arg3;	// IMP=0x0000000000004967
- (id)propertyForKey:(id)arg1 client:(id)arg2;	// IMP=0x0000000000004646
@property(readonly, copy) NSString *description;
- (void)dealloc;	// IMP=0x000000000000430f
- (id)initWithService:(unsigned int)arg1;	// IMP=0x0000000000003c55
- (void)initGameControllerDaemonXPC;	// IMP=0x0000000000003853

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

