//
//     Generated by classdumpios 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <WebKitLegacy/DOMNode.h>

@class NSDictionary, NSIndexSet, NSString, RTIInputSystemSourceSession, UIColor, UIImage, UIInputContextHistory, UIResponder, UITextInputPasswordRules, UITextInteractionAssistant, UITextPosition, UITextRange, UIView, _UISupplementalLexicon;
@protocol UITextInput, UITextInputDelegate, UITextInputPrivate, UITextInputSuggestionDelegate, UITextInputTokenizer;

@interface DOMNode (UIWebFormPeripheral)
- (id)createPeripheral;	// IMP=0x002000000076f196
- (id)itemTitle;	// IMP=0x002000000077573d
- (void)populateCell:(id)arg1;	// IMP=0x0020000000775737
- (id)createPickerCell;	// IMP=0x002000000077572f
- (id)createSelectedItem;	// IMP=0x0020000000775727
- (id)_responderWindow;	// IMP=0x0020000000cc12bc
- (id)inputAssistantItem;	// IMP=0x0020000000cc126c
- (id)_textInteraction;	// IMP=0x0020000000cc121c
- (id)_selectableText;	// IMP=0x0020000000cc1213
- (_Bool)_shouldPerformUICalloutBarButtonReplaceAction:(SEL)arg1 forText:(id)arg2 checkAutocorrection:(_Bool)arg3;	// IMP=0x0020000000cc10f5
- (void)_unmarkText;	// IMP=0x0020000000cc1089
- (void)_setAttributedMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2;	// IMP=0x0020000000cc0d54
- (void)_setMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2;	// IMP=0x0020000000cc0cce
- (_Bool)_hasMarkedText;	// IMP=0x0020000000cc0c4c
- (_Bool)_usesAsynchronousProtocol;	// IMP=0x0020000000cc0c01
- (void)_setGestureRecognizers;	// IMP=0x0020000000cc0897
- (long long)_selectionAffinity;	// IMP=0x0020000000cc06f4
- (void)_setSelectedTextRange:(id)arg1 withAffinityDownstream:(_Bool)arg2;	// IMP=0x0020000000cc0663
- (id)_positionFromPosition:(id)arg1 inDirection:(long long)arg2 offset:(long long)arg3 withAffinityDownstream:(_Bool)arg4;	// IMP=0x0020000000cc05d5
- (id)_moveRight:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000cc0404
- (id)_moveLeft:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000cc0233
- (id)_moveDown:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000cbff19
- (id)_moveUp:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000cbfbff
- (id)_moveToEndOfDocument:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000cbfa1d
- (id)_moveToStartOfDocument:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000cbf8ba
- (id)_moveToEndOfParagraph:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000cbf65a
- (id)_moveToStartOfParagraph:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000cbf3ee
- (id)_moveToEndOfLine:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000cbf0ca
- (id)_moveToStartOfLine:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000cbed9a
- (id)_moveToEndOfWord:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000cbea5e
- (id)_moveToStartOfWord:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0020000000cbe487
- (id)_setHistory:(id)arg1 withExtending:(_Bool)arg2 withAnchor:(int)arg3 withAffinityDownstream:(_Bool)arg4;	// IMP=0x0020000000cbe1d1
- (id)_setSelectionRangeWithHistory:(id)arg1;	// IMP=0x0020000000cbde72
- (void)_updateSelectionWithTextRange:(id)arg1 withAffinityDownstream:(_Bool)arg2;	// IMP=0x0020000000cbddfa
- (id)_fontForCaretSelection;	// IMP=0x0020000000cbdcac
- (id)_textColorForCaretSelection;	// IMP=0x0020000000cbdb5e
- (id)_rangeFromCurrentRangeWithDelta:(struct _NSRange)arg1;	// IMP=0x0020000000cbd958
- (id)_clampedpositionFromPosition:(id)arg1 offset:(int)arg2;	// IMP=0x0020000000cbd876
- (id)_rangeOfSmartSelectionIncludingRange:(id)arg1;	// IMP=0x0020000000cbd05e
- (id)_findDocumentBoundaryFromPosition:(id)arg1;	// IMP=0x0020000000cbcf6d
- (id)_findPleasingWordBoundaryFromPosition:(id)arg1;	// IMP=0x0020000000cbcd3a
- (id)_findBoundaryPositionClosestToPosition:(id)arg1 withGranularity:(long long)arg2;	// IMP=0x0020000000cbccc2
- (_Bool)_range:(id)arg1 isEqualToRange:(id)arg2;	// IMP=0x0020000000cbcb5e
- (id)_intersectionOfRange:(id)arg1 andRange:(id)arg2;	// IMP=0x0020000000cbc9a7
- (_Bool)_range:(id)arg1 intersectsRange:(id)arg2;	// IMP=0x0020000000cbc922
- (_Bool)_range:(id)arg1 containsRange:(id)arg2;	// IMP=0x0020000000cbc882
- (id)_rangeSpanningTextUnit:(long long)arg1 andPosition:(id)arg2;	// IMP=0x0020000000cbc616
- (id)_fullRange;	// IMP=0x0020000000cbc56f
- (id)_rangeOfParagraphEnclosingPosition:(id)arg1;	// IMP=0x0020000000cbc555
- (id)_rangeOfSentenceEnclosingPosition:(id)arg1;	// IMP=0x0020000000cbc53b
- (id)_rangeOfLineEnclosingPosition:(id)arg1;	// IMP=0x0020000000cbc521
- (id)_rangeOfEnclosingWord:(id)arg1;	// IMP=0x0020000000cbc507
- (id)_rangeOfTextUnit:(long long)arg1 enclosingPosition:(id)arg2;	// IMP=0x0020000000cbc3ff
- (id)_rangeOfText:(id)arg1 endingAtPosition:(id)arg2;	// IMP=0x0020000000cbbff6
- (id)_normalizedStringForRangeComparison:(id)arg1;	// IMP=0x0020000000cbbf57
- (void)_scrollRectToVisible:(struct CGRect)arg1 animated:(_Bool)arg2;	// IMP=0x0020000000cbbe51
- (void)_replaceDocumentWithText:(id)arg1;	// IMP=0x0020000000cbbd97
- (void)_replaceCurrentWordWithText:(id)arg1;	// IMP=0x0020000000cbbcb8
- (void)_transpose;	// IMP=0x0020000000cbb95c
- (void)_deleteForwardAndNotify:(_Bool)arg1;	// IMP=0x0020000000cbb742
- (void)_deleteBackwardAndNotify:(_Bool)arg1;	// IMP=0x0020000000cbb705
- (void)_deleteTextRange:(id)arg1;	// IMP=0x0020000000cbb5c6
- (void)_deleteToEndOfParagraph;	// IMP=0x0020000000cbb3a4
- (void)_deleteToEndOfLine;	// IMP=0x0020000000cbb182
- (void)_deleteToStartOfLine;	// IMP=0x0020000000cbaf62
- (void)_deleteForwardByWord;	// IMP=0x0020000000cbac37
- (void)_deleteByWord;	// IMP=0x0020000000cbaaa1
- (void)_setCaretSelectionAtEndOfSelection;	// IMP=0x0020000000cba9bd
- (id)_positionAtStartOfWords:(unsigned long long)arg1 beforePosition:(id)arg2;	// IMP=0x0020000000cba6e8
- (id)_positionFromPosition:(id)arg1 pastTextUnit:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x0020000000cba4fc
- (long long)_opposingDirectionFromDirection:(long long)arg1;	// IMP=0x0020000000cba4e2
- (id)_positionWithinRange:(id)arg1 farthestInDirection:(long long)arg2;	// IMP=0x0020000000cba430
- (void)_expandSelectionToStartOfWordsBeforeCaretSelection:(int)arg1;	// IMP=0x0020000000cba30e
- (void)_expandSelectionToStartOfWordBeforeCaretSelection;	// IMP=0x0020000000cba2f7
- (void)_expandSelectionToBackwardDeletionClusterWithReinsertionOut:(id *)arg1;	// IMP=0x0020000000cb9f15
- (void)_moveCurrentSelection:(int)arg1;	// IMP=0x0020000000cb9d65
- (void)_extendCurrentSelection:(int)arg1;	// IMP=0x0020000000cb9bd4
- (_Bool)_hasMarkedTextOrRangedSelection;	// IMP=0x0020000000cb9b05
- (_Bool)_isEmptySelection;	// IMP=0x0020000000cb9a48
- (struct CGRect)_selectionClipRect;	// IMP=0x0020000000cb9a2a
- (_Bool)_selectionAtDocumentEnd;	// IMP=0x0020000000cb9968
- (_Bool)_selectionAtDocumentStart;	// IMP=0x0020000000cb98a6
- (_Bool)_selectionAtWordStart;	// IMP=0x0020000000cb975c
- (void)_setSelectionToPosition:(id)arg1;	// IMP=0x0020000000cb96bb
- (id)_fullText;	// IMP=0x0020000000cb95ed
- (id)_wordContainingCaretSelection;	// IMP=0x0020000000cb94ab
- (unsigned int)_characterInRelationToPosition:(id)arg1 amount:(int)arg2;	// IMP=0x0020000000cb92fa
- (unsigned int)_characterInRelationToRangedSelection:(int)arg1;	// IMP=0x0020000000cb9009
- (unsigned int)_characterInRelationToCaretSelection:(int)arg1;	// IMP=0x0020000000cb8f45
- (unsigned int)_characterBeforeCaretSelection;	// IMP=0x0020000000cb8f2e
- (unsigned int)_characterAfterCaretSelection;	// IMP=0x0020000000cb8f1a
- (id)_textRangeFromNSRange:(struct _NSRange)arg1;	// IMP=0x0020000000cb8dfc
- (struct _NSRange)_nsrangeForTextRange:(id)arg1;	// IMP=0x0020000000cb8d01
- (int)_indexForTextPosition:(id)arg1;	// IMP=0x0020000000cb8c69
- (void)_selectAll;	// IMP=0x0020000000cb8bfc
- (struct _NSRange)_selectedRangeWithinMarkedText;	// IMP=0x0020000000cb8a4d
- (struct _NSRange)_selectedNSRange;	// IMP=0x0020000000cb89ab
@property(nonatomic) long long _textInputSource;
@property(readonly, nonatomic) id <UITextInputSuggestionDelegate> textInputSuggestionDelegate;
- (id)_keyInput;	// IMP=0x0020000000cb879a
@property(readonly, nonatomic, getter=_proxyTextInput) UIResponder<UITextInput> *__content;
@property(readonly, nonatomic) UIView *textInputView;
- (id)urlScheme;	// IMP=0x0020000001467f88
- (id)tagName;	// IMP=0x0020000001467f3a
- (id)_realNode;	// IMP=0x0020000001469ffe
- (id)_textFormElement;	// IMP=0x002000000146a177
- (id)_previousAssistedNode;	// IMP=0x002000000146a11a
- (id)_nextAssistedNode;	// IMP=0x002000000146a0bd
- (void)_accessoryClear;	// IMP=0x002000000146a0b7
- (_Bool)_supportsAccessoryClear;	// IMP=0x002000000146a0af
- (_Bool)_supportsAutoFill;	// IMP=0x002000000146a0a7
- (_Bool)_requiresInputView;	// IMP=0x002000000146a095
- (_Bool)_requiresAccessoryView;	// IMP=0x002000000146a083
- (void)_stopAssistingDocumentView:(id)arg1;	// IMP=0x002000000146a04c
- (void)_startAssistingDocumentView:(id)arg1;	// IMP=0x002000000146a015
- (_Bool)nodeCanBecomeFirstResponder;	// IMP=0x0020000001478af2
- (_Bool)isLikelyToBeginPageLoad;	// IMP=0x0020000001478aea
- (id)absoluteQuadsAtPoint:(struct CGPoint)arg1;	// IMP=0x0020000001478ad8
- (_Bool)touchCalloutEnabled;	// IMP=0x0020000001478ad0
- (id)tapHighlightColor;	// IMP=0x0020000001478aa1
- (_Bool)alwaysAttemptToShowTapHighlight;	// IMP=0x0020000001478a8f
- (_Bool)showsTapHighlight;	// IMP=0x0020000001478a87
@property(nonatomic) long long keyboardType;
- (_Bool)isSecure;	// IMP=0x002000000148940b
- (_Bool)isTextControl;	// IMP=0x0020000001489403
- (struct CGRect)convertRect:(struct CGRect)arg1 toView:(id)arg2;	// IMP=0x00200000014892b9
- (id)textDocument;	// IMP=0x002000000148c2e7
@property(nonatomic) long long selectionAffinity;
- (_Bool)editing;	// IMP=0x002000000148c28a
- (_Bool)editable;	// IMP=0x002000000148c282
- (id)selectionRectsForRange:(id)arg1;	// IMP=0x002000000148c00b
- (void)setBaseWritingDirection:(long long)arg1 forRange:(id)arg2;	// IMP=0x002000000148c005
- (long long)baseWritingDirectionForPosition:(id)arg1 inDirection:(long long)arg2;	// IMP=0x002000000148bffd
- (id)characterRangeByExtendingPosition:(id)arg1 inDirection:(long long)arg2;	// IMP=0x002000000148bf7b
- (id)positionWithinRange:(id)arg1 farthestInDirection:(long long)arg2;	// IMP=0x002000000148bf04
- (id)characterRangeAtPoint:(struct CGPoint)arg1;	// IMP=0x002000000148be6f
- (id)closestPositionToPoint:(struct CGPoint)arg1 withinRange:(id)arg2;	// IMP=0x002000000148bdec
- (id)closestPositionToPoint:(struct CGPoint)arg1;	// IMP=0x002000000148bd73
@property(copy, nonatomic) NSDictionary *markedTextStyle;
- (struct CGRect)caretRectForPosition:(id)arg1;	// IMP=0x002000000148bbe7
@property(nonatomic) __weak id <UITextInputDelegate> inputDelegate;
@property(readonly, nonatomic) id <UITextInputTokenizer> tokenizer;
- (id)rangeEnclosingPosition:(id)arg1 withGranularity:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x002000000148ba72
- (_Bool)isPosition:(id)arg1 withinTextUnit:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x002000000148ba28
- (id)positionFromPosition:(id)arg1 toBoundary:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x002000000148b9b9
- (_Bool)isPosition:(id)arg1 atBoundary:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x002000000148b96f
- (id)positionFromPosition:(id)arg1 inDirection:(long long)arg2 offset:(long long)arg3;	// IMP=0x002000000148b906
- (id)positionFromPosition:(id)arg1 offset:(long long)arg2;	// IMP=0x002000000148b889
- (long long)offsetFromPosition:(id)arg1 toPosition:(id)arg2;	// IMP=0x002000000148b83d
- (long long)comparePosition:(id)arg1 toPosition:(id)arg2;	// IMP=0x002000000148b7f2
@property(readonly, nonatomic) _Bool hasText;
- (void)unmarkText;	// IMP=0x002000000148b76d
@property(readonly, nonatomic) UITextRange *markedTextRange;
- (void)moveDown;	// IMP=0x002000000148b68d
- (void)moveUp;	// IMP=0x002000000148b620
- (void)moveLeft;	// IMP=0x002000000148b5b3
- (void)moveRight;	// IMP=0x002000000148b546
- (struct CGRect)_lastRectForRange:(id)arg1;	// IMP=0x002000000148b420
- (struct CGRect)firstRectForRange:(id)arg1;	// IMP=0x002000000148b305
- (void)replaceRangeWithTextWithoutClosingTyping:(id)arg1 replacementText:(id)arg2;	// IMP=0x002000000148b2f0
- (void)replaceRange:(id)arg1 withText:(id)arg2;	// IMP=0x002000000148b2d8
- (void)replaceRange:(id)arg1 withText:(id)arg2 closeTyping:(_Bool)arg3;	// IMP=0x002000000148b1e0
- (id)rangeOfEnclosingWord:(id)arg1;	// IMP=0x002000000148b18c
- (id)textRangeFromPosition:(id)arg1 toPosition:(id)arg2;	// IMP=0x002000000148b0f0
- (id)textInRange:(id)arg1;	// IMP=0x002000000148b077
@property(readonly, nonatomic) UITextPosition *endOfDocument;
@property(readonly, nonatomic) UITextPosition *beginningOfDocument;
@property(copy) UITextRange *selectedTextRange;
- (void)setSelectedTextRange:(id)arg1 withAffinityDownstream:(_Bool)arg2;	// IMP=0x002000000148ae80
@property(readonly, nonatomic) UIView<UITextInputPrivate> *_textSelectingContainer;
- (void)setBecomesEditableWithGestures:(_Bool)arg1;	// IMP=0x002000000148adaa
- (_Bool)becomesEditableWithGestures;	// IMP=0x002000000148ada2
- (_Bool)isEditing;	// IMP=0x002000000148ad9a
- (_Bool)isEditable;	// IMP=0x002000000148ad92
- (id)content;	// IMP=0x002000000148ad8a
- (void)updateSelection;	// IMP=0x002000000148ad84
- (id)selectionView;	// IMP=0x002000000148ad59
@property(readonly, nonatomic) UITextInteractionAssistant *interactionAssistant;
- (_Bool)isAutoFillMode;	// IMP=0x002000000148acbb
- (void)acceptedAutoFillWord:(id)arg1;	// IMP=0x002000000148ac67
- (struct CGPoint)constrainedPoint:(struct CGPoint)arg1;	// IMP=0x002000000148ac4d
- (void)updateAutoscroll:(id)arg1;	// IMP=0x002000000148a87a
- (id)automaticallySelectedOverlay;	// IMP=0x002000000148a837
- (void)setInitialSelectionBehavior:(int)arg1;	// IMP=0x002000000148a831
- (int)initialSelectionBehavior;	// IMP=0x002000000148a829
@property(nonatomic) long long returnKeyType;
@property(nonatomic) int textLoupeVisibility;
@property(nonatomic) _Bool contentsIsSingleValue;
@property(nonatomic) id textSuggestionDelegate;
- (_Bool)isShowingPlaceholder;	// IMP=0x002000000148a7e9
- (struct CGRect)convertCaretRect:(struct CGRect)arg1;	// IMP=0x002000000148a75b
- (struct CGRect)caretRect;	// IMP=0x002000000148a645
- (void)setSelectionWithPoint:(struct CGPoint)arg1;	// IMP=0x002000000148a62b
- (void)setSelectionWithPoint:(struct CGPoint)arg1 inset:(double)arg2;	// IMP=0x002000000148a5a8
- (id)text;	// IMP=0x002000000148a552
- (void)setText:(id)arg1;	// IMP=0x002000000148a4bb
- (struct CGPoint)constrainedPoint:(struct CGPoint)arg1 withInset:(double)arg2;	// IMP=0x002000000148a2d4
- (int)selectionState;	// IMP=0x002000000148a291
- (void)selectAll;	// IMP=0x002000000148a234
- (_Bool)selectionAtWordStart;	// IMP=0x002000000148a1f1
- (_Bool)selectionAtDocumentStart;	// IMP=0x002000000148a1ae
- (_Bool)hasSelection;	// IMP=0x002000000148a16b
- (void)extendCurrentSelection:(int)arg1;	// IMP=0x002000000148a0e4
- (id)rangeByExtendingCurrentSelection:(int)arg1;	// IMP=0x002000000148a092
- (id)rangeByMovingCurrentSelection:(int)arg1;	// IMP=0x002000000148a040
- (struct _NSRange)selectionRange;	// IMP=0x0020000001489ffd
- (int)wordOffsetInRange:(id)arg1;	// IMP=0x0020000001489fab
- (id)textColorForCaretSelection;	// IMP=0x0020000001489f92
- (id)fontForCaretSelection;	// IMP=0x0020000001489e83
- (unsigned short)characterAfterCaretSelection;	// IMP=0x0020000001489e40
- (void)replaceCurrentWordWithText:(id)arg1;	// IMP=0x0020000001489d69
- (void)clearMarkedText;	// IMP=0x0020000001489d48
- (id)rectsForNSRange:(struct _NSRange)arg1;	// IMP=0x0020000001489ccc
- (void)confirmMarkedText:(id)arg1;	// IMP=0x0020000001489be1
- (void)setMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2;	// IMP=0x0020000001489b17
- (unsigned short)characterInRelationToCaretSelection:(int)arg1;	// IMP=0x0020000001489ac5
- (void)removeTextPlaceholder:(id)arg1;	// IMP=0x0020000001489a94
- (id)insertTextPlaceholderWithSize:(struct CGSize)arg1;	// IMP=0x0020000001489a52
- (struct CGRect)frameForDictationResultPlaceholder:(id)arg1;	// IMP=0x00200000014899e0
- (void)removeDictationResultPlaceholder:(id)arg1 willInsertResult:(_Bool)arg2;	// IMP=0x00200000014899a0
@property(readonly, nonatomic) id insertDictationResultPlaceholder;
- (id)metadataDictionariesForDictationResults;	// IMP=0x002000000148994a
- (void)insertDictationResult:(id)arg1 withCorrectionIdentifier:(id)arg2;	// IMP=0x002000000148990a
- (void)endFloatingCursor;	// IMP=0x00200000014898df
- (void)updateFloatingCursorAtPoint:(struct CGPoint)arg1 animated:(_Bool)arg2;	// IMP=0x0020000001489894
- (void)updateFloatingCursorAtPoint:(struct CGPoint)arg1;	// IMP=0x0020000001489852
- (void)beginFloatingCursorAtPoint:(struct CGPoint)arg1;	// IMP=0x0020000001489810
- (id)uiWebDocumentView;	// IMP=0x00200000014897cd
- (void)insertText:(id)arg1;	// IMP=0x002000000148974c
- (void)deleteBackward;	// IMP=0x00200000014896ce
@property(nonatomic) struct __CFCharacterSet *textTrimmingSet;
- (void)endSelectionChange;	// IMP=0x002000000148968f
- (void)beginSelectionChange;	// IMP=0x002000000148965e
- (void)handleKeyWebEvent:(id)arg1;	// IMP=0x002000000148960c
- (_Bool)requiresKeyEvents;	// IMP=0x0020000001489604
- (id)delegate;	// IMP=0x00200000014895fc
- (void)setSecure:(_Bool)arg1;	// IMP=0x00200000014895f6
- (id)textInputTraits;	// IMP=0x00200000014894aa
- (void)setupPlaceholderTextIfNeeded;	// IMP=0x00200000014894a4
@property(nonatomic) _Bool isSingleLineDocument;
- (_Bool)hasContent;	// IMP=0x002000000148944c
- (void)takeTraitsFrom:(id)arg1;	// IMP=0x002000000148941b

// Remaining properties
@property(copy, nonatomic) NSIndexSet *PINEntrySeparatorIndexes;
@property(readonly, nonatomic) RTIInputSystemSourceSession *_rtiSourceSession;
@property(nonatomic) _Bool acceptsDictationSearchResults;
@property(nonatomic) _Bool acceptsEmoji;
@property(nonatomic) _Bool acceptsFloatingKeyboard;
@property(nonatomic) _Bool acceptsInitialEmojiKeyboard;
@property(nonatomic) _Bool acceptsPayloads;
@property(nonatomic) _Bool acceptsSplitKeyboard;
@property(nonatomic) long long autocapitalizationType;
@property(copy, nonatomic) NSString *autocorrectionContext;
@property(nonatomic) long long autocorrectionType;
@property(readonly, nonatomic) long long cursorBehavior;
@property(readonly, copy) NSString *debugDescription;
@property(nonatomic) _Bool deferBecomingResponder;
@property(readonly, copy) NSString *description;
@property(nonatomic, getter=isDevicePasscodeEntry) _Bool devicePasscodeEntry;
@property(nonatomic) _Bool disableHandwritingKeyboard;
@property(nonatomic) _Bool disableInputBars;
@property(nonatomic) _Bool disablePrediction;
@property(nonatomic) _Bool displaySecureEditsUsingPlainText;
@property(nonatomic) _Bool displaySecureTextUsingPlainText;
@property(nonatomic) int emptyContentReturnKeyType;
@property(nonatomic) _Bool enablesReturnKeyAutomatically;
@property(nonatomic) _Bool enablesReturnKeyOnNonWhiteSpaceContent;
@property(nonatomic) struct UIEdgeInsets floatingKeyboardEdgeInsets;
@property(nonatomic) _Bool forceDefaultDictationInfo;
@property(nonatomic) long long forceDictationKeyboardType;
@property(nonatomic) _Bool forceDisableDictation;
@property(nonatomic) _Bool forceEnableDictation;
@property(nonatomic) _Bool forceFloatingKeyboard;
@property(nonatomic) _Bool hasDefaultContents;
@property(readonly) unsigned long long hash;
@property(nonatomic) _Bool hidePrediction;
@property(retain, nonatomic) UIInputContextHistory *inputContextHistory;
@property(retain, nonatomic) UIColor *insertionPointColor;
@property(nonatomic) unsigned long long insertionPointWidth;
@property(nonatomic) _Bool isCarPlayIdiom;
@property(nonatomic) long long keyboardAppearance;
@property(nonatomic) _Bool learnsCorrections;
@property(nonatomic) _Bool loadKeyboardsForSiriLanguage;
@property(copy, nonatomic) UITextInputPasswordRules *passwordRules;
@property(nonatomic) _Bool preferOnlineDictation;
@property(nonatomic) long long preferredKeyboardStyle;
@property(copy, nonatomic) NSString *recentInputIdentifier;
@property(copy, nonatomic) NSString *responseContext;
@property(nonatomic) _Bool returnKeyGoesToNextResponder;
@property(nonatomic, getter=isSecureTextEntry) _Bool secureTextEntry;
@property(retain, nonatomic) UIColor *selectionBarColor;
@property(retain, nonatomic) UIColor *selectionBorderColor;
@property(nonatomic) double selectionBorderWidth;
@property(nonatomic) double selectionCornerRadius;
@property(retain, nonatomic) UIImage *selectionDragDotImage;
@property(nonatomic) struct UIEdgeInsets selectionEdgeInsets;
@property(nonatomic) long long selectionGranularity;
@property(retain, nonatomic) UIColor *selectionHighlightColor;
@property(nonatomic) int shortcutConversionType;
@property(nonatomic) _Bool showDictationButton;
@property(nonatomic) long long smartDashesType;
@property(nonatomic) long long smartInsertDeleteType;
@property(nonatomic) long long smartQuotesType;
@property(nonatomic) long long spellCheckingType;
@property(readonly) Class superclass;
@property(retain, nonatomic) _UISupplementalLexicon *supplementalLexicon;
@property(retain, nonatomic) UIImage *supplementalLexiconAmbiguousItemIcon;
@property(readonly, nonatomic) _Bool supportsImagePaste;
@property(nonatomic) _Bool suppressReturnKeyStyling;
@property(copy, nonatomic) NSString *textContentType;
@property(readonly, nonatomic) UITextRange *textRangeForServicesInteraction;
@property(nonatomic) long long textScriptType;
@property(nonatomic) int textSelectionBehavior;
@property(retain, nonatomic) UIColor *underlineColorForSpelling;
@property(retain, nonatomic) UIColor *underlineColorForTextAlternatives;
@property(nonatomic) _Bool useAutomaticEndpointing;
@property(nonatomic) _Bool useInterfaceLanguageForLocalization;
@property(nonatomic) struct _NSRange validTextRange;
@end

