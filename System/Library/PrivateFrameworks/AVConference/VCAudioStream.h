//
//     Generated by classdumpios 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class AVCStatisticsCollector, DTMFEventHandler, NSMutableArray, NSNumber, NSObject, NSString, VCAudioIO, VCAudioPayload, VCAudioPowerSpectrumSource, VCAudioTransmitter, VCTelephonyInterface, WRMClient;
@protocol OS_dispatch_source, VCMediaStreamSyncSourceDelegate;

__attribute__((visibility("hidden")))
@interface VCAudioStream
{
    int _clientPid;	// 532 = 0x214
    int numBufferBytesAvailable;	// 536 = 0x218
    NSObject<OS_dispatch_source> *pausedAudioHeartBeat;	// 544 = 0x220
    double dAudioHostTime;	// 552 = 0x228
    _Bool lastVoiceActive;	// 560 = 0x230
    double _remoteMediaStallTimeout;	// 568 = 0x238
    unsigned int conferenceID;	// 576 = 0x240
    unsigned int lastInputAudioTimeStamp;	// 580 = 0x244
    unsigned int lastSentAudioSampleTime;	// 584 = 0x248
    struct _opaque_pthread_rwlock_t stateLock;	// 592 = 0x250
    NSMutableArray *audioPayloads;	// 792 = 0x318
    struct tagVCAudioFrameFormat _vpioFormat;	// 800 = 0x320
    _Bool _useExternalIO;	// 848 = 0x350
    int preferredAudioCodec;	// 852 = 0x354
    DTMFEventHandler *dtmfEventHandler;	// 856 = 0x358
    WRMClient *wrmClient;	// 864 = 0x360
    VCAudioPayload *currentAudioPayload;	// 872 = 0x368
    VCAudioPayload *currentDTXPayload;	// 880 = 0x370
    VCAudioTransmitter *_audioTransmitter;	// 888 = 0x378
    int _reportingModuleID;	// 896 = 0x380
    VCTelephonyInterface *_telephonyInterface;	// 904 = 0x388
    _Bool isValid;	// 912 = 0x390
    int deviceRole;	// 916 = 0x394
    id syncSourceDelegate;	// 920 = 0x398
    VCAudioIO *_audioIO;	// 928 = 0x3a0
    _Bool _isMuted;	// 936 = 0x3a8
    unsigned int *_reportingSSRCList;	// 944 = 0x3b0
    unsigned int _reportingSSRCCount;	// 952 = 0x3b8
    _Bool _sendActiveVoiceOnly;	// 956 = 0x3bc
    _Bool _currentDTXEnable;	// 957 = 0x3bd
    NSNumber *_targetStreamID;	// 960 = 0x3c0
    _Bool _rtpEnabledBeforeInterrupt;	// 968 = 0x3c8
    _Bool _rtcpEnabledBeforeInterrupt;	// 969 = 0x3c9
    unsigned int _pullAudioSamplesCount;	// 972 = 0x3cc
    struct _VCAudioStreamSinkContext _sinkContext;	// 976 = 0x3d0
    struct _VCAudioStreamSourceContext _sourceContext;	// 992 = 0x3e0
    long long _inputAudioPowerSpectrumToken;	// 1176 = 0x498
    long long _outputAudioPowerSpectrumToken;	// 1184 = 0x4a0
    VCAudioPowerSpectrumSource *_inputAudioPowerSpectrumSource;	// 1192 = 0x4a8
    VCAudioPowerSpectrumSource *_outputAudioPowerSpectrumSource;	// 1200 = 0x4b0
    unsigned int _abnormalOWRDCount;	// 1208 = 0x4b8
    double _lastAbnormalOWRDVerificationTime;	// 1216 = 0x4c0
    double _lastNetworkHealthPrintTime;	// 1224 = 0x4c8
    double _packetLossRateAccum;	// 1232 = 0x4d0
    int _packetLossRateCount;	// 1240 = 0x4d8
    double _packetLossRate5Secs;	// 1248 = 0x4e0
    double _timeLastPLR5Secs;	// 1256 = 0x4e8
    _Bool _anbrEnabled;	// 1264 = 0x4f0
    _Bool _anbrActive;	// 1265 = 0x4f1
    struct ifnet_interface_advisory _lastNWConnectionNotification;	// 1272 = 0x4f8
    unsigned int _awdTimeTransmitter;	// 1368 = 0x558
    unsigned int _lastNoVoiceActivityPacketCount;	// 1372 = 0x55c
    unsigned int _preferredMediaBitrate;	// 1376 = 0x560
    AVCStatisticsCollector *_statsCollector;	// 1384 = 0x568
    _Bool _enableAudioPowerSpectrum;	// 1392 = 0x570
}

+ (_Bool)shouldUseRandomRTPTimestampForMode:(int)arg1;	// IMP=0x00100000000aac8a
+ (id)capabilities;	// IMP=0x00100000000a85ed
+ (id)supportedAudioPayloads;	// IMP=0x00100000000a8524
+ (unsigned char)audioIODirectionWithMediaStreamDirection:(long long)arg1;	// IMP=0x00100000000a5796
+ (int)operatingModeForAudioStreamMode:(long long)arg1;	// IMP=0x00100000000a5776
+ (id)newPayloadConfigForCodecConfig:(id)arg1 streamConfig:(id)arg2 inputSampleRate:(unsigned int)arg3;	// IMP=0x00100000000a3dbc
+ (_Bool)shouldUseAACELDSBRForMode:(long long)arg1;	// IMP=0x00100000000a3daf
@property(nonatomic) unsigned int lastNoVoiceActivityPacketCount; // @synthesize lastNoVoiceActivityPacketCount=_lastNoVoiceActivityPacketCount;
@property(retain, nonatomic) NSNumber *targetStreamID; // @synthesize targetStreamID=_targetStreamID;
@property(nonatomic, getter=isCurrentDTXEnabled) _Bool currentDTXEnable; // @synthesize currentDTXEnable=_currentDTXEnable;
@property(retain) VCAudioIO *audioIO; // @synthesize audioIO=_audioIO;
@property(retain) VCAudioTransmitter *audioTransmitter; // @synthesize audioTransmitter=_audioTransmitter;
@property(nonatomic) int deviceRole; // @synthesize deviceRole;
@property(nonatomic) _Bool isValid; // @synthesize isValid;
@property(readonly) unsigned int conferenceID; // @synthesize conferenceID;
- (void)telephonyInterface:(id)arg1 anbrRecommendation:(unsigned int)arg2 forDirection:(long long)arg3;	// IMP=0x00000000000b0854
- (void)telephonyInterface:(id)arg1 anbrActivationUpdate:(_Bool)arg2;	// IMP=0x00000000000b080f
- (void)didUpdateBasebandCodec:(const struct _VCRemoteCodecInfo *)arg1;	// IMP=0x00000000000b07bd
- (void)handleActiveConnectionChange:(id)arg1;	// IMP=0x00000000000b0722
- (void)collectTxChannelMetrics:(CDStruct_b671a7c4 *)arg1;	// IMP=0x00000000000b067c
- (void)collectRxChannelMetrics:(CDStruct_b671a7c4 *)arg1;	// IMP=0x00000000000b0504
- (void)collectRxChannelMetrics:(CDStruct_b671a7c4 *)arg1 interval:(float)arg2;	// IMP=0x00000000000b04f2
- (void)didServerDie;	// IMP=0x00000000000b0480
- (void)didResumeAudioIO:(id)arg1;	// IMP=0x00000000000b03b8
- (void)didSuspendAudioIO:(id)arg1;	// IMP=0x00000000000b028a
- (void)handleANBR:(unsigned int)arg1 forDirection:(long long)arg2;	// IMP=0x00000000000afccb
- (int)selectCodecBandwidthForCodecRateMode:(int)arg1;	// IMP=0x00000000000af9e4
- (void)handleDownlinkANBR:(struct _VCAudioCodecModeChangeEvent)arg1;	// IMP=0x00000000000af9a4
- (void)handleUplinkANBR:(struct _VCAudioCodecModeChangeEvent)arg1;	// IMP=0x00000000000af8fd
- (void)handleCodecModeChangeEvent:(struct _VCAudioCodecModeChangeEvent)arg1;	// IMP=0x00000000000af6bb
- (void)notifyCodecModeChangeEvent:(struct _VCAudioCodecModeChangeEvent)arg1 didUpdateBandwidth:(_Bool)arg2 didUpdateBitrate:(_Bool)arg3;	// IMP=0x00000000000af65b
- (void)queryAnbrBitrate:(unsigned int)arg1 forDirection:(long long)arg2;	// IMP=0x00000000000af3a9
- (void)setRemoteCodecTypeAndSampleRate:(struct _VCAudioCodecModeChangeEvent)arg1;	// IMP=0x00000000000af342
- (void)notifyCodecModeChangeToCT:(struct _VCAudioCodecModeChangeEvent)arg1;	// IMP=0x00000000000af2db
- (void)unregisterCodecRateModeChangeNotifications;	// IMP=0x00000000000af2c1
- (void)registerActiveAudioStreamChangeNotifications;	// IMP=0x00000000000af0e6
- (void)registerCodecRateModeChangeNotifications;	// IMP=0x00000000000af03e
- (long long)getSyncSourceSampleRate;	// IMP=0x00000000000af02b
@property(nonatomic) NSObject<VCMediaStreamSyncSourceDelegate> *syncSourceDelegate; // @synthesize syncSourceDelegate;
- (void)setCanProcessAudio:(_Bool)arg1;	// IMP=0x00000000000aef66
- (_Bool)canProcessAudio;	// IMP=0x00000000000aef54
- (void)pushAudioSamples:(struct opaqueVCAudioBufferList *)arg1;	// IMP=0x00000000000aedc8
- (void)pullAudioSamples:(struct opaqueVCAudioBufferList *)arg1;	// IMP=0x00000000000aedb4
- (int)getRatTypeForStreamMode:(long long)arg1;	// IMP=0x00000000000aed10
- (void)reportingAlgosAudioStreamEvent:(unsigned short)arg1;	// IMP=0x00000000000aec1e
- (void)reportInputHostTimeJumpWithSize:(double)arg1;	// IMP=0x00000000000aeb69
- (void)reportingAudioStreamEvent:(unsigned short)arg1;	// IMP=0x00000000000ae7fa
- (void)updateCodecPayloadAndBitrateForStartEvent:(int *)arg1 bitrate:(unsigned int *)arg2;	// IMP=0x00000000000ae221
- (void)gatherRealtimeStats:(struct __CFDictionary *)arg1;	// IMP=0x00000000000ae1d5
- (id)getReportingServiceID;	// IMP=0x00000000000ae1a4
- (struct __CFString *)getReportingClientName;	// IMP=0x00000000000ae11e
- (int)getReportingClientType;	// IMP=0x00000000000ae0f1
- (struct __CFDictionary *)getClientSpecificUserInfo:(id)arg1;	// IMP=0x00000000000adcdc
- (void)setupReportingAgent:(id)arg1;	// IMP=0x00000000000ad947
- (void)setupPeriodicReporting;	// IMP=0x00000000000ad798
- (void)setStreamIDs:(id)arg1 repairStreamIDs:(id)arg2;	// IMP=0x00000000000ad4cf
- (double)rtcpHeartbeatLeeway;	// IMP=0x00000000000ad4c1
- (void)onSendRTCPPacket;	// IMP=0x00000000000ad2f4
- (void)onRTCPTimeout;	// IMP=0x00000000000ad2cb
- (void)onRTPTimeout;	// IMP=0x00000000000ad2c5
- (void)onResumeWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000acf47
- (void)onPauseWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000acce5
- (void)redundancyController:(id)arg1 redundancyPercentageDidChange:(unsigned int)arg2;	// IMP=0x00000000000accc8
- (void)onStopWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000aca52
- (void)onStartWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000ac526
- (_Bool)shouldReportNetworkInterfaceType;	// IMP=0x00000000000ac50f
- (_Bool)shouldResetRTPTimestampOnStart;	// IMP=0x00000000000ac4f8
- (_Bool)onConfigureStreamWithConfiguration:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000aad2e
- (void)setPreferredMediaBitrateWithConfiguration:(id)arg1;	// IMP=0x00000000000aacab
- (id)streamIDsFromTransport;	// IMP=0x00000000000aaa59
- (void)cleanupBeforeReconfigure:(id)arg1;	// IMP=0x00000000000aa754
- (void)createReportSSRCListWithStreamConfigs:(id)arg1;	// IMP=0x00000000000aa52a
- (id)createTransportWithStreamConfig:(id)arg1;	// IMP=0x00000000000a9fce
- (_Bool)setupSourceTransport:(id)arg1;	// IMP=0x00000000000a9ece
- (_Bool)validateAudioStreamConfigurations:(id)arg1;	// IMP=0x00000000000a9a7c
- (void)onCallIDChanged;	// IMP=0x00000000000a9951
- (id)supportedPayloads;	// IMP=0x00000000000a9938
- (_Bool)shouldUseNWConnectionBackingSocket;	// IMP=0x00000000000a9930
@property(readonly, nonatomic) unsigned int actualAudioSendingBitrate;
- (void)setTargetBitrate:(unsigned int)arg1 rateChangeCounter:(unsigned int)arg2;	// IMP=0x00000000000a98cb
- (void)setVCStatistics:(CDStruct_7df19fcb)arg1;	// IMP=0x00000000000a9888
- (CDUnknownFunctionPointerType)pullSamplesCallback;	// IMP=0x00000000000a8bbc
@property(readonly, nonatomic) void *realtimeSourceContext;
@property(nonatomic) float volume;
@property(nonatomic, getter=isRemoteMuted) _Bool remoteMuted;
@property(nonatomic, getter=isMuted) _Bool muted; // @synthesize muted=_isMuted;
@property(nonatomic) _Bool sendActiveVoiceOnly;
- (void)setStreamDirection:(long long)arg1;	// IMP=0x00000000000a88d8
- (_Bool)generateReceptionReportList:(struct _RTCP_RECEPTION_REPORT *)arg1 reportCount:(char *)arg2;	// IMP=0x00000000000a885c
- (void)cleanupAudio;	// IMP=0x00000000000a87c9
- (void)prepareAudio;	// IMP=0x00000000000a878a
- (void)updateSoundMeter:(struct _METER_INFO *)arg1 isInputMeter:(_Bool)arg2 sampleBuffer:(struct opaqueVCAudioBufferList *)arg3;	// IMP=0x00000000000a871c
- (void)pushSamplesOutputPowerSpectrum:(struct opaqueVCAudioBufferList *)arg1;	// IMP=0x00000000000a86f0
- (void)setFrequencyMeteringEnabled:(_Bool)arg1 meterType:(int)arg2;	// IMP=0x00000000000a86a3
- (_Bool)isFrequencyMeteringEnabled:(int)arg1;	// IMP=0x00000000000a868e
- (struct _METER_INFO *)meterWithType:(int)arg1;	// IMP=0x00000000000a866c
- (void)stopSendDTMFEvent;	// IMP=0x00000000000a84ed
- (void)sendDTMFEvent:(id)arg1;	// IMP=0x00000000000a84b6
- (_Bool)createAudioTransmitter:(long long)arg1 streamIDs:(id)arg2;	// IMP=0x00000000000a7b5d
- (_Bool)createAudioReceiver;	// IMP=0x00000000000a6bc4
- (void)configureAudioJBAlgos:(struct tagVCAudioReceiverConfig *)arg1;	// IMP=0x00000000000a6a3f
- (int)getPacketsPerBundleForStreamConfig:(id)arg1;	// IMP=0x00000000000a68ef
- (void)dealloc;	// IMP=0x00000000000a64cb
- (_Bool)setupAudioStreamWithClientPid:(int)arg1 enableAudioPowerSpectrum:(_Bool)arg2;	// IMP=0x00000000000a5cd3
- (id)setLocalParticipantInfo:(id)arg1 networkSockets:(id)arg2 withError:(id *)arg3;	// IMP=0x00000000000a5ba1
- (id)initWithClientPid:(int)arg1 ssrc:(unsigned int)arg2 transportSessionID:(unsigned int)arg3;	// IMP=0x00000000000a5b14
- (id)initWithClientPid:(int)arg1 ssrc:(unsigned int)arg2;	// IMP=0x00000000000a5a85
- (id)initWithClientPid:(int)arg1;	// IMP=0x00000000000a59f6
- (void)setupAudioPowerSpectrum;	// IMP=0x00000000000a5914
- (void)setDeviceRoleForAudioStreamMode:(long long)arg1 direction:(long long)arg2;	// IMP=0x00000000000a57b9
- (void)didEnterState:(int)arg1 oldState:(int)arg2;	// IMP=0x00000000000a5743
- (void)willExitState:(int)arg1 newState:(int)arg2;	// IMP=0x00000000000a571e
- (double)lastReceivedRTCPPacketTime;	// IMP=0x00000000000a5590
- (double)lastReceivedRTPPacketTime;	// IMP=0x00000000000a557a
- (_Bool)setReceiverPayloads;	// IMP=0x00000000000a4c0c
- (void)setDTXPayload:(id)arg1;	// IMP=0x00000000000a4921
- (id)addAudioPayload:(int)arg1;	// IMP=0x00000000000a48aa
- (id)configForPayloadType:(int)arg1;	// IMP=0x00000000000a4755
- (unsigned int)preferredAudioBitrateForPayload:(int)arg1;	// IMP=0x00000000000a3c6f
- (void)getCodecConfigForPayload:(int)arg1 block:(CDUnknownBlockType)arg2;	// IMP=0x00000000000a38fc
- (_Bool)setupPayloads;	// IMP=0x00000000000a3593
- (id)getSupportedPayloads;	// IMP=0x00000000000a3202
- (void)stopAudioWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000a3072
- (void)startAudioWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000a2c7f
- (_Bool)generateRTCPXRVoIPMetricsReports:(struct tagVCRTCPXRVoIPMetricsReport *)arg1 reportCount:(char *)arg2;	// IMP=0x00000000000a287c
- (_Bool)generateRTCPXRSummaryReports:(struct tagVCRTCPXRSummaryReport *)arg1 reportCount:(char *)arg2;	// IMP=0x00000000000a25f5
- (int)captureMeshMode:(struct opaqueVCAudioBufferList *)arg1;	// IMP=0x00000000000a23a3
- (void)setInputTimestamp:(unsigned int)arg1 packetTimestamp:(int)arg2 hostTime:(double)arg3;	// IMP=0x00000000000a237d
- (void)_computeInternalFormatForStreamConfigurations:(id)arg1;	// IMP=0x00000000000a207c
- (unsigned int)internalSampleRateForCodecType:(long long)arg1;	// IMP=0x00000000000a1fd3
- (unsigned int)computePacketTimestampWithInputTimestamp:(unsigned int)arg1 numSamples:(int)arg2 hostTime:(double)arg3;	// IMP=0x00000000000a1d78

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

