//
//     Generated by classdumpios 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <prequelite/PQLConnection.h>

@class NSString, br_pacer;

__attribute__((visibility("hidden")))
@interface BRCPQLConnection : PQLConnection
{
    br_pacer *_batchingPacer;	// 16 = 0x10
    int _changeCount;	// 24 = 0x18
    double _flushInterval;	// 32 = 0x20
    _Bool _flushImmediately;	// 40 = 0x28
    _Bool _autovacuumInProgress;	// 41 = 0x29
    long long _changesOverride;	// 48 = 0x30
    _Bool _isReadonly;	// 56 = 0x38
    unsigned long long _vmStepsExecuted;	// 64 = 0x40
    NSString *_assertionPersonaIdentifier;	// 72 = 0x48
}

- (void).cxx_destruct;	// IMP=0x000000000000b7bc
@property(retain, nonatomic) NSString *assertionPersonaIdentifier; // @synthesize assertionPersonaIdentifier=_assertionPersonaIdentifier;
@property(readonly, nonatomic) _Bool isReadonly; // @synthesize isReadonly=_isReadonly;
@property(readonly, nonatomic) unsigned long long vmStepsExecuted; // @synthesize vmStepsExecuted=_vmStepsExecuted;
- (id)fetchObject:(CDUnknownBlockType)arg1 sql:(id)arg2 args:(struct __va_list_tag [1])arg3;	// IMP=0x000000000000b6dd
- (id)fetchObject:(CDUnknownBlockType)arg1 sql:(id)arg2;	// IMP=0x000000000000b63c
- (id)fetchObjectOfClass:(Class)arg1 sql:(id)arg2 args:(struct __va_list_tag [1])arg3;	// IMP=0x000000000000b5bd
- (id)fetchObjectOfClass:(Class)arg1 sql:(id)arg2;	// IMP=0x000000000000b51c
- (id)fetchObjectOfClass:(Class)arg1 initializer:(SEL)arg2 sql:(id)arg3 args:(struct __va_list_tag [1])arg4;	// IMP=0x000000000000b493
- (id)fetchObjectOfClass:(Class)arg1 initializer:(SEL)arg2 sql:(id)arg3;	// IMP=0x000000000000b3f6
- (id)fetch:(id)arg1 args:(struct __va_list_tag [1])arg2;	// IMP=0x000000000000b381
- (id)fetch:(id)arg1;	// IMP=0x000000000000b2dd
- (_Bool)executeRaw:(id)arg1;	// IMP=0x000000000000b274
- (_Bool)execute:(id)arg1 args:(struct __va_list_tag [1])arg2;	// IMP=0x000000000000b201
- (_Bool)execute:(id)arg1;	// IMP=0x000000000000b15d
- (void)assertOnQueue;	// IMP=0x000000000000b11c
- (_Bool)_validateIsRunningWithCorrectPersona;	// IMP=0x000000000000b044
- (void)autovacuumIfNeeded;	// IMP=0x000000000000ae83
- (_Bool)needsAutovacuum;	// IMP=0x000000000000ad84
- (long long)sizeInBytes;	// IMP=0x000000000000ace9
- (void)brc_close;	// IMP=0x000000000000acd2
- (void)brc_closeCrashingOnFailure:(_Bool)arg1;	// IMP=0x000000000000ab5c
- (void)usePacedBatchingOnTargetQueue:(id)arg1 withInterval:(double)arg2 changeCount:(int)arg3;	// IMP=0x000000000000aae4
- (_Bool)_shouldFlushWithChangeCount:(int)arg1;	// IMP=0x000000000000a8b8
- (void)disableProfilingForQueriesInBlock:(CDUnknownBlockType)arg1;	// IMP=0x000000000000a7b0
- (_Bool)executeWithErrorHandler:(CDUnknownBlockType)arg1 sql:(id)arg2;	// IMP=0x000000000000a603
- (_Bool)executeWithSlowStatementRadar:(id)arg1 sql:(id)arg2;	// IMP=0x000000000000a411
- (_Bool)executeWithExpectedIndex:(id)arg1 sql:(id)arg2;	// IMP=0x000000000000a2aa
- (id)fetchWithSlowStatementRadar:(id)arg1 objectWithConstructor:(CDUnknownBlockType)arg2 sql:(id)arg3;	// IMP=0x000000000000a0a8
- (id)fetchWithSlowStatementRadar:(id)arg1 objectOfClass:(Class)arg2 sql:(id)arg3;	// IMP=0x0000000000009eb0
- (id)fetchWithSlowStatementRadar:(id)arg1 sql:(id)arg2;	// IMP=0x0000000000009cbe
- (void)setProfilingHook:(CDUnknownBlockType)arg1;	// IMP=0x0000000000009ba9
- (void)flushToMakeEditsVisibleToIPCReaders;	// IMP=0x0000000000009b62
- (_Bool)attachDBAtPath:(id)arg1 as:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000009a41
@property(nonatomic) _Bool profilingEnabled;
- (long long)changes;	// IMP=0x0000000000009374
- (_Bool)openAtURL:(id)arg1 withFlags:(int)arg2 error:(id *)arg3;	// IMP=0x0000000000009296
- (void)_setLockedHandler;	// IMP=0x0000000000009025
- (void)_setErrorHandlerWithDBCorruptionHandler:(CDUnknownBlockType)arg1;	// IMP=0x0000000000008c28
- (id)initWithLabel:(id)arg1 dbCorruptionHandler:(CDUnknownBlockType)arg2;	// IMP=0x0000000000008b1f
- (id)init;	// IMP=0x0000000000008b09

// Remaining properties
@property(copy, nonatomic) CDUnknownBlockType lockedHandler; // @dynamic lockedHandler;

@end

