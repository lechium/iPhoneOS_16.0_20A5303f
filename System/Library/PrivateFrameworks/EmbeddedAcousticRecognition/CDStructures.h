//
//     Generated by classdumpios 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#pragma mark Named Structures

struct EARCSpeechRecognitionResultStream {
    void *ctx;
    CDUnknownFunctionPointerType DisposeContext;
    CDUnknownFunctionPointerType DidRecognizePartialResultTokens;
    CDUnknownFunctionPointerType DidFinishRecognitionWithError;
    CDUnknownFunctionPointerType DidRecognizeFinalResults;
    CDUnknownFunctionPointerType DidProcessAudioDuration;
};

struct EARContinuousListeningResultHelper;

struct basic_string<char, std::char_traits<char>, std::allocator<char>> {
    struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    unsigned long long __cap_;
                    unsigned long long __size_;
                    char *__data_;
                } __l;
                struct __short {
                    union {
                        unsigned char __size_;
                        char __lx;
                    } ;
                    char __data_[23];
                } __s;
                struct __raw {
                    unsigned long long __words[3];
                } __r;
            } ;
        } __value_;
    } __r_;
};

struct basic_string_view<char, std::char_traits<char>> {
    char *_field1;
    unsigned long long _field2;
};

struct mersenne_twister_engine<unsigned int, 32UL, 624UL, 397UL, 31UL, 2567483615U, 11UL, 4294967295U, 7UL, 2636928640U, 15UL, 4022730752U, 18UL, 1812433253U> {
    unsigned int __x_[624];
    unsigned long long __i_;
};

struct shared_ptr<EARContinuousListeningResultHelper> {
    struct EARContinuousListeningResultHelper *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct vector<double, std::allocator<double>> {
    double *__begin_;
    double *__end_;
    struct __compressed_pair<double *, std::allocator<double>> {
        double *__value_;
    } __end_cap_;
};

struct vector<float, std::allocator<float>> {
    float *__begin_;
    float *__end_;
    struct __compressed_pair<float *, std::allocator<float>> {
        float *__value_;
    } __end_cap_;
};

struct vector<std::vector<quasar::Token>, std::allocator<std::vector<quasar::Token>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::vector<quasar::Token>*, std::allocator<std::vector<quasar::Token>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<unsigned long, std::allocator<unsigned long>> {
    unsigned long long *__begin_;
    unsigned long long *__end_;
    struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> {
        unsigned long long *__value_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

// Template types
typedef struct basic_string<char, std::char_traits<char>, std::allocator<char>> {
    struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    unsigned long long __cap_;
                    unsigned long long __size_;
                    char *__data_;
                } __l;
                struct __short {
                    union {
                        unsigned char __size_;
                        char __lx;
                    } ;
                    char __data_[23];
                } __s;
                struct __raw {
                    unsigned long long __words[3];
                } __r;
            } ;
        } __value_;
    } __r_;
} basic_string_8e19b51d;

typedef struct basic_string_view<char, std::char_traits<char>> {
    char *_field1;
    unsigned long long _field2;
} basic_string_view_1993c9b6;

typedef struct shared_ptr<EARContinuousListeningResultHelper> {
    struct EARContinuousListeningResultHelper *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_9d440e49;

typedef struct vector<double, std::allocator<double>> {
    double *__begin_;
    double *__end_;
    struct __compressed_pair<double *, std::allocator<double>> {
        double *__value_;
    } __end_cap_;
} vector_0e047154;

typedef struct vector<std::vector<quasar::Token>, std::allocator<std::vector<quasar::Token>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::vector<quasar::Token>*, std::allocator<std::vector<quasar::Token>>> {
        void *__value_;
    } __end_cap_;
} vector_daa4424d;

