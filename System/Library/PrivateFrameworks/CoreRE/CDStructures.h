//
//     Generated by classdumpios 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class AVAudioFormat, MISSING_TYPE;

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AABB {
    struct Vector3<float> _field1;
    struct Vector3<float> _field2;
};

struct Allocator {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
};

struct AssetService {
    CDUnknownFunctionPointerType *_field1;
};

struct AttributeTable {
    unsigned long long _field1;
    struct FixedArray<re::BufferSlice> _field2;
    struct FixedArray<re::VertexBufferFormat> _field3;
    struct HashBrown<re::WeakStringID, unsigned char, re::Hash<re::WeakStringID>, re::EqualTo<re::WeakStringID>, re::Hash<uint8_t>, false> _field4;
};

struct AudioAssetConfiguration {
    _Bool _field1;
    id _field2;
    int _field3;
    int _field4;
    double _field5;
};

struct AudioBuffer {
    unsigned int _field1;
    unsigned int _field2;
    void *_field3;
};

struct AudioBufferList {
    unsigned int _field1;
    struct AudioBuffer _field2[1];
};

struct AudioComponentDescription {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
};

struct AudioFileAssetReader {
    struct SeekableInputStream *seekableStream;
    _Bool ownedStream;
    struct SeekableInputStreamBufferedReader *backingData;
    struct OpaqueAudioFileID *audioFile;
    struct OpaqueExtAudioFile *audioFileRef;
    long long fileLength;
    AVAudioFormat *format;
};

struct BlendShapeModelBuilder {
    struct Device _field1;
    struct DeformationModelData *_field2;
};

struct Buffer {
    id _field1;
};

struct BufferSlice;

struct CGSize {
    double _field1;
    double _field2;
};

struct Connection {
    id _field1;
};

struct DataArrayHandle<re::MeshModel> {
    struct ElementPointer _field1;
    unsigned int :24;
    unsigned int :8;
};

struct DeformationModelData {
    struct unique_ptr<void, std::function<void (void *)>> _field1[18];
};

struct Device {
    id _field1;
};

struct ElementPointer {
    unsigned short _field1;
    unsigned short _field2;
};

struct EntryWithHash;

struct EntryWithoutHash;

struct FadeState {
    unsigned int uniqueID;
    _Bool shouldFade;
};

struct FixedArray<int> {
    struct Allocator *_field1;
    unsigned long long _field2;
    int *_field3;
};

struct FixedArray<re::BufferSlice> {
    struct Allocator *_field1;
    unsigned long long _field2;
    struct BufferSlice *_field3;
};

struct FixedArray<re::MeshLodLevelInfo> {
    struct Allocator *_field1;
    unsigned long long _field2;
    struct MeshLodLevelInfo *_field3;
};

struct FixedArray<re::MeshPart> {
    struct Allocator *_field1;
    unsigned long long _field2;
    struct MeshPart *_field3;
};

struct FixedArray<re::SharedPtr<re::MaterialParameterBlock>> {
    struct Allocator *_field1;
    unsigned long long _field2;
    void *_field3;
};

struct FixedArray<re::StringID> {
    struct Allocator *_field1;
    unsigned long long _field2;
    struct StringID *_field3;
};

struct FixedArray<re::VertexBufferFormat> {
    struct Allocator *_field1;
    unsigned long long _field2;
    struct VertexBufferFormat *_field3;
};

struct FixedInlineArray<unsigned char, 24UL> {
    unsigned char _field1[24];
};

struct HashBrown<re::WeakStringID, unsigned char, re::Hash<re::WeakStringID>, re::EqualTo<re::WeakStringID>, re::Hash<uint8_t>, false> {
    void *_field1;
    void *_field2;
    unsigned long long _field3;
    unsigned long long _field4;
    unsigned long long _field5;
    unsigned long long _field6;
    unsigned long long _field7;
    struct Allocator *_field8;
};

struct HashTable<unsigned long long, PHASESource *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false> {
    struct Allocator *m_allocator;
    unsigned int *m_buckets;
    union Entry m_entries;
    unsigned int m_capacity;
    unsigned int m_count;
    unsigned int m_touchedEntries;
    unsigned int m_freeList;
    unsigned int m_version;
};

struct Matrix4x4<float> {
    union {
        struct {
            float _field1;
            float _field2;
            float _field3;
            float _field4;
            float _field5;
            float _field6;
            float _field7;
            float _field8;
            float _field9;
            float _field10;
            float _field11;
            float _field12;
            float _field13;
            float _field14;
            float _field15;
            float _field16;
        } _field1;
        struct float4x4 _field2;
        struct {
            struct Vector4<float> _field1;
            struct Vector4<float> _field2;
            struct Vector4<float> _field3;
            struct Vector4<float> _field4;
        } _field3;
        struct Vector4<float> _field4[4];
        float _field5[4][4];
        float _field6[16];
    } _field1;
};

struct MeshInstance {
    struct StringID _field1;
    struct DataArrayHandle<re::MeshModel> _field2;
    struct MeshLodSelectOptions _field3;
    struct Matrix4x4<float> _field4;
    struct FixedArray<int> _field5;
    struct FixedArray<re::SharedPtr<re::MaterialParameterBlock>> _field6;
};

struct MeshLodLevelInfo {
    float _field1;
    float _field2;
    unsigned int _field3;
};

struct MeshLodSelectOptions {
    int strategy;
    _Bool crossFade;
    float crossFadeInterval;
    float bias;
    float throttleBias;
};

struct MeshModel {
    struct StringID _field1;
    struct AABB _field2;
    struct FixedArray<re::MeshPart> _field3;
    struct FixedArray<re::MeshLodLevelInfo> _field4;
    struct DeformationModelData _field5;
};

struct MeshModelContext {
    id _field1;
    struct Buffer _field2;
};

struct MeshPart {
    struct AttributeTable _field1;
    struct FixedArray<re::StringID> _field2;
    struct Matrix4x4<float> _field3;
    struct AABB _field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned char _field7;
    unsigned short _field8;
    struct FixedInlineArray<unsigned char, 24UL> _field9;
    struct StringID _field10;
    unsigned int _field11;
    unsigned int _field12;
    unsigned char _field13;
    int _field14;
    struct RenderFlags _field15;
};

struct OpaqueAudioFileID;

struct OpaqueExtAudioFile;

struct PendingListener;

struct REMeshLodSelectOptions {
    struct MeshLodSelectOptions options;
};

struct REPHASESoundEventCommandState;

struct RERotatingShapedWhiteNoiseState;

struct RenderFlags {
    unsigned short _field1;
};

struct RenderPipelineDescriptorData {
    unsigned int _field1;
    int _field2[8];
    int _field3;
};

struct RenderTargetInfo {
    struct RenderPipelineDescriptorData _field1;
    _Bool _field2;
    unsigned int _field3;
};

struct SeekableInputStream {
    CDUnknownFunctionPointerType *_field1;
};

struct SeekableInputStreamBufferedReader;

struct SkinningModelBuilder {
    struct Device *_field1;
    struct DeformationModelData *_field2;
    unsigned long long _field3;
    _Bool _field4;
};

struct StreamWriter;

struct StringID {
    struct {
        unsigned int :1;
        unsigned int :63;
    } _field1;
    char *_field2;
};

struct UnfairLock {
    struct os_unfair_lock_s m_lock;
};

struct Vector3<float> {
    union {
        struct {
            float _field1;
            float _field2;
            float _field3;
        } _field1;
        float _field2[3];
    } _field1;
};

struct Vector4<float> {
    union {
        struct {
            float _field1;
            float _field2;
            float _field3;
            float _field4;
        } _field1;
        float _field2[4];
    } _field1;
};

struct VertexAttributeDescriptor {
    char *_field1;
    unsigned char _field2;
    unsigned char _field3;
    int _field4;
};

struct VertexBufferFormat;

struct __shared_weak_count;

struct _opaque_pthread_mutex_t {
    long long __sig;
    char __opaque[56];
};

struct array<std::vector<float>, 2UL> {
    struct vector<float, std::allocator<float>> __elems_[2];
};

struct atomic<FadeState> {
    struct __cxx_atomic_impl<FadeState, std::__cxx_atomic_base_impl<FadeState>> {
        _Atomic struct FadeState __a_value;
    } __a_;
};

struct atomic<REAudioPlaybackState> {
    struct __cxx_atomic_impl<REAudioPlaybackState, std::__cxx_atomic_base_impl<REAudioPlaybackState>> {
        _Atomic unsigned long long __a_value;
    } __a_;
};

struct atomic<bool> {
    struct __cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>> {
        _Atomic _Bool __a_value;
    } __a_;
};

struct atomic<float> {
    struct __cxx_atomic_impl<float, std::__cxx_atomic_base_impl<float>> {
        _Atomic float __a_value;
    } __a_;
};

struct atomic<int> {
    struct __cxx_atomic_impl<int, std::__cxx_atomic_base_impl<int>> {
        _Atomic int __a_value;
    } __a_;
};

struct atomic<unsigned int> {
    struct __cxx_atomic_impl<unsigned int, std::__cxx_atomic_base_impl<unsigned int>> {
        _Atomic unsigned int __a_value;
    } __a_;
};

struct atomic<unsigned long long> {
    struct __cxx_atomic_impl<unsigned long long, std::__cxx_atomic_base_impl<unsigned long long>> {
        _Atomic unsigned long long __a_value;
    } __a_;
};

struct deque<REPHASESoundEventCommandState, std::allocator<REPHASESoundEventCommandState>> {
    struct __split_buffer<REPHASESoundEventCommandState *, std::allocator<REPHASESoundEventCommandState *>> {
        struct REPHASESoundEventCommandState **__first_;
        struct REPHASESoundEventCommandState **__begin_;
        struct REPHASESoundEventCommandState **__end_;
        struct __compressed_pair<REPHASESoundEventCommandState **, std::allocator<REPHASESoundEventCommandState *>> {
            struct REPHASESoundEventCommandState **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::allocator<REPHASESoundEventCommandState>> {
        unsigned long long __value_;
    } __size_;
};

struct float4x4 {
    MISSING_TYPE *_field1[4];
};

struct function<void (re::HashTable<unsigned long long, PHASEListener *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)> {
    struct __value_func<void (re::HashTable<unsigned long long, PHASEListener *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)> {
        struct type __buf_;
        void *__f_;
    } __f_;
};

struct function<void (re::HashTable<unsigned long long, PHASEObject *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)> {
    struct __value_func<void (re::HashTable<unsigned long long, PHASEObject *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)> {
        struct type __buf_;
        void *__f_;
    } __f_;
};

struct function<void (re::HashTable<unsigned long long, PHASEShape *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)> {
    struct __value_func<void (re::HashTable<unsigned long long, PHASEShape *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)> {
        struct type __buf_;
        void *__f_;
    } __f_;
};

struct function<void (re::HashTable<unsigned long long, REPHASEAudioScene *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)> {
    struct __value_func<void (re::HashTable<unsigned long long, REPHASEAudioScene *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)> {
        struct type __buf_;
        void *__f_;
    } __f_;
};

struct function<void (re::HashTable<unsigned long long, REPHASEEntity *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)> {
    struct __value_func<void (re::HashTable<unsigned long long, REPHASEEntity *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)> {
        struct type __buf_;
        void *__f_;
    } __f_;
};

struct function<void (re::HashTable<unsigned long long, REPHASESoundAsset, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)> {
    struct __value_func<void (re::HashTable<unsigned long long, REPHASESoundAsset, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)> {
        struct type __buf_;
        void *__f_;
    } __f_;
};

struct function<void (re::HashTable<unsigned long long, REPHASESoundEvent *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)> {
    struct __value_func<void (re::HashTable<unsigned long long, REPHASESoundEvent *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)> {
        struct type __buf_;
        void *__f_;
    } __f_;
};

struct function<void (re::HashTable<unsigned long long, bool, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)> {
    struct __value_func<void (re::HashTable<unsigned long long, bool, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)> {
        struct type __buf_;
        void *__f_;
    } __f_;
};

struct function<void (void *)> {
    struct __value_func<void (void *)> {
        struct type _field1;
        void *_field2;
    } _field1;
};

struct mutex {
    struct _opaque_pthread_mutex_t __m_;
};

struct optional<double> {
    union {
        char __null_state_;
        double __val_;
    } ;
    _Bool __engaged_;
};

struct os_unfair_lock_s {
    unsigned int _os_unfair_lock_opaque;
};

struct queue<REPHASESoundEventCommandState, std::deque<REPHASESoundEventCommandState>> {
    struct deque<REPHASESoundEventCommandState, std::allocator<REPHASESoundEventCommandState>> c;
};

struct recursive_mutex {
    struct _opaque_pthread_mutex_t __m_;
};

struct shared_ptr<AudioStreamRecordingManager::StreamWriter> {
    struct StreamWriter *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<RERotatingShapedWhiteNoiseState> {
    struct RERotatingShapedWhiteNoiseState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct type {
    unsigned char __lx[32];
};

struct unique_ptr<re::HashTable<unsigned long long, PHASEListener *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>, std::function<void (re::HashTable<unsigned long long, PHASEListener *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)>> {
    struct __compressed_pair<re::HashTable<unsigned long long, PHASEListener *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*, std::function<void (re::HashTable<unsigned long long, PHASEListener *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)>> {
        void *__value_;
        struct function<void (re::HashTable<unsigned long long, PHASEListener *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)> __value_;
    } __ptr_;
};

struct unique_ptr<re::HashTable<unsigned long long, PHASEObject *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>, std::function<void (re::HashTable<unsigned long long, PHASEObject *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)>> {
    struct __compressed_pair<re::HashTable<unsigned long long, PHASEObject *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*, std::function<void (re::HashTable<unsigned long long, PHASEObject *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)>> {
        void *__value_;
        struct function<void (re::HashTable<unsigned long long, PHASEObject *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)> __value_;
    } __ptr_;
};

struct unique_ptr<re::HashTable<unsigned long long, PHASEShape *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>, std::function<void (re::HashTable<unsigned long long, PHASEShape *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)>> {
    struct __compressed_pair<re::HashTable<unsigned long long, PHASEShape *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*, std::function<void (re::HashTable<unsigned long long, PHASEShape *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)>> {
        void *__value_;
        struct function<void (re::HashTable<unsigned long long, PHASEShape *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)> __value_;
    } __ptr_;
};

struct unique_ptr<re::HashTable<unsigned long long, REPHASEAudioScene *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>, std::function<void (re::HashTable<unsigned long long, REPHASEAudioScene *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)>> {
    struct __compressed_pair<re::HashTable<unsigned long long, REPHASEAudioScene *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*, std::function<void (re::HashTable<unsigned long long, REPHASEAudioScene *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)>> {
        void *__value_;
        struct function<void (re::HashTable<unsigned long long, REPHASEAudioScene *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)> __value_;
    } __ptr_;
};

struct unique_ptr<re::HashTable<unsigned long long, REPHASEEntity *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>, std::function<void (re::HashTable<unsigned long long, REPHASEEntity *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)>> {
    struct __compressed_pair<re::HashTable<unsigned long long, REPHASEEntity *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*, std::function<void (re::HashTable<unsigned long long, REPHASEEntity *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)>> {
        void *__value_;
        struct function<void (re::HashTable<unsigned long long, REPHASEEntity *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)> __value_;
    } __ptr_;
};

struct unique_ptr<re::HashTable<unsigned long long, REPHASESoundAsset, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>, std::function<void (re::HashTable<unsigned long long, REPHASESoundAsset, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)>> {
    struct __compressed_pair<re::HashTable<unsigned long long, REPHASESoundAsset, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*, std::function<void (re::HashTable<unsigned long long, REPHASESoundAsset, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)>> {
        void *__value_;
        struct function<void (re::HashTable<unsigned long long, REPHASESoundAsset, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)> __value_;
    } __ptr_;
};

struct unique_ptr<re::HashTable<unsigned long long, REPHASESoundEvent *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>, std::function<void (re::HashTable<unsigned long long, REPHASESoundEvent *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)>> {
    struct __compressed_pair<re::HashTable<unsigned long long, REPHASESoundEvent *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*, std::function<void (re::HashTable<unsigned long long, REPHASESoundEvent *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)>> {
        void *__value_;
        struct function<void (re::HashTable<unsigned long long, REPHASESoundEvent *, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)> __value_;
    } __ptr_;
};

struct unique_ptr<re::HashTable<unsigned long long, bool, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>, std::function<void (re::HashTable<unsigned long long, bool, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)>> {
    struct __compressed_pair<re::HashTable<unsigned long long, bool, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*, std::function<void (re::HashTable<unsigned long long, bool, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)>> {
        void *__value_;
        struct function<void (re::HashTable<unsigned long long, bool, re::Hash<uint64_t>, re::EqualTo<uint64_t>, true, false>*)> __value_;
    } __ptr_;
};

struct unique_ptr<re::audio::FixedSpscAudioQueue<GainRampCommand>, std::default_delete<re::audio::FixedSpscAudioQueue<GainRampCommand>>> {
    struct __compressed_pair<re::audio::FixedSpscAudioQueue<GainRampCommand>*, std::default_delete<re::audio::FixedSpscAudioQueue<GainRampCommand>>> {
        void *__value_;
    } __ptr_;
};

struct unique_ptr<void, std::function<void (void *)>> {
    struct __compressed_pair<void *, std::function<void (void *)>> {
        void *_field1;
        struct function<void (void *)> _field2;
    } _field1;
};

struct vector<PendingListener, std::allocator<PendingListener>> {
    struct PendingListener *__begin_;
    struct PendingListener *__end_;
    struct __compressed_pair<PendingListener *, std::allocator<PendingListener>> {
        struct PendingListener *__value_;
    } __end_cap_;
};

struct vector<float, std::allocator<float>> {
    float *__begin_;
    float *__end_;
    struct __compressed_pair<float *, std::allocator<float>> {
        float *__value_;
    } __end_cap_;
};

struct vector<int, std::allocator<int>> {
    int *__begin_;
    int *__end_;
    struct __compressed_pair<int *, std::allocator<int>> {
        int *__value_;
    } __end_cap_;
};

struct vector<unsigned long long, std::allocator<unsigned long long>> {
    unsigned long long *__begin_;
    unsigned long long *__end_;
    struct __compressed_pair<unsigned long long *, std::allocator<unsigned long long>> {
        unsigned long long *__value_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct {
    MISSING_TYPE *columns[4];
} CDStruct_14d5dc5e;

typedef struct {
    long long value;
    int timescale;
    unsigned int flags;
    long long epoch;
} CDStruct_1b6d18a9;

// Template types
typedef struct vector<unsigned long long, std::allocator<unsigned long long>> {
    unsigned long long *__begin_;
    unsigned long long *__end_;
    struct __compressed_pair<unsigned long long *, std::allocator<unsigned long long>> {
        unsigned long long *__value_;
    } __end_cap_;
} vector_b42bd36b;

#pragma mark Named Unions

union Entry {
    struct EntryWithoutHash *withoutHash;
    struct EntryWithHash *withHash;
};

