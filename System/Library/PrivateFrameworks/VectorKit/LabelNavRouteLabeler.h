//
//     Generated by classdumpios 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class NSMutableArray, NSMutableDictionary, NSMutableSet, NSString, VKLabelNavRoadGraph, VKPolylineOverlay;

__attribute__((visibility("hidden")))
@interface LabelNavRouteLabeler : NSObject
{
    _Bool _needsLayout;	// 8 = 0x8
    _Bool _drawRoadSigns;	// 9 = 0x9
    VKPolylineOverlay *_route;	// 16 = 0x10
    NSString *_currentLocationText;	// 24 = 0x18
    _Bool _isOnRoute;	// 32 = 0x20
    struct PolylineCoordinate _routeUserOffset;	// 36 = 0x24
    unsigned long long _stepIndex;	// 48 = 0x30
    _Bool _checkOnRouteLabelsAlignment;	// 56 = 0x38
    _Bool _disableTileParseForOneLayout;	// 57 = 0x39
    struct unordered_set<std::shared_ptr<md::LabelTile>, std::hash<std::shared_ptr<md::LabelTile>>, std::equal_to<std::shared_ptr<md::LabelTile>>, geo::StdAllocator<std::shared_ptr<md::LabelTile>, mdm::Allocator>> _tiles;	// 64 = 0x40
    struct unordered_set<std::shared_ptr<md::LabelTile>, std::hash<std::shared_ptr<md::LabelTile>>, std::equal_to<std::shared_ptr<md::LabelTile>>, geo::StdAllocator<std::shared_ptr<md::LabelTile>, mdm::Allocator>> _pendingTiles;	// 120 = 0x78
    NSMutableArray *_junctions;	// 176 = 0xb0
    VKLabelNavRoadGraph *_roadGraph;	// 184 = 0xb8
    struct vector<std::shared_ptr<md::NavLabel>, geo::StdAllocator<std::shared_ptr<md::NavLabel>, mdm::Allocator>> _activeSigns;	// 192 = 0xc0
    struct vector<std::shared_ptr<md::NavLabel>, geo::StdAllocator<std::shared_ptr<md::NavLabel>, mdm::Allocator>> _visibleSigns;	// 224 = 0xe0
    NSMutableArray *_fadingLabels;	// 256 = 0x100
    NSMutableDictionary *_visibleLabelsByName;	// 264 = 0x108
    NSMutableArray *_visibleLabels;	// 272 = 0x110
    NSMutableSet *_visibleShieldGroups;	// 280 = 0x118
    unsigned long long _countVisibleOnRouteRoadSigns;	// 288 = 0x120
    unsigned long long _countVisibleOffRouteRoadSigns;	// 296 = 0x128
    unsigned long long _countVisibleRoadSigns;	// 304 = 0x130
    unsigned long long _maxVisibleOnRouteRoadSigns;	// 312 = 0x138
    unsigned long long _maxVisibleOffRouteRoadSigns;	// 320 = 0x140
    unsigned long long _maxVisibleRoadSigns;	// 328 = 0x148
    unsigned long long _maxOnRoadGraphRoadSigns;	// 336 = 0x150
    unsigned long long _minVisibleOffRoadGraphRoadSigns;	// 344 = 0x158
    unsigned long long _minVisibleProceedToRouteRoadSigns;	// 352 = 0x160
    _Bool _preferRightSideLabelPlacement;	// 360 = 0x168
    float _minSignOffsetDistance;	// 364 = 0x16c
    NSMutableSet *_roadNamesInGuidance;	// 368 = 0x170
    NSMutableArray *_guidanceStepInfos;	// 376 = 0x178
    NSMutableArray *_routeRoadInfos;	// 384 = 0x180
    NSString *_currentRoadName;	// 392 = 0x188
    long long _currentRoadNameIndex;	// 400 = 0x190
    NSString *_currentShieldGroup;	// 408 = 0x198
    _Bool _checkIfRouteSubrangeChanged;	// 416 = 0x1a0
    _Bool _useRouteSubrange;	// 417 = 0x1a1
    _Bool _regenerateRoadSigns;	// 418 = 0x1a2
    _Bool _isStylesheetAnimating;	// 419 = 0x1a3
    struct PolylineCoordinate _routeSubrangeStart;	// 420 = 0x1a4
    struct PolylineCoordinate _routeSubrangeEnd;	// 428 = 0x1ac
    void *_artworkCache;	// 440 = 0x1b8
    struct shared_ptr<md::NavCurrentRoadSign> _currentRoadSign;	// 448 = 0x1c0
    _Bool _debugDisableRoadSignLimit;	// 464 = 0x1d0
    unsigned long long _debugCachedMaxVisibleOffRouteRoadSigns;	// 472 = 0x1d8
    unsigned long long _debugCachedMaxVisibleOnRouteRoadSigns;	// 480 = 0x1e0
    _Bool _debugEnableShieldsOnRouteLine;	// 488 = 0x1e8
    shared_ptr_3e3c7f86 _styleManager;	// 496 = 0x1f0
    _Bool _shouldLabelOppositeCarriageways;	// 512 = 0x200
    struct vector<md::AvoidanceRectWithPriority, geo::StdAllocator<md::AvoidanceRectWithPriority, mdm::Allocator>> _avoidanceRects;	// 520 = 0x208
    _Bool _hasPendingTilesInSnappingRegion;	// 552 = 0x228
    _Bool _needsDebugConsoleClear;	// 553 = 0x229
    struct range_map<geo::Unit<geo::RadianUnitDescription, float>, md::OrientationAction, std::less<geo::Unit<geo::RadianUnitDescription, float>>, std::allocator<std::pair<const gm::Range<geo::Unit<geo::RadianUnitDescription, float>>, md::OrientationAction>>> _onRouteOrientations;	// 560 = 0x230
    struct range_map<geo::Unit<geo::RadianUnitDescription, float>, md::OrientationAction, std::less<geo::Unit<geo::RadianUnitDescription, float>>, std::allocator<std::pair<const gm::Range<geo::Unit<geo::RadianUnitDescription, float>>, md::OrientationAction>>> _relatedRouteOrientations;	// 584 = 0x248
}

- (id).cxx_construct;	// IMP=0x0000000000621886
- (void).cxx_destruct;	// IMP=0x000000000062171e
@property(nonatomic) _Bool debugEnableShieldsOnRouteLine; // @synthesize debugEnableShieldsOnRouteLine=_debugEnableShieldsOnRouteLine;
@property(readonly, nonatomic) const void *visibleSigns; // @synthesize visibleSigns=_visibleSigns;
@property(nonatomic) void *artworkCache; // @synthesize artworkCache=_artworkCache;
@property(nonatomic) _Bool debugDisableRoadSignLimit; // @synthesize debugDisableRoadSignLimit=_debugDisableRoadSignLimit;
@property(retain, nonatomic) NSString *currentShieldGroup; // @synthesize currentShieldGroup=_currentShieldGroup;
@property(retain, nonatomic) NSString *currentRoadName; // @synthesize currentRoadName=_currentRoadName;
@property(readonly, nonatomic) const void *activeSigns; // @synthesize activeSigns=_activeSigns;
@property(retain, nonatomic) NSString *currentLocationText; // @synthesize currentLocationText=_currentLocationText;
@property(nonatomic) struct PolylineCoordinate routeUserOffset; // @synthesize routeUserOffset=_routeUserOffset;
@property(nonatomic) _Bool drawRoadSigns; // @synthesize drawRoadSigns=_drawRoadSigns;
@property(retain, nonatomic) VKPolylineOverlay *route; // @synthesize route=_route;
@property(readonly, nonatomic) _Bool needsLayout; // @synthesize needsLayout=_needsLayout;
- (unsigned char)computeRoutePositionForPOIAtPixel:(const void *)arg1 currentPosition:(unsigned char)arg2 context:(struct NavContext *)arg3;	// IMP=0x0000000000621622
- (_Bool)_updateActiveRouteRange;	// IMP=0x0000000000620711
- (_Bool)_findRouteOverlappingJunctionFrom:(long long)arg1 routeJunctions:(void *)arg2 lookBackward:(_Bool)arg3 firstOverlap:(long long *)arg4 secondOverlap:(long long *)arg5;	// IMP=0x000000000062050e
- (void)_updateCurrentRoadInfo;	// IMP=0x00000000006201c1
- (void)_initalizeCurrentRoadInfo;	// IMP=0x00000000006201a4
- (void)_dedupOffRouteRoads;	// IMP=0x000000000061f8c8
- (void)_updatePreferredLabelPlacements;	// IMP=0x000000000061f5ad
- (void)_updateRoadsInGuidance;	// IMP=0x000000000061f057
- (void)_updateRoadStarts;	// IMP=0x000000000061ebc4
- (void)_updateUniqueOffRouteRoads;	// IMP=0x000000000061e611
- (_Bool)_addJunctionsForTile:(const void *)arg1;	// IMP=0x000000000061d543
- (void)_addLabelsForJunctions:(id)arg1 withContext:(struct NavContext *)arg2 maxLabelsToAdd:(unsigned long long)arg3 useAllJunctions:(_Bool)arg4 placeShieldsFrontToBack:(_Bool)arg5;	// IMP=0x000000000061c730
- (void)_addLabelsAtJunctions:(id)arg1 withContext:(struct NavContext *)arg2 maxLabelsToAdd:(unsigned long long)arg3;	// IMP=0x000000000061c111
- (void)_addVisibleSigns;	// IMP=0x000000000061c04d
- (void)layoutWithNavContext:(struct NavContext *)arg1 avoidanceRects:(const void *)arg2;	// IMP=0x00000000006196c9
- (unsigned char)orientationForRoadSign:(id)arg1 roadLabel:(id)arg2 navContext:(struct NavContext *)arg3;	// IMP=0x00000000006194bd
- (unsigned char)resolveOrientation:(struct NavContext *)arg1 road:(id)arg2 currentOrientation:(unsigned char)arg3;	// IMP=0x00000000006192de
- (optional_2c5953d3)createRoadSignOrientationResolver:(id)arg1 navContext:(struct NavContext *)arg2;	// IMP=0x0000000000618e64
- (void)_generateCurrentRoadSignWithContext:(struct NavContext *)arg1;	// IMP=0x0000000000618217
- (void)styleManagerDidFinishAnimating;	// IMP=0x000000000061820a
- (void)styleManagerDidStartAnimating;	// IMP=0x00000000006181fb
- (void)styleManagerDidChange:(_Bool)arg1;	// IMP=0x00000000006181e4
- (_Bool)_collideLabel:(id)arg1 activeLabel:(id)arg2 labelsToRemove:(id)arg3;	// IMP=0x000000000061795f
- (void)_tryAddLabel:(id)arg1 navContext:(struct NavContext *)arg2 labelCollisionEnabled:(_Bool)arg3;	// IMP=0x0000000000616598
- (void)_tryAddRoadSignForRoad:(id)arg1 isShield:(_Bool)arg2 navContext:(struct NavContext *)arg3 labelCollisionEnabled:(_Bool)arg4;	// IMP=0x00000000006160fd
- (void)_createOrUpdateLabelForRoad:(id)arg1 isShield:(_Bool)arg2 navContext:(struct NavContext *)arg3 hopOffsetDistance:(float)arg4;	// IMP=0x0000000000615f8d
- (void)_tryAddRoadSignForJunction:(id)arg1 navContext:(struct NavContext *)arg2 labelCollisionEnabled:(_Bool)arg3;	// IMP=0x0000000000615e15
- (void)grabTilesFromScene:(const void *)arg1;	// IMP=0x0000000000615aff
- (void)_refreshGuidanceRoadNames;	// IMP=0x0000000000615872
- (void)_reloadRouteJunctions;	// IMP=0x000000000061557a
- (void)clearSceneIsMemoryWarning:(_Bool)arg1;	// IMP=0x0000000000615487
- (_Bool)isNavMode;	// IMP=0x000000000061546f
- (void)setMaxVisibleRoadsigns:(unsigned int)arg1;	// IMP=0x00000000006152ec
- (void)setStyleManager:(shared_ptr_3e3c7f86)arg1;	// IMP=0x00000000006150d8
- (id)init;	// IMP=0x0000000000614b54
@property(readonly, nonatomic) float currentRoadSignPixelHeight;
@property(readonly, nonatomic) void *currentRoadSign;
- (void)drawNavOverlayDebugView:(void *)arg1 navContext:(struct NavContext *)arg2;	// IMP=0x0000000000503fb3
- (void)drawRoadSignOrientationDebugView:(void *)arg1 navContext:(struct NavContext *)arg2;	// IMP=0x000000000050308d
- (void)debugDraw:(id)arg1 overlayConsole:(void *)arg2 navContext:(struct NavContext *)arg3;	// IMP=0x0000000000502f1a
- (_Bool)needsDebugDraw;	// IMP=0x0000000000502e24

@end

