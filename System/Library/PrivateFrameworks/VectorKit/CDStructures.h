//
//     Generated by classdumpios 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class VKCamera, VKManifestTileGroupObserverProxy, VKPolylineOverlay, VKResourceManager, VKTimedAnimation;

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct ARSessionObserver {
    CDUnknownFunctionPointerType *_field1;
};

struct Allocator;

struct AlphaAtlas;

struct AltitudeDebugSettings {
    _Bool altitudePauseLoading;
    _Bool altitudeFreezeViewNode;
    _Bool altitudeTexturePaging;
    _Bool altitudeShowTileBounds;
    _Bool altitudeThreadDrawing;
    _Bool altitudeMipmapSatellite;
    _Bool altitudeMipmapFlyover;
    _Bool altitudeMipmapObjectTree;
    _Bool altitudeShowNightLight;
    float lodScale;
    float tileQualityThreshold;
    float hideMeshTime;
    float fadeSpeed;
    _Bool tourSpeedup;
    float tourSpeedupFactor;
};

struct AnimationRunner {
    struct MapEngine *_field1;
};

struct AvoidanceRectWithPriority;

struct Batcher;

struct BitmapDataBase;

struct Box<double, 2> {
    Matrix_2bdd42a3 _minimum;
    Matrix_2bdd42a3 _maximum;
};

struct Box<double, 3> {
    Matrix_6e1d3589 _minimum;
    Matrix_6e1d3589 _maximum;
};

struct Box<float, 2> {
    Matrix_8746f91e _field1;
    Matrix_8746f91e _field2;
};

struct Box<float, 3> {
    Matrix_811b2232 _minimum;
    Matrix_811b2232 _maximum;
};

struct BufferData;

struct BufferMemory {
    struct ResourceAccessor *_accessor;
    struct BufferData *_user;
    struct Range<unsigned long> _range;
    int _access;
    int _sync;
    char *_data;
};

struct BumpAnimator;

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct Camera;

struct CameraFrame<geo::Radians, double> {
    Coordinate3D_332c2c3b _target;
    Unit_e1574806 _distanceFromTarget;
    Unit_5669e52e _pitch;
    Unit_5669e52e _heading;
    Unit_5669e52e _roll;
};

struct CameraManager {
    CDUnknownFunctionPointerType *_vptr$CameraManager;
    _Bool _panBegin;
    _Bool _panInProgress;
    _Bool _panEnd;
    Matrix_443f5d51 _panCurrentCursor;
    Matrix_443f5d51 _panPreviousCursor;
    Matrix_443f5d51 _panStartCursor;
    Coordinate3D_332c2c3b _panStartPosition;
    double _panDistance;
    _Bool _panAtStartPosition;
    _Bool _rotateBegin;
    _Bool _rotateInProgress;
    _Bool _rotateEnd;
    Coordinate3D_332c2c3b _rotateStartPosition;
    Matrix_443f5d51 _rotateCurrentCursor;
    double _rotateAngle;
    _Bool _tiltBegin;
    _Bool _tiltInProgress;
    _Bool _tiltEnd;
    Coordinate3D_332c2c3b _tiltStartPosition;
    Matrix_443f5d51 _tiltCurrentCursor;
    Matrix_443f5d51 _tiltPreviousCursor;
    double _tiltAngle;
    _Bool _zoomBegin;
    _Bool _zoomInProgress;
    _Bool _zoomEnd;
    Coordinate3D_332c2c3b _zoomStartPosition;
    Matrix_443f5d51 _zoomCurrentCursor;
    double _zoomFactor;
    double _zoomStartDistance;
    _Bool _zoomRotateToNorth;
    _Bool _useTiltLimit;
    int _tiltLimitMode;
    _Bool _tiltLimitPushDownEnabled;
    _Bool _tiltLimitTransferInProgress;
    _Bool _tiltLimitPushDown;
    double _startPushDownTilt;
    double _tiltLimitTransferFraction;
    double _startTiltLimitTilt;
    Geocentric_d8fde6f2 _startTiltLimitPosition;
    Matrix_6e1d3589 _startTiltLimitDirection;
    double _fullZoomTiltLimitFactor;
    Box_3d7e3c2c _singleRestriction;
    Box_3d7e3c2c _westOfDatelineRestriction;
    Box_3d7e3c2c _eastOfDatelineRestriction;
};

struct CollectionPoint {
    unsigned long long pointId;
    struct RigidTransform<double, float> frame;
    struct Unit<geo::RadianUnitDescription, float> heading;
    Mercator3_d8bb135c mercatorPosition;
    unsigned long long time;
    struct small_vector<md::mun::PhotoInfo, 6UL> photos;
    float heightAboveGroundMeters;
    unsigned int buildId;
    unsigned short bucketId;
    unsigned char type;
    unsigned char dataType;
    unsigned char texturedLodMask;
};

struct Color<double, 4, geo::ColorSpace::Linear> {
    struct Matrix<double, 4, 1> _backing;
};

struct Color<float, 4, geo::ColorSpace::Linear> {
    struct Matrix<float, 4, 1> _field1;
};

struct Coordinate2D<geo::Radians, double> {
    Unit_5669e52e latitude;
    Unit_5669e52e longitude;
};

struct Coordinate3D<geo::Degrees, double> {
    Unit_6d5b752b latitude;
    Unit_6d5b752b longitude;
    Unit_e1574806 altitude;
};

struct Coordinate3D<geo::Radians, double> {
    Unit_5669e52e latitude;
    Unit_5669e52e longitude;
    Unit_e1574806 altitude;
};

struct DataOverrideManager;

struct DataWrite<ggl::BuildingFlatStroke::DefaultVbo> {
    struct BufferMemory _memory;
};

struct DataWrite<ggl::PolygonBase::CompressedVbo> {
    struct BufferMemory _memory;
};

struct DataWrite<ggl::PolygonCommonStroke::DefaultVbo> {
    struct BufferMemory _memory;
};

struct DataWrite<ggl::Venue3DStroke::HorizontalDefaultVbo> {
    struct BufferMemory _memory;
};

struct DataWrite<ggl::Venue3DStroke::VerticalDefaultVbo> {
    struct BufferMemory _memory;
};

struct DataWrite<ggl::VenueWall::DefaultVbo> {
    struct BufferMemory _memory;
};

struct DataWrite<ggl::VenueWall::EndCapVbo> {
    struct BufferMemory _memory;
};

struct DataWrite<unsigned short> {
    struct BufferMemory _memory;
};

struct DebugConsoleManager;

struct Device;

struct DistanceAtlas;

struct EulerAngles {
    Unit_5669e52e pitch;
    Unit_5669e52e yaw;
    Unit_5669e52e roll;
};

struct FeatureAttributePair;

struct FeatureAttributeSet {
    struct vector<gss::FeatureAttributePair, geo::StdAllocator<gss::FeatureAttributePair, gss::Allocator>> _field1;
};

struct FeatureStyleAttributesSet {
    struct set<std::shared_ptr<FeatureStyleAttributes>, FeatureStyleAttributesSet::FeatureStyleAttributesCompare, std::allocator<std::shared_ptr<FeatureStyleAttributes>>> _set;
    struct vector<std::shared_ptr<FeatureStyleAttributes>, geo::StdAllocator<std::shared_ptr<FeatureStyleAttributes>, geo::codec::Allocator>> _array;
};

struct FlyoverLibrary;

struct FontManager;

struct GeoCodecsConnectivityJunction {
    unsigned int _field1;
    unsigned int _field2;
    struct GeoCodecsPointFeature *_field3;
};

struct GeoCodecsFeatureStylePair {
    unsigned int _field1;
    int _field2;
};

struct GeoCodecsMultiSectionFeature;

struct GeoCodecsPointFeature;

struct GeoCodecsRoadEdge {
    struct GeoCodecsMultiSectionFeature *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned long long _field4;
    unsigned long long _field5;
    struct GeoCodecsConnectivityJunction *_field6;
    struct GeoCodecsConnectivityJunction *_field7;
};

struct GeoResourceProvider;

struct GeoServicesLoadJob;

struct Geocentric<double> {
    double _e[3];
};

struct GlobeAdapter;

struct GlobeOverlayContainer {
    struct GlobeView *_field1;
    id _field2;
    struct mutex _field3;
    double _field4;
};

struct GlobeView;

struct GradientTraffic {
    float blend;
    unsigned char start;
    unsigned char end;
};

struct IOSurfaceTexture;

struct IconManager;

struct Intersection {
    Geocentric_d8fde6f2 _field1;
    Matrix_6e1d3589 _field2;
};

struct IsoAlphaAtlas;

struct LabelExternalIconElement {
    Matrix_8746f91e size;
    Matrix_8746f91e anchorPoint;
    _Bool isRound;
    unsigned char minZoom;
};

struct LabelExternalTextElement {
    unsigned char minZoom;
    unsigned char textType;
    struct StringWithLocale text;
    struct StringWithLocale localizedText;
};

struct LabelFeatureMarker;

struct LabelIcon;

struct LabelLayoutContext;

struct LabelManager;

struct LabelNavJunctionInfo;

struct LabelNavLayoutContext;

struct LabelPoint;

struct LabelTile;

struct ManeuverArrowCoordinates {
    struct vector<md::ManeuverArrowInfo, std::allocator<md::ManeuverArrowInfo>> _maneuverArrows;
};

struct ManeuverArrowInfo;

struct MapEngine;

struct MapNavLabeler;

struct MaterialTextureManager;

struct Matrix<double, 2, 1> {
    double _e[2];
};

struct Matrix<double, 3, 1> {
    double _e[3];
};

struct Matrix<double, 4, 1> {
    double _e[4];
};

struct Matrix<double, 4, 4> {
    double _e[16];
};

struct Matrix<float, 2, 1> {
    float _e[2];
};

struct Matrix<float, 3, 1> {
    float _e[3];
};

struct Matrix<float, 4, 1> {
    float _field1[4];
};

struct Matrix<int, 2, 1> {
    int _e[2];
};

struct Mercator2<double> {
    double _e[2];
};

struct Mercator3<double> {
    double _e[3];
};

struct MeshSet<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh, ggl::BuildingFlatStroke::DefaultVbo> {
    struct vector<std::pair<unsigned short, unsigned int>, std::allocator<std::pair<unsigned short, unsigned int>>> _vertexAndIndexCounts;
    struct vector<std::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>, std::allocator<std::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>>> _meshes;
    struct DataWrite<ggl::BuildingFlatStroke::DefaultVbo> _vertexDataWrite;
    struct DataWrite<unsigned short> _indexDataWrite;
    unsigned char _meshIndex;
    unsigned short _meshVertexOffset;
    unsigned int _meshIndexOffset;
    struct MeshSetStorage *_storage;
    struct unique_ptr<md::MeshSetStorage, std::default_delete<md::MeshSetStorage>> _internalStorage;
    struct shared_ptr<md::MeshSetStorageClient> _storageClient;
};

struct MeshSet<ggl::PolygonBase::CompressedMeshMesh, ggl::PolygonBase::CompressedVbo> {
    struct vector<std::pair<unsigned short, unsigned int>, std::allocator<std::pair<unsigned short, unsigned int>>> _vertexAndIndexCounts;
    struct vector<std::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>, std::allocator<std::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>>> _meshes;
    struct DataWrite<ggl::PolygonBase::CompressedVbo> _vertexDataWrite;
    struct DataWrite<unsigned short> _indexDataWrite;
    unsigned char _meshIndex;
    unsigned short _meshVertexOffset;
    unsigned int _meshIndexOffset;
    struct MeshSetStorage *_storage;
    struct unique_ptr<md::MeshSetStorage, std::default_delete<md::MeshSetStorage>> _internalStorage;
    struct shared_ptr<md::MeshSetStorageClient> _storageClient;
};

struct MeshSet<ggl::PolygonCommonStroke::MeshMesh, ggl::PolygonCommonStroke::DefaultVbo> {
    struct vector<std::pair<unsigned short, unsigned int>, std::allocator<std::pair<unsigned short, unsigned int>>> _vertexAndIndexCounts;
    struct vector<std::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>, std::allocator<std::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>>> _meshes;
    struct DataWrite<ggl::PolygonCommonStroke::DefaultVbo> _vertexDataWrite;
    struct DataWrite<unsigned short> _indexDataWrite;
    unsigned char _meshIndex;
    unsigned short _meshVertexOffset;
    unsigned int _meshIndexOffset;
    struct MeshSetStorage *_storage;
    struct unique_ptr<md::MeshSetStorage, std::default_delete<md::MeshSetStorage>> _internalStorage;
    struct shared_ptr<md::MeshSetStorageClient> _storageClient;
};

struct MeshSet<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh, ggl::Venue3DStroke::HorizontalDefaultVbo> {
    struct vector<std::pair<unsigned short, unsigned int>, std::allocator<std::pair<unsigned short, unsigned int>>> _vertexAndIndexCounts;
    struct vector<std::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>, std::allocator<std::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>>> _meshes;
    struct DataWrite<ggl::Venue3DStroke::HorizontalDefaultVbo> _vertexDataWrite;
    struct DataWrite<unsigned short> _indexDataWrite;
    unsigned char _meshIndex;
    unsigned short _meshVertexOffset;
    unsigned int _meshIndexOffset;
    struct MeshSetStorage *_storage;
    struct unique_ptr<md::MeshSetStorage, std::default_delete<md::MeshSetStorage>> _internalStorage;
    struct shared_ptr<md::MeshSetStorageClient> _storageClient;
};

struct MeshSet<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh, ggl::Venue3DStroke::VerticalDefaultVbo> {
    struct vector<std::pair<unsigned short, unsigned int>, std::allocator<std::pair<unsigned short, unsigned int>>> _vertexAndIndexCounts;
    struct vector<std::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>, std::allocator<std::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>>> _meshes;
    struct DataWrite<ggl::Venue3DStroke::VerticalDefaultVbo> _vertexDataWrite;
    struct DataWrite<unsigned short> _indexDataWrite;
    unsigned char _meshIndex;
    unsigned short _meshVertexOffset;
    unsigned int _meshIndexOffset;
    struct MeshSetStorage *_storage;
    struct unique_ptr<md::MeshSetStorage, std::default_delete<md::MeshSetStorage>> _internalStorage;
    struct shared_ptr<md::MeshSetStorageClient> _storageClient;
};

struct MeshSet<ggl::VenueWall::EndCapMesh, ggl::VenueWall::EndCapVbo> {
    struct vector<std::pair<unsigned short, unsigned int>, std::allocator<std::pair<unsigned short, unsigned int>>> _vertexAndIndexCounts;
    struct vector<std::shared_ptr<ggl::VenueWall::EndCapMesh>, std::allocator<std::shared_ptr<ggl::VenueWall::EndCapMesh>>> _meshes;
    struct DataWrite<ggl::VenueWall::EndCapVbo> _vertexDataWrite;
    struct DataWrite<unsigned short> _indexDataWrite;
    unsigned char _meshIndex;
    unsigned short _meshVertexOffset;
    unsigned int _meshIndexOffset;
    struct MeshSetStorage *_storage;
    struct unique_ptr<md::MeshSetStorage, std::default_delete<md::MeshSetStorage>> _internalStorage;
    struct shared_ptr<md::MeshSetStorageClient> _storageClient;
};

struct MeshSet<ggl::VenueWall::MeshMesh, ggl::VenueWall::DefaultVbo> {
    struct vector<std::pair<unsigned short, unsigned int>, std::allocator<std::pair<unsigned short, unsigned int>>> _vertexAndIndexCounts;
    struct vector<std::shared_ptr<ggl::VenueWall::MeshMesh>, std::allocator<std::shared_ptr<ggl::VenueWall::MeshMesh>>> _meshes;
    struct DataWrite<ggl::VenueWall::DefaultVbo> _vertexDataWrite;
    struct DataWrite<unsigned short> _indexDataWrite;
    unsigned char _meshIndex;
    unsigned short _meshVertexOffset;
    unsigned int _meshIndexOffset;
    struct MeshSetStorage *_storage;
    struct unique_ptr<md::MeshSetStorage, std::default_delete<md::MeshSetStorage>> _internalStorage;
    struct shared_ptr<md::MeshSetStorageClient> _storageClient;
};

struct MeshSetStorage;

struct MeshSetStorageClient;

struct MetalDevice;

struct Monitorable<md::ConfigValue<GEOConfigKeyDouble, double>> {
    struct {
        struct {
            unsigned int identifier;
            void *metadata;
        } key;
    } _key;
    double _value;
    id _listener;
    struct function<void (double)> _delegate;
};

struct MultiRectRegion {
    struct set<gm::Box<double, 2>, md::MultiRectSetCompare, std::allocator<gm::Box<double, 2>>> _rects;
    Box_3d7e3c2c _enclosingRect;
};

struct Mutex {
    void *mMutex;
};

struct NavCameraPixelFrameRate;

struct NavContext {
    CDUnknownFunctionPointerType *_field1;
    struct LabelManager *_field2;
    struct MapNavLabeler *_field3;
    struct LabelLayoutContext *_field4;
    struct LabelNavLayoutContext *_field5;
};

struct NavCurrentRoadSign;

struct NavLabel;

struct OESContext;

struct OESDevice;

struct OrientedBox<double, 2U, double, double> {
    RigidTransform_b9386d13 _transform;
    Box_3d7e3c2c _bounds;
};

struct OverlayContainer;

struct PathAnimationDescription {
    struct vector<md::mun::CollectionPoint, std::allocator<md::mun::CollectionPoint>> _field1;
    Geocentric_d8fde6f2 _field2;
    RigidTransform_b9386d13 _field3;
    _Bool _field4;
    int _field5;
    struct shared_ptr<(anonymous namespace)::PathAnimator> _field6;
    unsigned long long _field7;
};

struct PathAnimator;

struct PendingPathAnimation;

struct PerspectiveView<double> {
    RigidTransform_b9386d13 _transform;
    Matrix_08d701e4 _projectionMatrix;
    Matrix_08d701e4 _inverseProjection;
    Matrix_08d701e4 _matrix;
    double _ndcZNear;
    double _aspectRatio;
    struct ViewSize _size;
    int _type;
    Unit_5669e52e _verticalFOV;
    double _near;
    double _far;
};

struct PhotoInfo;

struct PolygonRound {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
    float _field5;
};

struct PolygonRouteAttributes {
    unsigned int routeSignificance;
    unsigned char routeProximity;
    _Bool hasRouteSignificance;
};

struct PolylineCoordinate {
    unsigned int index;
    float offset;
};

struct PolylineGroupChangeObserver {
    CDUnknownFunctionPointerType *_field1;
};

struct Quaternion<double> {
    Matrix_6e1d3589 _imaginary;
    double _scalar;
};

struct Quaternion<float> {
    Matrix_811b2232 _imaginary;
    float _scalar;
};

struct Range<unsigned long> {
    unsigned long long _min;
    unsigned long long _max;
};

struct Ray<double, 3> {
    Matrix_6e1d3589 _field1;
    Matrix_6e1d3589 _field2;
};

struct RealisticCommandBufferSelector;

struct RenderBuffer;

struct RenderTarget;

struct RenderTargetFormat {
    int colorFormats[4];
    unsigned long long colorFormatsCount;
    unsigned int samples;
    int depthStencilFormat;
};

struct Renderer;

struct ResourceAccessor {
    CDUnknownFunctionPointerType *_field1;
};

struct RigidTransform<double, double> {
    Matrix_6e1d3589 _translation;
    struct Quaternion<double> _rotation;
};

struct RigidTransform<double, float> {
    Matrix_6e1d3589 _translation;
    struct Quaternion<float> _rotation;
};

struct RoadSignColoring {
    _Bool _hasFillColor;
    _Bool _hasGradientFillColors;
    _Bool _hasGradientFillAngle;
    _Bool _hasStrokeColor;
    _Bool _hasInnerStrokeColor;
    _Bool _hasShadowColor;
    _Bool _hasTextColor;
    _Bool _hasSecondaryTextColor;
    struct Color<double, 4, geo::ColorSpace::Linear> _fillColor;
    struct array<geo::Color<double, 4, geo::ColorSpace::Linear>, 2UL> _gradientFillColors;
    struct Color<double, 4, geo::ColorSpace::Linear> _strokeColor;
    struct Color<double, 4, geo::ColorSpace::Linear> _innerStrokeColor;
    struct Color<double, 4, geo::ColorSpace::Linear> _shadowColor;
    struct Color<double, 4, geo::ColorSpace::Linear> _textColor;
    struct Color<double, 4, geo::ColorSpace::Linear> _secondaryTextColor;
    double _gradientFillAngle;
};

struct RoadSignGeneratedMetrics {
    struct RoadSignPartMetrics _leftRoadSignPartMetrics;
    struct RoadSignPartMetrics _rightRoadSignPartMetrics;
    struct RoadSignPartMetrics _stretchedRoadSignPartMetrics;
    struct RoadSignPartMetrics _middleRoadSignPartMetrics;
    _Bool _hasMiddleSignPart;
    struct CGSize _imageSize;
    struct CGRect _signBaseRect;
    struct CGRect _glyphRect;
    double _stretchedRoadSignPartWidth;
    struct CGPoint _arrowTipPosition;
    struct CGPoint _arrowAnchorPosition;
    struct CGPoint _textPosition;
    struct CGRect _textBounds;
    struct CGRect _leftPartRect;
    struct CGRect _rightPartRect;
    struct CGRect _stretchedPartRect;
    struct CGRect _middlePartRect;
    struct CGRect _middleLeftStretchedPartRect;
    struct CGRect _middleRightStretchedPartRect;
};

struct RoadSignMetrics {
    unsigned char _orientation;
    double _scale;
    double _contentScale;
    double _arrowWeight;
    double _arrowLength;
    double _arrowTipCornerRadius;
    double _arrowJoinCornerRadius;
    struct CGSize _shadowOffset;
    double _shadowRadius;
    double _strokeWeight;
    double _innerStrokeWeight;
    double _signHeight;
    double _signMargin;
    double _horizontalMargin;
    double _verticalMargin;
    double _cornerRadius;
    struct CGSize _glyphSize;
    double _glyphVerticalOffset;
};

struct RoadSignOrientationResolver {
    void *_field1;
    struct Unit<geo::RadianUnitDescription, float> _field2;
    struct Unit<geo::RadianUnitDescription, float> _field3;
    unsigned char _field4;
};

struct RoadSignPartMetrics {
    unsigned char _type;
    struct CGSize _imageSize;
    struct CGRect _signBaseRect;
    double _topEmptySpaceHeight;
    double _bottomEmptySpaceHeight;
    double _leftEmptySpaceWidth;
    double _rightEmptySpaceWidth;
    double _outsideImagePathExtension;
    _Bool _hasArrows;
    struct CGPoint _arrowWingMin;
    struct CGPoint _arrowWingMax;
    struct CGPoint _arrowTip;
    struct CGPoint _arrowAnchor;
};

struct RoadSignStyleGroup {
    struct shared_ptr<gss::StylesheetQuery<gss::PropertyID>> _field1;
    struct shared_ptr<gss::StylesheetQuery<gss::PropertyID>> _field2;
    struct shared_ptr<gss::StylesheetQuery<gss::PropertyID>> _field3;
};

struct RoadSignTextMetrics {
    double _scale;
    double _contentScale;
    double _horizontalMargin;
    double _verticalMargin;
    double _verticalOffset;
    double _textSize;
    double _secondaryTextSize;
    struct basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>> _fontFamily;
    struct basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>> _secondaryFontFamily;
    double _textDrawWidth;
    double _textWrapWidth;
    unsigned char _maxLineCount;
    _Bool _isRTL;
};

struct RouteContextChangeObserver {
    CDUnknownFunctionPointerType *_field1;
};

struct RouteSegment;

struct RunLoopController {
    struct MapEngine *_field1;
    long long _field2;
    long long _field3;
};

struct Sampler {
    double _min;
    double _max;
    double _avg;
    double _sum;
    unsigned long long _count;
};

struct SamplerState;

struct Spring<double, 1, gdc::SpringType::Angular> {
    double _position;
    double _velocity;
    double _restingPosition;
    double _kSpring;
    double _kDamper;
};

struct Spring<double, 1, gdc::SpringType::Linear> {
    double _position;
    double _velocity;
    double _restingPosition;
    double _kSpring;
    double _kDamper;
};

struct Spring<double, 2, gdc::SpringType::Linear> {
    Matrix_2bdd42a3 _position;
    Matrix_2bdd42a3 _velocity;
    Matrix_2bdd42a3 _restingPosition;
    double _kSpring;
    double _kDamper;
};

struct StandardCommandBufferSelector;

struct StandardLibrary;

struct StdAllocator<GeoCodecsFeatureStylePair, mdm::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<LabelNavJunctionInfo, mdm::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<RouteSegment, mdm::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<char, mdm::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<float, mdm::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>, mdm::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<gss::FeatureAttributePair, gss::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<md::AvoidanceRectWithPriority, mdm::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<md::LabelPoint, mdm::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<std::__hash_node<std::__hash_value_type<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::shared_ptr<NavRoadFeature>>, void *>, mdm::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<std::__hash_node<std::shared_ptr<md::LabelTile>, void *>, mdm::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::shared_ptr<NavRoadFeature>>, void *>*>*, mdm::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<std::__hash_node_base<std::__hash_node<std::shared_ptr<md::LabelTile>, void *>*>*, mdm::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<std::__tree_node<std::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>, std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>, void *>, mdm::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<std::shared_ptr<FeatureStyleAttributes>, geo::codec::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<std::shared_ptr<md::NavLabel>, mdm::Allocator> {
    struct Allocator *_allocator;
};

struct StringWithLocale {
    struct basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>> text;
    struct basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>> locale;
};

struct StrokeBufferSizing {
    unsigned long long _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned long long _field4;
};

struct StyleQueryOverride {
    unsigned char _field1;
    unsigned char _field2;
};

struct StylesheetVendor;

struct TapDescription {
    struct Intersection _field1;
    struct Ray<double, 3> _field2;
    struct CollectionPoint _field3;
    RigidTransform_b9386d13 _field4;
    unsigned long long _field5;
};

struct Task;

struct TaskContext;

struct Texture;

struct Texture2D;

struct Texture2DAbstract;

struct TextureManager;

struct TrafficSegment {
    unsigned int _field1;
    unsigned char _field2;
};

struct Unit<geo::DegreeUnitDescription, double> {
    double _value;
};

struct Unit<geo::MeterUnitDescription, double> {
    double _value;
};

struct Unit<geo::RadianUnitDescription, double> {
    double _value;
};

struct Unit<geo::RadianUnitDescription, float> {
    float _value;
};

struct VKCameraState {
    RigidTransform_b9386d13 _field1;
    double _field2;
    Unit_5669e52e _field3;
    double _field4;
};

struct VKEdgeInsets {
    float top;
    float left;
    float bottom;
    float right;
};

struct VKFootprintConvexHull_struct {
    int edgeCount;
    Matrix_6e1d3589 edgeOrigin[6];
    Matrix_6e1d3589 edgeNormal[6];
};

struct VKGlobeRouteSplit {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
};

struct VKLabelNavRouteRoadEdge {
    struct PolylineCoordinate _field1;
    struct PolylineCoordinate _field2;
    struct GeoCodecsRoadEdge _field3;
    unsigned long long _field4;
    unsigned long long _field5;
};

struct VKRouteLineSnapResult {
    Mercator3_d8bb135c _field1;
    struct pair<geo::Mercator3<double>, geo::Mercator3<double>> _field2;
};

struct View<double> {
    RigidTransform_b9386d13 _field1;
    Matrix_08d701e4 _field2;
    Matrix_08d701e4 _field3;
    Matrix_08d701e4 _field4;
    double _field5;
    double _field6;
    struct ViewSize _field7;
    int _field8;
};

struct ViewSize {
    unsigned short width;
    unsigned short height;
};

struct WindowedSampler<60UL> {
    double _min;
    double _max;
    double _avg;
    double _sum;
    struct optional<unsigned long> _idx;
    struct array<double, 60UL> _samples;
};

struct YFlipPass;

struct _GEOFlyoverKey {
    unsigned int :6;
    unsigned int :26;
    unsigned int :26;
    unsigned int :8;
    unsigned int :24;
    unsigned int :14;
    unsigned int :8;
    unsigned int :8;
};

struct _GEOGloriaQuadIDTileKey {
    unsigned int :6;
    unsigned int :64;
    unsigned int :14;
    unsigned int :36;
};

struct _GEOIdentifiedResourceKey {
    unsigned long long _field1;
    unsigned char _field2;
    unsigned char _field3;
    unsigned int :1;
    unsigned int :39;
};

struct _GEOMuninMeshKey {
    unsigned int :64;
    unsigned int :32;
    unsigned int :16;
    unsigned int :5;
    unsigned int :3;
};

struct _GEOPolygonSelectionKey {
    unsigned int :6;
    unsigned int :25;
    unsigned int :25;
    unsigned int :64;
};

struct _GEORegionalResourceKey {
    unsigned int :32;
    unsigned int :8;
    unsigned int :6;
    unsigned int :8;
    unsigned int :8;
    unsigned int :1;
    unsigned int :57;
};

struct _GEOS2TileKey {
    unsigned int :6;
    unsigned int :26;
    unsigned int :26;
    unsigned int :3;
    unsigned int :14;
    unsigned int :4;
    unsigned int :4;
    unsigned int :37;
};

struct _GEOSputnikMetadataKey {
    unsigned int :32;
    unsigned int :24;
    unsigned int :14;
    unsigned int :8;
    unsigned int :42;
};

struct _GEOStandardTileKey {
    unsigned int :40;
    unsigned int :6;
    unsigned int :26;
    unsigned int :26;
    unsigned int :14;
    unsigned int :4;
    unsigned int :4;
};

struct _GEOTileKey {
    unsigned int :7;
    unsigned int :1;
    union {
        struct _GEOStandardTileKey _field1;
        struct _GEOGloriaQuadIDTileKey _field2;
        struct _GEORegionalResourceKey _field3;
        struct _GEOSputnikMetadataKey _field4;
        struct _GEOFlyoverKey _field5;
        struct _GEOTransitLineSelectionKey _field6;
        struct _GEOPolygonSelectionKey _field7;
        struct _GEOTileOverlayKey _field8;
        struct _GEOIdentifiedResourceKey _field9;
        struct _GEOMuninMeshKey _field10;
        struct _GEOVisualLocalizationTrackKey _field11;
        struct _GEOVisualLocalizationMetadataKey _field12;
        struct _GEOVisualLocalizationDataKey _field13;
        struct _GEOS2TileKey _field14;
    } _field1;
};

struct _GEOTileOverlayKey {
    unsigned int :6;
    unsigned int :26;
    unsigned int :26;
    unsigned int :8;
    unsigned int :32;
    unsigned int :16;
    unsigned int :6;
};

struct _GEOTransitLineSelectionKey {
    unsigned int :6;
    unsigned int :25;
    unsigned int :25;
    unsigned int :64;
};

struct _GEOVisualLocalizationDataKey {
    unsigned long long _field1;
    unsigned char _field2;
    unsigned int :5;
    unsigned int :21;
    unsigned int :21;
    unsigned int :1;
};

struct _GEOVisualLocalizationMetadataKey {
    unsigned int :6;
    unsigned int :9;
    unsigned int :25;
    unsigned int :6;
    unsigned int :26;
    unsigned int :26;
    unsigned int :22;
};

struct _GEOVisualLocalizationTrackKey {
    unsigned short _field1;
    unsigned char _field2;
    unsigned int :16;
    unsigned int :6;
    unsigned int :26;
    unsigned int :26;
    unsigned int :22;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct _RunLoopCallbacker;

struct __rep {
    union {
        struct __long {
            unsigned long long __cap_;
            unsigned long long __size_;
            char *__data_;
        } __l;
        struct __short {
            union {
                unsigned char __size_;
                char __lx;
            } ;
            char __data_[23];
        } __s;
        struct __raw {
            unsigned long long __words[3];
        } __r;
    } ;
};

struct __shared_weak_count;

struct __tree_end_node<std::__tree_node_base<void *>*> {
    void *__left_;
};

struct _release_objc_arc;

struct _retain_objc_arc;

struct _retain_ptr<VKCamera *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_vptr$_retain_ptr;
    VKCamera *_obj;
    struct _retain_objc_arc _retain;
    struct _release_objc_arc _release;
};

struct _retain_ptr<VKLabelNavRoadLabel *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct _retain_objc_arc _field3;
    struct _release_objc_arc _field4;
};

struct _retain_ptr<VKManifestTileGroupObserverProxy *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_vptr$_retain_ptr;
    VKManifestTileGroupObserverProxy *_obj;
    struct _retain_objc_arc _retain;
    struct _release_objc_arc _release;
};

struct _retain_ptr<VKPolylineOverlay *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_vptr$_retain_ptr;
    VKPolylineOverlay *_obj;
    struct _retain_objc_arc _retain;
    struct _release_objc_arc _release;
};

struct _retain_ptr<VKResourceManager *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_vptr$_retain_ptr;
    VKResourceManager *_obj;
    struct _retain_objc_arc _retain;
    struct _release_objc_arc _release;
};

struct _retain_ptr<VKTimedAnimation *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_vptr$_retain_ptr;
    VKTimedAnimation *_obj;
    struct _retain_objc_arc _retain;
    struct _release_objc_arc _release;
};

struct array<double, 60UL> {
    double __elems_[60];
};

struct array<geo::Color<double, 4, geo::ColorSpace::Linear>, 2UL> {
    struct Color<double, 4, geo::ColorSpace::Linear> __elems_[2];
};

struct array<std::shared_ptr<ggl::RenderBuffer>, 3UL> {
    struct shared_ptr<ggl::RenderBuffer> __elems_[3];
};

struct array<std::vector<std::vector<FeatureRange>>, 16UL> {
    struct vector<std::vector<FeatureRange>, std::allocator<std::vector<FeatureRange>>> __elems_[16];
};

struct basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>> {
    struct __compressed_pair<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>::__rep, geo::StdAllocator<char, mdm::Allocator>> {
        struct __rep __value_;
        struct StdAllocator<char, mdm::Allocator> __value_;
    } __r_;
};

struct basic_string<char, std::char_traits<char>, std::allocator<char>> {
    struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> {
        struct __rep __value_;
    } __r_;
};

struct deque<std::function<void ()>, std::allocator<std::function<void ()>>> {
    struct __split_buffer<std::function<void ()>*, std::allocator<std::function<void ()>*>> {
        void **__first_;
        void **__begin_;
        void **__end_;
        struct __compressed_pair<std::function<void ()>**, std::allocator<std::function<void ()>*>> {
            void **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::allocator<std::function<void ()>>> {
        unsigned long long __value_;
    } __size_;
};

struct fast_shared_ptr<md::RouteLineSection, mdm::MDAllocator> {
    struct _fast_shared_ptr_control *_control;
};

struct function<NSString *()> {
    struct __value_func<NSString *()> {
        struct type __buf_;
        void *__f_;
    } __f_;
};

struct function<bool (unsigned long long)> {
    struct __value_func<bool (unsigned long long)> {
        struct type _field1;
        void *_field2;
    } _field1;
};

struct function<void ()> {
    struct __value_func<void ()> {
        struct type __buf_;
        void *__f_;
    } __f_;
};

struct function<void (GEOExperimentConfiguration *)> {
    struct __value_func<void (GEOExperimentConfiguration *)> {
        struct type __buf_;
        void *__f_;
    } __f_;
};

struct function<void (GEOResourceManifestManager *)> {
    struct __value_func<void (GEOResourceManifestManager *)> {
        struct type __buf_;
        void *__f_;
    } __f_;
};

struct function<void (GEOResourceManifestManager *, GEOActiveTileGroup *, GEOActiveTileGroup *)> {
    struct __value_func<void (GEOResourceManifestManager *, GEOActiveTileGroup *, GEOActiveTileGroup *)> {
        struct type __buf_;
        void *__f_;
    } __f_;
};

struct function<void (double)> {
    struct __value_func<void (double)> {
        struct type __buf_;
        void *__f_;
    } __f_;
};

struct map<geo::_retain_ptr<NSString *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>, std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>, NSStringMapComparison, geo::StdAllocator<std::pair<const geo::_retain_ptr<NSString *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>, std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>, mdm::Allocator>> {
    struct __tree<std::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>, std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>, std::__map_value_compare<geo::_retain_ptr<NSString *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>, std::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>, std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>, NSStringMapComparison, true>, geo::StdAllocator<std::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>, std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>, mdm::Allocator>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, geo::StdAllocator<std::__tree_node<std::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>, std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>, void *>, mdm::Allocator>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
            struct StdAllocator<std::__tree_node<std::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>, std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>, void *>, mdm::Allocator> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<geo::_retain_ptr<NSString *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>, std::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>, std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>, NSStringMapComparison, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>, std::weak_ptr<altitude::RouteLineData>, std::less<geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>>, std::allocator<std::pair<const geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>, std::weak_ptr<altitude::RouteLineData>>>> {
    struct __tree<std::__value_type<geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>, std::weak_ptr<altitude::RouteLineData>>, std::__map_value_compare<geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>, std::__value_type<geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>, std::weak_ptr<altitude::RouteLineData>>, std::less<geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>>, true>, std::allocator<std::__value_type<geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>, std::weak_ptr<altitude::RouteLineData>>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>, std::weak_ptr<altitude::RouteLineData>>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>, std::__value_type<geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>, std::weak_ptr<altitude::RouteLineData>>, std::less<geo::_retain_ptr<VKPolylineOverlay *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<gm::Range<geo::Unit<geo::RadianUnitDescription, float>>, md::OrientationAction, geo::range_map<geo::Unit<geo::RadianUnitDescription, float>, md::OrientationAction>::RangeCompare, std::allocator<std::pair<const gm::Range<geo::Unit<geo::RadianUnitDescription, float>>, md::OrientationAction>>> {
    struct __tree<std::__value_type<gm::Range<geo::Unit<geo::RadianUnitDescription, float>>, md::OrientationAction>, std::__map_value_compare<gm::Range<geo::Unit<geo::RadianUnitDescription, float>>, std::__value_type<gm::Range<geo::Unit<geo::RadianUnitDescription, float>>, md::OrientationAction>, geo::range_map<geo::Unit<geo::RadianUnitDescription, float>, md::OrientationAction>::RangeCompare, true>, std::allocator<std::__value_type<gm::Range<geo::Unit<geo::RadianUnitDescription, float>>, md::OrientationAction>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<gm::Range<geo::Unit<geo::RadianUnitDescription, float>>, md::OrientationAction>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<gm::Range<geo::Unit<geo::RadianUnitDescription, float>>, std::__value_type<gm::Range<geo::Unit<geo::RadianUnitDescription, float>>, md::OrientationAction>, geo::range_map<geo::Unit<geo::RadianUnitDescription, float>, md::OrientationAction>::RangeCompare, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<md::Anchor *, float, std::less<md::Anchor *>, std::allocator<std::pair<md::Anchor *const, float>>> {
    struct __tree<std::__value_type<md::Anchor *, float>, std::__map_value_compare<md::Anchor *, std::__value_type<md::Anchor *, float>, std::less<md::Anchor *>, true>, std::allocator<std::__value_type<md::Anchor *, float>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<md::Anchor *, float>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<md::Anchor *, std::__value_type<md::Anchor *, float>, std::less<md::Anchor *>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct mutex {
    struct _opaque_pthread_mutex_t {
        long long __sig;
        char __opaque[56];
    } __m_;
};

struct optional<(anonymous namespace)::PointSegment> {
    _Bool _hasValue;
    union ValueUnion {
        unsigned char data[3984];
        struct PointSegment {
            struct PointView {
                struct CollectionPoint _point;
                struct vector<std::pair<md::mun::ViewId, unsigned int>, std::allocator<std::pair<md::mun::ViewId, unsigned int>>> {
                    void *__begin_;
                    void *__end_;
                    struct __compressed_pair<std::pair<md::mun::ViewId, unsigned int>*, std::allocator<std::pair<md::mun::ViewId, unsigned int>>> {
                        void *__value_;
                    } __end_cap_;
                } _requiredViews;
                struct vector<std::pair<md::mun::ViewId, unsigned int>, std::allocator<std::pair<md::mun::ViewId, unsigned int>>> {
                    void *__begin_;
                    void *__end_;
                    struct __compressed_pair<std::pair<md::mun::ViewId, unsigned int>*, std::allocator<std::pair<md::mun::ViewId, unsigned int>>> {
                        void *__value_;
                    } __end_cap_;
                } _optionalViews;
                struct small_vector<md::mun::PointView::CameraLod, 6UL> {
                    struct CameraLod *_begin;
                    struct CameraLod *_end;
                    struct CameraLod *_fixedStorage;
                    unsigned long long _capacity;
                    struct type storage[6];
                } _cameras;
            } _startPoint;
            struct PointView {
                struct CollectionPoint _point;
                struct vector<std::pair<md::mun::ViewId, unsigned int>, std::allocator<std::pair<md::mun::ViewId, unsigned int>>> {
                    void *__begin_;
                    void *__end_;
                    struct __compressed_pair<std::pair<md::mun::ViewId, unsigned int>*, std::allocator<std::pair<md::mun::ViewId, unsigned int>>> {
                        void *__value_;
                    } __end_cap_;
                } _requiredViews;
                struct vector<std::pair<md::mun::ViewId, unsigned int>, std::allocator<std::pair<md::mun::ViewId, unsigned int>>> {
                    void *__begin_;
                    void *__end_;
                    struct __compressed_pair<std::pair<md::mun::ViewId, unsigned int>*, std::allocator<std::pair<md::mun::ViewId, unsigned int>>> {
                        void *__value_;
                    } __end_cap_;
                } _optionalViews;
                struct small_vector<md::mun::PointView::CameraLod, 6UL> {
                    struct CameraLod *_begin;
                    struct CameraLod *_end;
                    struct CameraLod *_fixedStorage;
                    unsigned long long _capacity;
                    struct type storage[6];
                } _cameras;
            } _endPoint;
        } type;
    } _value;
};

struct optional<VKRouteLineSnapResult> {
    union {
        char _field1;
        struct VKRouteLineSnapResult _field2;
    } _field1;
    _Bool _field2;
};

struct optional<float> {
    _Bool _hasValue;
    union ValueUnion {
        unsigned char data[4];
        float type;
    } _value;
};

struct optional<gm::Matrix<double, 3, 1>> {
    _Bool _hasValue;
    union ValueUnion {
        unsigned char data[24];
        Matrix_6e1d3589 type;
    } _value;
};

struct optional<gss::LineType> {
    _Bool _hasValue;
    ValueUnion_42b55164 _value;
};

struct optional<gss::RouteLegWhen> {
    _Bool _hasValue;
    ValueUnion_42b55164 _value;
};

struct optional<gss::When> {
    union {
        char __null_state_;
        unsigned char __val_;
    } ;
    _Bool __engaged_;
};

struct optional<md::MeshSet<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh, ggl::BuildingFlatStroke::DefaultVbo>> {
    _Bool _hasValue;
    union ValueUnion {
        unsigned char data[184];
        struct MeshSet<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh, ggl::BuildingFlatStroke::DefaultVbo> type;
    } _value;
};

struct optional<md::MeshSet<ggl::PolygonBase::CompressedMeshMesh, ggl::PolygonBase::CompressedVbo>> {
    _Bool _hasValue;
    union ValueUnion {
        unsigned char data[184];
        struct MeshSet<ggl::PolygonBase::CompressedMeshMesh, ggl::PolygonBase::CompressedVbo> type;
    } _value;
};

struct optional<md::MeshSet<ggl::PolygonCommonStroke::MeshMesh, ggl::PolygonCommonStroke::DefaultVbo>> {
    _Bool _hasValue;
    union ValueUnion {
        unsigned char data[184];
        struct MeshSet<ggl::PolygonCommonStroke::MeshMesh, ggl::PolygonCommonStroke::DefaultVbo> type;
    } _value;
};

struct optional<md::MeshSet<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh, ggl::Venue3DStroke::HorizontalDefaultVbo>> {
    _Bool _hasValue;
    union ValueUnion {
        unsigned char data[184];
        struct MeshSet<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh, ggl::Venue3DStroke::HorizontalDefaultVbo> type;
    } _value;
};

struct optional<md::MeshSet<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh, ggl::Venue3DStroke::VerticalDefaultVbo>> {
    _Bool _hasValue;
    union ValueUnion {
        unsigned char data[184];
        struct MeshSet<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh, ggl::Venue3DStroke::VerticalDefaultVbo> type;
    } _value;
};

struct optional<md::MeshSet<ggl::VenueWall::EndCapMesh, ggl::VenueWall::EndCapVbo>> {
    _Bool _hasValue;
    union ValueUnion {
        unsigned char data[184];
        struct MeshSet<ggl::VenueWall::EndCapMesh, ggl::VenueWall::EndCapVbo> type;
    } _value;
};

struct optional<md::MeshSet<ggl::VenueWall::MeshMesh, ggl::VenueWall::DefaultVbo>> {
    _Bool _hasValue;
    union ValueUnion {
        unsigned char data[184];
        struct MeshSet<ggl::VenueWall::MeshMesh, ggl::VenueWall::DefaultVbo> type;
    } _value;
};

struct optional<md::RoadSignOrientationResolver> {
    _Bool _field1;
    union ValueUnion {
        unsigned char _field1[24];
        struct RoadSignOrientationResolver _field2;
    } _field2;
};

struct optional<md::mun::CollectionPoint> {
    _Bool _field1;
    union ValueUnion {
        unsigned char _field1[1864];
        struct CollectionPoint _field2;
    } _field2;
};

struct optional<std::pair<geo::Mercator3<double>, geo::Mercator3<double>>> {
    union {
        char __null_state_;
        struct pair<geo::Mercator3<double>, geo::Mercator3<double>> __val_;
    } ;
    _Bool __engaged_;
};

struct optional<unsigned long> {
    _Bool _hasValue;
    union ValueUnion {
        unsigned char data[8];
        unsigned long long type;
    } _value;
};

struct os_state_data_decoder_s {
    char _field1[64];
    char _field2[64];
};

struct os_state_data_s {
    unsigned int _field1;
    union {
        unsigned int :32;
        unsigned int _field1;
    } _field2;
    struct os_state_data_decoder_s _field3;
    char _field4[64];
    unsigned char _field5[0];
};

struct pair<const void *, unsigned long> {
    void *_field1;
    unsigned long long _field2;
};

struct pair<geo::Mercator3<double>, geo::Mercator3<double>> {
    Mercator3_d8bb135c first;
    Mercator3_d8bb135c second;
};

struct range_map<geo::Unit<geo::RadianUnitDescription, float>, md::OrientationAction, std::less<geo::Unit<geo::RadianUnitDescription, float>>, std::allocator<std::pair<const gm::Range<geo::Unit<geo::RadianUnitDescription, float>>, md::OrientationAction>>> {
    struct map<gm::Range<geo::Unit<geo::RadianUnitDescription, float>>, md::OrientationAction, geo::range_map<geo::Unit<geo::RadianUnitDescription, float>, md::OrientationAction>::RangeCompare, std::allocator<std::pair<const gm::Range<geo::Unit<geo::RadianUnitDescription, float>>, md::OrientationAction>>> _storage;
};

struct read_write_lock {
    struct _opaque_pthread_rwlock_t {
        long long __sig;
        char __opaque[192];
    } _lock;
};

struct set<VKPolylineGroupOverlay *, std::less<VKPolylineGroupOverlay *>, std::allocator<VKPolylineGroupOverlay *>> {
    struct __tree<VKPolylineGroupOverlay *, std::less<VKPolylineGroupOverlay *>, std::allocator<VKPolylineGroupOverlay *>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<VKPolylineGroupOverlay *, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::less<VKPolylineGroupOverlay *>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct set<__unsafe_unretained id<VKRouteOverlay>, std::less<__unsafe_unretained id<VKRouteOverlay>>, std::allocator<__unsafe_unretained id<VKRouteOverlay>>> {
    struct __tree<__unsafe_unretained id<VKRouteOverlay>, std::less<__unsafe_unretained id<VKRouteOverlay>>, std::allocator<__unsafe_unretained id<VKRouteOverlay>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<__unsafe_unretained id<VKRouteOverlay>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::less<__unsafe_unretained id<VKRouteOverlay>>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct set<gm::Box<double, 2>, md::MultiRectSetCompare, std::allocator<gm::Box<double, 2>>> {
    struct __tree<gm::Box<double, 2>, md::MultiRectSetCompare, std::allocator<gm::Box<double, 2>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<gm::Box<double, 2>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, md::MultiRectSetCompare> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct set<id<VKRouteOverlay>, std::less<id<VKRouteOverlay>>, std::allocator<id<VKRouteOverlay>>> {
    struct __tree<id<VKRouteOverlay>, std::less<id<VKRouteOverlay>>, std::allocator<id<VKRouteOverlay>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<id<VKRouteOverlay>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::less<id<VKRouteOverlay>>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct set<std::shared_ptr<FeatureStyleAttributes>, FeatureStyleAttributesSet::FeatureStyleAttributesCompare, std::allocator<std::shared_ptr<FeatureStyleAttributes>>> {
    struct __tree<std::shared_ptr<FeatureStyleAttributes>, FeatureStyleAttributesSet::FeatureStyleAttributesCompare, std::allocator<std::shared_ptr<FeatureStyleAttributes>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::shared_ptr<FeatureStyleAttributes>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, FeatureStyleAttributesSet::FeatureStyleAttributesCompare> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct set<std::shared_ptr<md::RouteLineData>, std::less<std::shared_ptr<md::RouteLineData>>, std::allocator<std::shared_ptr<md::RouteLineData>>> {
    struct __tree<std::shared_ptr<md::RouteLineData>, std::less<std::shared_ptr<md::RouteLineData>>, std::allocator<std::shared_ptr<md::RouteLineData>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::shared_ptr<md::RouteLineData>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::less<std::shared_ptr<md::RouteLineData>>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct shared_ptr<(anonymous namespace)::PathAnimator> {
    struct PathAnimator *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<altitude::GeoServicesLoadJob> {
    struct GeoServicesLoadJob *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<bool> {
    _Bool *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<gdc::Camera> {
    struct Camera *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<geo::Task> {
    struct Task *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::BitmapDataBase> {
    struct BitmapDataBase *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::Device> {
    struct Device *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::FlyoverLibrary> {
    struct FlyoverLibrary *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::MetalDevice> {
    struct MetalDevice *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::OESDevice> {
    struct OESDevice *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::RenderBuffer> {
    struct RenderBuffer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::SamplerState> {
    struct SamplerState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::StandardLibrary> {
    struct StandardLibrary *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::Texture2D> {
    struct Texture2D *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::Texture2DAbstract> {
    struct Texture2DAbstract *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::Texture> {
    struct Texture *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<grl::FontManager> {
    struct FontManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<grl::IconManager> {
    struct IconManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<gss::StylesheetManager<gss::PropertyID>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> {
    void *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<gss::StylesheetQuery<gss::PropertyID>> {
    void *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<gss::StylesheetQuery<gss::ScenePropertyID>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::DataOverrideManager> {
    struct DataOverrideManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::GeoResourceProvider> {
    struct GeoResourceProvider *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::GlobeOverlayContainer> {
    struct GlobeOverlayContainer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::LabelFeatureMarker> {
    struct LabelFeatureMarker *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::LabelIcon> {
    struct LabelIcon *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::LabelTile> {
    struct LabelTile *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::MaterialTextureManager> {
    struct MaterialTextureManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::MeshSetStorage> {
    struct MeshSetStorage *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::MeshSetStorageClient> {
    struct MeshSetStorageClient *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::NavCurrentRoadSign> {
    struct NavCurrentRoadSign *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::NavLabel> {
    struct NavLabel *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::OverlayContainer> {
    struct OverlayContainer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::RealisticCommandBufferSelector> {
    struct RealisticCommandBufferSelector *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::StandardCommandBufferSelector> {
    struct StandardCommandBufferSelector *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::StylesheetVendor> {
    struct StylesheetVendor *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::TaskContext> {
    struct TaskContext *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::TextureManager> {
    struct TextureManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct small_vector<md::mun::PhotoInfo, 6UL> {
    struct PhotoInfo *_begin;
    struct PhotoInfo *_end;
    struct PhotoInfo *_fixedStorage;
    unsigned long long _capacity;
    struct type storage[6];
};

struct type {
    unsigned char __lx[32];
};

struct unique_ptr<(anonymous namespace)::BumpAnimator, std::default_delete<(anonymous namespace)::BumpAnimator>> {
    struct __compressed_pair<(anonymous namespace)::BumpAnimator *, std::default_delete<(anonymous namespace)::BumpAnimator>> {
        struct BumpAnimator *__value_;
    } __ptr_;
};

struct unique_ptr<(anonymous namespace)::PathAnimationDescription, std::default_delete<(anonymous namespace)::PathAnimationDescription>> {
    struct __compressed_pair<(anonymous namespace)::PathAnimationDescription *, std::default_delete<(anonymous namespace)::PathAnimationDescription>> {
        struct PathAnimationDescription *__value_;
    } __ptr_;
};

struct unique_ptr<(anonymous namespace)::PendingPathAnimation, std::default_delete<(anonymous namespace)::PendingPathAnimation>> {
    struct __compressed_pair<(anonymous namespace)::PendingPathAnimation *, std::default_delete<(anonymous namespace)::PendingPathAnimation>> {
        struct PendingPathAnimation *__value_;
    } __ptr_;
};

struct unique_ptr<(anonymous namespace)::YFlipPass, std::default_delete<(anonymous namespace)::YFlipPass>> {
    struct __compressed_pair<(anonymous namespace)::YFlipPass *, std::default_delete<(anonymous namespace)::YFlipPass>> {
        struct YFlipPass *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::AlphaAtlas, std::default_delete<ggl::AlphaAtlas>> {
    struct __compressed_pair<ggl::AlphaAtlas *, std::default_delete<ggl::AlphaAtlas>> {
        struct AlphaAtlas *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::DistanceAtlas, std::default_delete<ggl::DistanceAtlas>> {
    struct __compressed_pair<ggl::DistanceAtlas *, std::default_delete<ggl::DistanceAtlas>> {
        struct DistanceAtlas *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::IOSurfaceTexture, std::default_delete<ggl::IOSurfaceTexture>> {
    struct __compressed_pair<ggl::IOSurfaceTexture *, std::default_delete<ggl::IOSurfaceTexture>> {
        struct IOSurfaceTexture *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::IsoAlphaAtlas, std::default_delete<ggl::IsoAlphaAtlas>> {
    struct __compressed_pair<ggl::IsoAlphaAtlas *, std::default_delete<ggl::IsoAlphaAtlas>> {
        struct IsoAlphaAtlas *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh>, std::default_delete<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh>>> {
    struct __compressed_pair<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh>*, std::default_delete<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh>>> {
        void *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>, std::default_delete<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>>> {
    struct __compressed_pair<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>*, std::default_delete<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>>> {
        void *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>, std::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>>> {
    struct __compressed_pair<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>*, std::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>>> {
        void *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::OESContext, std::default_delete<ggl::OESContext>> {
    struct __compressed_pair<ggl::OESContext *, std::default_delete<ggl::OESContext>> {
        struct OESContext *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::RenderBuffer, std::default_delete<ggl::RenderBuffer>> {
    struct __compressed_pair<ggl::RenderBuffer *, std::default_delete<ggl::RenderBuffer>> {
        struct RenderBuffer *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::RenderTarget, std::default_delete<ggl::RenderTarget>> {
    struct __compressed_pair<ggl::RenderTarget *, std::default_delete<ggl::RenderTarget>> {
        struct RenderTarget *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::Renderer, std::default_delete<ggl::Renderer>> {
    struct __compressed_pair<ggl::Renderer *, std::default_delete<ggl::Renderer>> {
        struct Renderer *__value_;
    } __ptr_;
};

struct unique_ptr<md::DebugConsoleManager, std::default_delete<md::DebugConsoleManager>> {
    struct __compressed_pair<md::DebugConsoleManager *, std::default_delete<md::DebugConsoleManager>> {
        struct DebugConsoleManager *__value_;
    } __ptr_;
};

struct unique_ptr<md::Device, std::default_delete<md::Device>> {
    struct __compressed_pair<md::Device *, std::default_delete<md::Device>> {
        struct Device *__value_;
    } __ptr_;
};

struct unique_ptr<md::GlobeAdapter, std::default_delete<md::GlobeAdapter>> {
    struct __compressed_pair<md::GlobeAdapter *, std::default_delete<md::GlobeAdapter>> {
        struct GlobeAdapter *__value_;
    } __ptr_;
};

struct unique_ptr<md::MeshSetStorage, std::default_delete<md::MeshSetStorage>> {
    struct __compressed_pair<md::MeshSetStorage *, std::default_delete<md::MeshSetStorage>> {
        struct MeshSetStorage *__value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_GEOTileKey, std::shared_ptr<altitude::GeoServicesLoadJob>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_GEOTileKey, std::shared_ptr<altitude::GeoServicesLoadJob>>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_GEOTileKey, std::shared_ptr<altitude::GeoServicesLoadJob>>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_GEOTileKey, std::shared_ptr<altitude::GeoServicesLoadJob>>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_GEOTileKey, std::shared_ptr<altitude::GeoServicesLoadJob>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_GEOTileKey, std::shared_ptr<altitude::GeoServicesLoadJob>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<gdc::LayerDataRequestKey, std::shared_ptr<gdc::LayerData>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<gdc::LayerDataRequestKey, std::shared_ptr<gdc::LayerData>>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<gdc::LayerDataRequestKey, std::shared_ptr<gdc::LayerData>>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<gdc::LayerDataRequestKey, std::shared_ptr<gdc::LayerData>>, void *>*>*>>> {
        void **_field1;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<gdc::LayerDataRequestKey, std::shared_ptr<gdc::LayerData>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<gdc::LayerDataRequestKey, std::shared_ptr<gdc::LayerData>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::shared_ptr<NavRoadFeature>>, void *>*>*[], std::__bucket_list_deallocator<geo::StdAllocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::shared_ptr<NavRoadFeature>>, void *>*>*, mdm::Allocator>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::shared_ptr<NavRoadFeature>>, void *>*>**, std::__bucket_list_deallocator<geo::StdAllocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::shared_ptr<NavRoadFeature>>, void *>*>*, mdm::Allocator>>> {
        void **__value_;
        struct __bucket_list_deallocator<geo::StdAllocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::shared_ptr<NavRoadFeature>>, void *>*>*, mdm::Allocator>> {
            struct __compressed_pair<unsigned long, geo::StdAllocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::shared_ptr<NavRoadFeature>>, void *>*>*, mdm::Allocator>> {
                unsigned long long __value_;
                struct StdAllocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::shared_ptr<NavRoadFeature>>, void *>*>*, mdm::Allocator> __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::shared_ptr<md::LabelTile>, void *>*>*[], std::__bucket_list_deallocator<geo::StdAllocator<std::__hash_node_base<std::__hash_node<std::shared_ptr<md::LabelTile>, void *>*>*, mdm::Allocator>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::shared_ptr<md::LabelTile>, void *>*>**, std::__bucket_list_deallocator<geo::StdAllocator<std::__hash_node_base<std::__hash_node<std::shared_ptr<md::LabelTile>, void *>*>*, mdm::Allocator>>> {
        void **__value_;
        struct __bucket_list_deallocator<geo::StdAllocator<std::__hash_node_base<std::__hash_node<std::shared_ptr<md::LabelTile>, void *>*>*, mdm::Allocator>> {
            struct __compressed_pair<unsigned long, geo::StdAllocator<std::__hash_node_base<std::__hash_node<std::shared_ptr<md::LabelTile>, void *>*>*, mdm::Allocator>> {
                unsigned long long __value_;
                struct StdAllocator<std::__hash_node_base<std::__hash_node<std::shared_ptr<md::LabelTile>, void *>*>*, mdm::Allocator> __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<unsigned long long, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<unsigned long long, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unordered_map<StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>, (anonymous namespace)::StyleQueryOverrideHash, std::equal_to<StyleQueryOverride>, std::allocator<std::pair<const StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>>> {
    struct __hash_table<std::__hash_value_type<StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>, std::__unordered_map_hasher<StyleQueryOverride, std::__hash_value_type<StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>, (anonymous namespace)::StyleQueryOverrideHash, std::equal_to<StyleQueryOverride>, true>, std::__unordered_map_equal<StyleQueryOverride, std::__hash_value_type<StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>, std::equal_to<StyleQueryOverride>, (anonymous namespace)::StyleQueryOverrideHash, true>, std::allocator<std::__hash_value_type<StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<StyleQueryOverride, std::__hash_value_type<StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>, (anonymous namespace)::StyleQueryOverrideHash, std::equal_to<StyleQueryOverride>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<StyleQueryOverride, std::__hash_value_type<StyleQueryOverride, std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>, std::equal_to<StyleQueryOverride>, (anonymous namespace)::StyleQueryOverrideHash, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<_GEOTileKey, std::shared_ptr<altitude::GeoServicesLoadJob>, GEOTileKeyHashFunc, GEOTileKeyEqualsFunc, std::allocator<std::pair<const _GEOTileKey, std::shared_ptr<altitude::GeoServicesLoadJob>>>> {
    struct __hash_table<std::__hash_value_type<_GEOTileKey, std::shared_ptr<altitude::GeoServicesLoadJob>>, std::__unordered_map_hasher<_GEOTileKey, std::__hash_value_type<_GEOTileKey, std::shared_ptr<altitude::GeoServicesLoadJob>>, GEOTileKeyHashFunc, GEOTileKeyEqualsFunc, true>, std::__unordered_map_equal<_GEOTileKey, std::__hash_value_type<_GEOTileKey, std::shared_ptr<altitude::GeoServicesLoadJob>>, GEOTileKeyEqualsFunc, GEOTileKeyHashFunc, true>, std::allocator<std::__hash_value_type<_GEOTileKey, std::shared_ptr<altitude::GeoServicesLoadJob>>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_GEOTileKey, std::shared_ptr<altitude::GeoServicesLoadJob>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_GEOTileKey, std::shared_ptr<altitude::GeoServicesLoadJob>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_GEOTileKey, std::shared_ptr<altitude::GeoServicesLoadJob>>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<_GEOTileKey, std::shared_ptr<altitude::GeoServicesLoadJob>>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<_GEOTileKey, std::shared_ptr<altitude::GeoServicesLoadJob>>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<_GEOTileKey, std::__hash_value_type<_GEOTileKey, std::shared_ptr<altitude::GeoServicesLoadJob>>, GEOTileKeyHashFunc, GEOTileKeyEqualsFunc, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<_GEOTileKey, std::__hash_value_type<_GEOTileKey, std::shared_ptr<altitude::GeoServicesLoadJob>>, GEOTileKeyEqualsFunc, GEOTileKeyHashFunc, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<gdc::LayerDataRequestKey, std::shared_ptr<gdc::LayerData>, gdc::LayerDataRequestKeyHash, std::equal_to<gdc::LayerDataRequestKey>, std::allocator<std::pair<const gdc::LayerDataRequestKey, std::shared_ptr<gdc::LayerData>>>> {
    struct __hash_table<std::__hash_value_type<gdc::LayerDataRequestKey, std::shared_ptr<gdc::LayerData>>, std::__unordered_map_hasher<gdc::LayerDataRequestKey, std::__hash_value_type<gdc::LayerDataRequestKey, std::shared_ptr<gdc::LayerData>>, gdc::LayerDataRequestKeyHash, std::equal_to<gdc::LayerDataRequestKey>, true>, std::__unordered_map_equal<gdc::LayerDataRequestKey, std::__hash_value_type<gdc::LayerDataRequestKey, std::shared_ptr<gdc::LayerData>>, std::equal_to<gdc::LayerDataRequestKey>, gdc::LayerDataRequestKeyHash, true>, std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey, std::shared_ptr<gdc::LayerData>>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<gdc::LayerDataRequestKey, std::shared_ptr<gdc::LayerData>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<gdc::LayerDataRequestKey, std::shared_ptr<gdc::LayerData>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<gdc::LayerDataRequestKey, std::shared_ptr<gdc::LayerData>>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<gdc::LayerDataRequestKey, std::shared_ptr<gdc::LayerData>>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<gdc::LayerDataRequestKey, std::shared_ptr<gdc::LayerData>>, void *>*> {
                void *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<gdc::LayerDataRequestKey, std::__hash_value_type<gdc::LayerDataRequestKey, std::shared_ptr<gdc::LayerData>>, gdc::LayerDataRequestKeyHash, std::equal_to<gdc::LayerDataRequestKey>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__unordered_map_equal<gdc::LayerDataRequestKey, std::__hash_value_type<gdc::LayerDataRequestKey, std::shared_ptr<gdc::LayerData>>, std::equal_to<gdc::LayerDataRequestKey>, gdc::LayerDataRequestKeyHash, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::shared_ptr<NavRoadFeature>, std::hash<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>>, std::equal_to<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>>, geo::StdAllocator<std::pair<const std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::shared_ptr<NavRoadFeature>>, mdm::Allocator>> {
    struct __hash_table<std::__hash_value_type<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::shared_ptr<NavRoadFeature>>, std::__unordered_map_hasher<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__hash_value_type<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::shared_ptr<NavRoadFeature>>, std::hash<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>>, std::equal_to<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>>, true>, std::__unordered_map_equal<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__hash_value_type<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::shared_ptr<NavRoadFeature>>, std::equal_to<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>>, std::hash<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>>, true>, geo::StdAllocator<std::__hash_value_type<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::shared_ptr<NavRoadFeature>>, mdm::Allocator>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::shared_ptr<NavRoadFeature>>, void *>*>*[], std::__bucket_list_deallocator<geo::StdAllocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::shared_ptr<NavRoadFeature>>, void *>*>*, mdm::Allocator>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::shared_ptr<NavRoadFeature>>, void *>*>, geo::StdAllocator<std::__hash_node<std::__hash_value_type<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::shared_ptr<NavRoadFeature>>, void *>, mdm::Allocator>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::shared_ptr<NavRoadFeature>>, void *>*> {
                void *__next_;
            } __value_;
            struct StdAllocator<std::__hash_node<std::__hash_value_type<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::shared_ptr<NavRoadFeature>>, void *>, mdm::Allocator> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__hash_value_type<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::shared_ptr<NavRoadFeature>>, std::hash<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>>, std::equal_to<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::__hash_value_type<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>, std::shared_ptr<NavRoadFeature>>, std::equal_to<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>>, std::hash<std::basic_string<char, std::char_traits<char>, geo::StdAllocator<char, mdm::Allocator>>>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::pair<const void *, unsigned long>, std::vector<md::Edge>, std::hash<md::SectionKey>, std::equal_to<std::pair<const void *, unsigned long>>, std::allocator<std::pair<const std::pair<const void *, unsigned long>, std::vector<md::Edge>>>> {
    struct __hash_table<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, std::__unordered_map_hasher<std::pair<const void *, unsigned long>, std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, std::hash<md::SectionKey>, std::equal_to<std::pair<const void *, unsigned long>>, true>, std::__unordered_map_equal<std::pair<const void *, unsigned long>, std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, std::equal_to<std::pair<const void *, unsigned long>>, std::hash<md::SectionKey>, true>, std::allocator<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::pair<const void *, unsigned long>, std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, std::hash<md::SectionKey>, std::equal_to<std::pair<const void *, unsigned long>>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<std::pair<const void *, unsigned long>, std::__hash_value_type<std::pair<const void *, unsigned long>, std::vector<md::Edge>>, std::equal_to<std::pair<const void *, unsigned long>>, std::hash<md::SectionKey>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_set<std::shared_ptr<md::LabelTile>, std::hash<std::shared_ptr<md::LabelTile>>, std::equal_to<std::shared_ptr<md::LabelTile>>, geo::StdAllocator<std::shared_ptr<md::LabelTile>, mdm::Allocator>> {
    struct __hash_table<std::shared_ptr<md::LabelTile>, std::hash<std::shared_ptr<md::LabelTile>>, std::equal_to<std::shared_ptr<md::LabelTile>>, geo::StdAllocator<std::shared_ptr<md::LabelTile>, mdm::Allocator>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::shared_ptr<md::LabelTile>, void *>*>*[], std::__bucket_list_deallocator<geo::StdAllocator<std::__hash_node_base<std::__hash_node<std::shared_ptr<md::LabelTile>, void *>*>*, mdm::Allocator>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::shared_ptr<md::LabelTile>, void *>*>, geo::StdAllocator<std::__hash_node<std::shared_ptr<md::LabelTile>, void *>, mdm::Allocator>> {
            struct __hash_node_base<std::__hash_node<std::shared_ptr<md::LabelTile>, void *>*> {
                void *__next_;
            } __value_;
            struct StdAllocator<std::__hash_node<std::shared_ptr<md::LabelTile>, void *>, mdm::Allocator> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::hash<std::shared_ptr<md::LabelTile>>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::equal_to<std::shared_ptr<md::LabelTile>>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_set<unsigned long long, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<unsigned long long>> {
    struct __hash_table<unsigned long long, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<unsigned long long>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<unsigned long long, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<unsigned long long, void *>*>, std::allocator<std::__hash_node<unsigned long long, void *>>> {
            struct __hash_node_base<std::__hash_node<unsigned long long, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::hash<unsigned long long>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::equal_to<unsigned long long>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct vector<GeoCodecsFeatureStylePair, geo::StdAllocator<GeoCodecsFeatureStylePair, mdm::Allocator>> {
    struct GeoCodecsFeatureStylePair *_field1;
    struct GeoCodecsFeatureStylePair *_field2;
    struct __compressed_pair<GeoCodecsFeatureStylePair *, geo::StdAllocator<GeoCodecsFeatureStylePair, mdm::Allocator>> {
        struct GeoCodecsFeatureStylePair *_field1;
        struct StdAllocator<GeoCodecsFeatureStylePair, mdm::Allocator> _field2;
    } _field3;
};

struct vector<LabelNavJunctionInfo, geo::StdAllocator<LabelNavJunctionInfo, mdm::Allocator>> {
    struct LabelNavJunctionInfo *__begin_;
    struct LabelNavJunctionInfo *__end_;
    struct __compressed_pair<LabelNavJunctionInfo *, geo::StdAllocator<LabelNavJunctionInfo, mdm::Allocator>> {
        struct LabelNavJunctionInfo *__value_;
        struct StdAllocator<LabelNavJunctionInfo, mdm::Allocator> __value_;
    } __end_cap_;
};

struct vector<NavCameraPixelFrameRate, std::allocator<NavCameraPixelFrameRate>> {
    struct NavCameraPixelFrameRate *__begin_;
    struct NavCameraPixelFrameRate *__end_;
    struct __compressed_pair<NavCameraPixelFrameRate *, std::allocator<NavCameraPixelFrameRate>> {
        struct NavCameraPixelFrameRate *__value_;
    } __end_cap_;
};

struct vector<RouteSegment, geo::StdAllocator<RouteSegment, mdm::Allocator>> {
    struct RouteSegment *__begin_;
    struct RouteSegment *__end_;
    struct __compressed_pair<RouteSegment *, geo::StdAllocator<RouteSegment, mdm::Allocator>> {
        struct RouteSegment *__value_;
        struct StdAllocator<RouteSegment, mdm::Allocator> __value_;
    } __end_cap_;
};

struct vector<double, std::allocator<double>> {
    double *__begin_;
    double *__end_;
    struct __compressed_pair<double *, std::allocator<double>> {
        double *__value_;
    } __end_cap_;
};

struct vector<float, geo::StdAllocator<float, mdm::Allocator>> {
    float *__begin_;
    float *__end_;
    struct __compressed_pair<float *, geo::StdAllocator<float, mdm::Allocator>> {
        float *__value_;
        struct StdAllocator<float, mdm::Allocator> __value_;
    } __end_cap_;
};

struct vector<float, std::allocator<float>> {
    float *__begin_;
    float *__end_;
    struct __compressed_pair<float *, std::allocator<float>> {
        float *__value_;
    } __end_cap_;
};

struct vector<geo::Coordinate2D<geo::Radians, double>, std::allocator<geo::Coordinate2D<geo::Radians, double>>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<geo::Coordinate2D<geo::Radians, double>*, std::allocator<geo::Coordinate2D<geo::Radians, double>>> {
        void *_field1;
    } _field3;
};

struct vector<geo::Coordinate3D<geo::Radians, double>, std::allocator<geo::Coordinate3D<geo::Radians, double>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<geo::Coordinate3D<geo::Radians, double>*, std::allocator<geo::Coordinate3D<geo::Radians, double>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<geo::PolylineCoordinate, std::allocator<geo::PolylineCoordinate>> {
    struct PolylineCoordinate *__begin_;
    struct PolylineCoordinate *__end_;
    struct __compressed_pair<geo::PolylineCoordinate *, std::allocator<geo::PolylineCoordinate>> {
        struct PolylineCoordinate *__value_;
    } __end_cap_;
};

struct vector<geo::_retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>, std::allocator<geo::_retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<geo::_retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>*, std::allocator<geo::_retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>, geo::StdAllocator<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>, mdm::Allocator>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>*, geo::StdAllocator<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>, mdm::Allocator>> {
        void *__value_;
        struct StdAllocator<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc>, mdm::Allocator> __value_;
    } __end_cap_;
};

struct vector<geo::fast_shared_ptr<md::RouteLineSection, mdm::MDAllocator>, std::allocator<geo::fast_shared_ptr<md::RouteLineSection, mdm::MDAllocator>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<geo::fast_shared_ptr<md::RouteLineSection, mdm::MDAllocator>*, std::allocator<geo::fast_shared_ptr<md::RouteLineSection, mdm::MDAllocator>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<ggl::Batcher, std::allocator<ggl::Batcher>> {
    struct Batcher *__begin_;
    struct Batcher *__end_;
    struct __compressed_pair<ggl::Batcher *, std::allocator<ggl::Batcher>> {
        struct Batcher *__value_;
    } __end_cap_;
};

struct vector<gm::Matrix<double, 2, 1>, geo::StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<gm::Matrix<double, 2, 1>*, geo::StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator>> {
        void *__value_;
        struct StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator> __value_;
    } __end_cap_;
};

struct vector<gm::Matrix<float, 2, 1>, std::allocator<gm::Matrix<float, 2, 1>>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<gm::Matrix<float, 2, 1>*, std::allocator<gm::Matrix<float, 2, 1>>> {
        void *_field1;
    } _field3;
};

struct vector<gm::Matrix<float, 3, 1>, std::allocator<gm::Matrix<float, 3, 1>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<gm::Matrix<float, 3, 1>*, std::allocator<gm::Matrix<float, 3, 1>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<gss::FeatureAttributePair, geo::StdAllocator<gss::FeatureAttributePair, gss::Allocator>> {
    struct FeatureAttributePair *_field1;
    struct FeatureAttributePair *_field2;
    struct __compressed_pair<gss::FeatureAttributePair *, geo::StdAllocator<gss::FeatureAttributePair, gss::Allocator>> {
        struct FeatureAttributePair *_field1;
        struct StdAllocator<gss::FeatureAttributePair, gss::Allocator> _field2;
    } _field3;
};

struct vector<md::AvoidanceRectWithPriority, geo::StdAllocator<md::AvoidanceRectWithPriority, mdm::Allocator>> {
    struct AvoidanceRectWithPriority *__begin_;
    struct AvoidanceRectWithPriority *__end_;
    struct __compressed_pair<md::AvoidanceRectWithPriority *, geo::StdAllocator<md::AvoidanceRectWithPriority, mdm::Allocator>> {
        struct AvoidanceRectWithPriority *__value_;
        struct StdAllocator<md::AvoidanceRectWithPriority, mdm::Allocator> __value_;
    } __end_cap_;
};

struct vector<md::GradientTraffic, std::allocator<md::GradientTraffic>> {
    struct GradientTraffic *__begin_;
    struct GradientTraffic *__end_;
    struct __compressed_pair<md::GradientTraffic *, std::allocator<md::GradientTraffic>> {
        struct GradientTraffic *__value_;
    } __end_cap_;
};

struct vector<md::LabelPoint, geo::StdAllocator<md::LabelPoint, mdm::Allocator>> {
    struct LabelPoint *__begin_;
    struct LabelPoint *__end_;
    struct __compressed_pair<md::LabelPoint *, geo::StdAllocator<md::LabelPoint, mdm::Allocator>> {
        struct LabelPoint *__value_;
        struct StdAllocator<md::LabelPoint, mdm::Allocator> __value_;
    } __end_cap_;
};

struct vector<md::ManeuverArrowInfo, std::allocator<md::ManeuverArrowInfo>> {
    struct ManeuverArrowInfo *__begin_;
    struct ManeuverArrowInfo *__end_;
    struct __compressed_pair<md::ManeuverArrowInfo *, std::allocator<md::ManeuverArrowInfo>> {
        struct ManeuverArrowInfo *__value_;
    } __end_cap_;
};

struct vector<md::mun::CollectionPoint, std::allocator<md::mun::CollectionPoint>> {
    struct CollectionPoint *_field1;
    struct CollectionPoint *_field2;
    struct __compressed_pair<md::mun::CollectionPoint *, std::allocator<md::mun::CollectionPoint>> {
        struct CollectionPoint *_field1;
    } _field3;
};

struct vector<std::pair<CGPoint, geo::Color<float, 4, geo::ColorSpace::Linear>>, std::allocator<std::pair<CGPoint, geo::Color<float, 4, geo::ColorSpace::Linear>>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::pair<CGPoint, geo::Color<float, 4, geo::ColorSpace::Linear>>*, std::allocator<std::pair<CGPoint, geo::Color<float, 4, geo::ColorSpace::Linear>>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::pair<CGRect, geo::Color<float, 4, geo::ColorSpace::Linear>>, std::allocator<std::pair<CGRect, geo::Color<float, 4, geo::ColorSpace::Linear>>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::pair<CGRect, geo::Color<float, 4, geo::ColorSpace::Linear>>*, std::allocator<std::pair<CGRect, geo::Color<float, 4, geo::ColorSpace::Linear>>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::pair<unsigned short, unsigned int>, std::allocator<std::pair<unsigned short, unsigned int>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::pair<unsigned short, unsigned int>*, std::allocator<std::pair<unsigned short, unsigned int>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::shared_ptr<FeatureStyleAttributes>, geo::StdAllocator<std::shared_ptr<FeatureStyleAttributes>, geo::codec::Allocator>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::shared_ptr<FeatureStyleAttributes>*, geo::StdAllocator<std::shared_ptr<FeatureStyleAttributes>, geo::codec::Allocator>> {
        void *__value_;
        struct StdAllocator<std::shared_ptr<FeatureStyleAttributes>, geo::codec::Allocator> __value_;
    } __end_cap_;
};

struct vector<std::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>, std::allocator<std::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>*, std::allocator<std::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>, std::allocator<std::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>*, std::allocator<std::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>, std::allocator<std::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>*, std::allocator<std::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>, std::allocator<std::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>*, std::allocator<std::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>, std::allocator<std::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>*, std::allocator<std::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::shared_ptr<ggl::VenueWall::EndCapMesh>, std::allocator<std::shared_ptr<ggl::VenueWall::EndCapMesh>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::shared_ptr<ggl::VenueWall::EndCapMesh>*, std::allocator<std::shared_ptr<ggl::VenueWall::EndCapMesh>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::shared_ptr<ggl::VenueWall::MeshMesh>, std::allocator<std::shared_ptr<ggl::VenueWall::MeshMesh>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::shared_ptr<ggl::VenueWall::MeshMesh>*, std::allocator<std::shared_ptr<ggl::VenueWall::MeshMesh>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>, std::allocator<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>*, std::allocator<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::shared_ptr<md::NavLabel>, geo::StdAllocator<std::shared_ptr<md::NavLabel>, mdm::Allocator>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::shared_ptr<md::NavLabel>*, geo::StdAllocator<std::shared_ptr<md::NavLabel>, mdm::Allocator>> {
        void *__value_;
        struct StdAllocator<std::shared_ptr<md::NavLabel>, mdm::Allocator> __value_;
    } __end_cap_;
};

struct vector<std::variant<md::ARCameraPanEvent, md::ARCameraRotateEvent>, std::allocator<std::variant<md::ARCameraPanEvent, md::ARCameraRotateEvent>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::variant<md::ARCameraPanEvent, md::ARCameraRotateEvent>*, std::allocator<std::variant<md::ARCameraPanEvent, md::ARCameraRotateEvent>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::vector<FeatureRange>, std::allocator<std::vector<FeatureRange>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::vector<FeatureRange>*, std::allocator<std::vector<FeatureRange>>> {
        void *__value_;
    } __end_cap_;
};

struct weak_ptr<ggl::RunLoop::_RunLoopCallbacker> {
    struct _RunLoopCallbacker *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct weak_ptr<md::StylesheetVendor> {
    struct StylesheetVendor *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

#if 0
// Names with conflicting types:
typedef struct ?<double> {
    CDUnion_5a3bdb1d ;
    _Bool __engaged_;
} optional_fcefa02e;

typedef struct ?<double> {
    CDUnion_5a3bdb1d _field1;
    _Bool _field2;
} optional_e65ed27b;

typedef struct ?<double> {
    _Bool _field1;
    union ValueUnion {
        unsigned char _field1[8];
        double _field2;
    } _field2;
} optional_c8a16ffb;

typedef struct ?<double> {
    _Bool _hasValue;
    union ValueUnion {
        unsigned char data[8];
        double type;
    } _value;
} optional_76e85d3d;

#endif

#pragma mark Typedef'd Structures

typedef struct {
    _Bool shouldZoomToFit;
    double idealCenterCoordinateDistance;
    _Bool shouldPreserveUserSpecifiedZoomLevel;
    _Bool resetAfterTracking;
} CDStruct_211b8904;

typedef struct {
    _Bool orthographic;
    double width;
    double height;
    double near;
    double far;
    double horizontalOffset;
} CDStruct_7a7719de;

typedef struct {
    double latitude;
    double longitude;
    double altitude;
} CDStruct_071ac149;

typedef struct {
    struct {
        double _field1;
        double _field2;
    } _field1;
    struct {
        double _field1;
        double _field2;
    } _field2;
} CDStruct_90e2a262;

typedef struct {
    optional_67826ebe position;
    Matrix_6e1d3589 tangent;
    _Bool tangentValid;
    _Bool isPositionBehind;
} CDStruct_6ae0d6dd;

// Ambiguous groups
typedef struct {
    double _field1;
    double _field2;
} CDStruct_c3b9c2ee;

typedef struct {
    double latitude;
    double longitude;
} CDStruct_2c43369c;

typedef struct Box<double, 2> {
    Matrix_2bdd42a3 _minimum;
    Matrix_2bdd42a3 _maximum;
} Box_3d7e3c2c;

typedef struct Box<double, 3> {
    Matrix_6e1d3589 _minimum;
    Matrix_6e1d3589 _maximum;
} Box_96c34b7d;

typedef struct Box<float, 2> {
    Matrix_8746f91e _field1;
    Matrix_8746f91e _field2;
} Box_3fb92e00;

typedef struct CameraFrame<geo::Radians, double> {
    Coordinate3D_332c2c3b _target;
    Unit_e1574806 _distanceFromTarget;
    Unit_5669e52e _pitch;
    Unit_5669e52e _heading;
    Unit_5669e52e _roll;
} CameraFrame_b765d6d7;

typedef struct Color<float, 4, geo::ColorSpace::Linear> {
    struct Matrix<float, 4, 1> _field1;
} Color_b7a9e7da;

typedef struct Coordinate2D<geo::Radians, double> {
    Unit_5669e52e latitude;
    Unit_5669e52e longitude;
} Coordinate2D_cb341d5f;

typedef struct Coordinate3D<geo::Degrees, double> {
    Unit_6d5b752b latitude;
    Unit_6d5b752b longitude;
    Unit_e1574806 altitude;
} Coordinate3D_b0aa8be1;

typedef struct Coordinate3D<geo::Radians, double> {
    Unit_5669e52e latitude;
    Unit_5669e52e longitude;
    Unit_e1574806 altitude;
} Coordinate3D_332c2c3b;

typedef struct Geocentric<double> {
    double _e[3];
} Geocentric_d8fde6f2;

typedef struct Matrix<double, 2, 1> {
    double _e[2];
} Matrix_2bdd42a3;

typedef struct Matrix<double, 3, 1> {
    double _e[3];
} Matrix_6e1d3589;

typedef struct Matrix<double, 4, 4> {
    double _e[16];
} Matrix_08d701e4;

typedef struct Matrix<float, 2, 1> {
    float _e[2];
} Matrix_8746f91e;

typedef struct Matrix<float, 3, 1> {
    float _e[3];
} Matrix_811b2232;

typedef struct Matrix<int, 2, 1> {
    int _e[2];
} Matrix_443f5d51;

typedef struct Mercator2<double> {
    double _e[2];
} Mercator2_57ec32b6;

typedef struct Mercator3<double> {
    double _e[3];
} Mercator3_d8bb135c;

typedef struct OrientedBox<double, 2U, double, double> {
    RigidTransform_b9386d13 _transform;
    Box_3d7e3c2c _bounds;
} OrientedBox_11e3d904;

typedef struct RigidTransform<double, double> {
    Matrix_6e1d3589 _translation;
    struct Quaternion<double> _rotation;
} RigidTransform_b9386d13;

typedef struct Unit<geo::DegreeUnitDescription, double> {
    double _value;
} Unit_6d5b752b;

typedef struct Unit<geo::MeterUnitDescription, double> {
    double _value;
} Unit_e1574806;

typedef struct Unit<geo::RadianUnitDescription, double> {
    double _value;
} Unit_5669e52e;

typedef struct View<double> {
    RigidTransform_b9386d13 _field1;
    Matrix_08d701e4 _field2;
    Matrix_08d701e4 _field3;
    Matrix_08d701e4 _field4;
    double _field5;
    double _field6;
    struct ViewSize _field7;
    int _field8;
} View_a667aa2f;

typedef struct _retain_ptr<VKCamera *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_vptr$_retain_ptr;
    VKCamera *_obj;
    struct _retain_objc_arc _retain;
    struct _release_objc_arc _release;
} _retain_ptr_a171892e;

typedef struct _retain_ptr<VKLabelNavRoadLabel *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct _retain_objc_arc _field3;
    struct _release_objc_arc _field4;
} _retain_ptr_408ec453;

typedef struct _retain_ptr<VKPolylineOverlay *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_vptr$_retain_ptr;
    VKPolylineOverlay *_obj;
    struct _retain_objc_arc _retain;
    struct _release_objc_arc _release;
} _retain_ptr_816b7ffd;

typedef struct function<NSString *()> {
    struct __value_func<NSString *()> {
        struct type __buf_;
        void *__f_;
    } __f_;
} function_f1e13719;

typedef struct function<bool (unsigned long long)> {
    struct __value_func<bool (unsigned long long)> {
        struct type _field1;
        void *_field2;
    } _field1;
} function_ce5c9822;

typedef struct function<void ()> {
    struct __value_func<void ()> {
        struct type __buf_;
        void *__f_;
    } __f_;
} function_2e574590;

typedef struct function<void (GEOExperimentConfiguration *)> {
    struct __value_func<void (GEOExperimentConfiguration *)> {
        struct type __buf_;
        void *__f_;
    } __f_;
} function_0c3951cf;

typedef struct function<void (GEOResourceManifestManager *)> {
    struct __value_func<void (GEOResourceManifestManager *)> {
        struct type __buf_;
        void *__f_;
    } __f_;
} function_6481840f;

typedef struct function<void (GEOResourceManifestManager *, GEOActiveTileGroup *, GEOActiveTileGroup *)> {
    struct __value_func<void (GEOResourceManifestManager *, GEOActiveTileGroup *, GEOActiveTileGroup *)> {
        struct type __buf_;
        void *__f_;
    } __f_;
} function_0527ddd4;

typedef struct optional<VKRouteLineSnapResult> {
    union {
        char _field1;
        struct VKRouteLineSnapResult _field2;
    } _field1;
    _Bool _field2;
} optional_db527fce;

typedef struct optional<float> {
    _Bool _hasValue;
    union ValueUnion {
        unsigned char data[4];
        float type;
    } _value;
} optional_44235073;

typedef struct optional<gm::Matrix<double, 3, 1>> {
    _Bool _hasValue;
    union ValueUnion {
        unsigned char data[24];
        Matrix_6e1d3589 type;
    } _value;
} optional_67826ebe;

typedef struct optional<gss::RouteLegWhen> {
    _Bool _hasValue;
    ValueUnion_42b55164 _value;
} optional_f92fc060;

typedef struct optional<gss::When> {
    union {
        char __null_state_;
        unsigned char __val_;
    } ;
    _Bool __engaged_;
} optional_51deb342;

typedef struct optional<md::RoadSignOrientationResolver> {
    _Bool _field1;
    union ValueUnion {
        unsigned char _field1[24];
        struct RoadSignOrientationResolver _field2;
    } _field2;
} optional_2c5953d3;

typedef struct optional<md::mun::CollectionPoint> {
    _Bool _field1;
    union ValueUnion {
        unsigned char _field1[1864];
        struct CollectionPoint _field2;
    } _field2;
} optional_89838882;

typedef struct optional<std::pair<geo::Mercator3<double>, geo::Mercator3<double>>> {
    union {
        char __null_state_;
        struct pair<geo::Mercator3<double>, geo::Mercator3<double>> __val_;
    } ;
    _Bool __engaged_;
} optional_89639096;

typedef struct pair<const void *, unsigned long> {
    void *_field1;
    unsigned long long _field2;
} pair_802f950e;

typedef struct shared_ptr<altitude::GeoServicesLoadJob> {
    struct GeoServicesLoadJob *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_97fa0047;

typedef struct shared_ptr<gdc::Camera> {
    struct Camera *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_46708168;

typedef struct shared_ptr<ggl::BitmapDataBase> {
    struct BitmapDataBase *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_fa6aa836;

typedef struct shared_ptr<ggl::MetalDevice> {
    struct MetalDevice *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_94286ce0;

typedef struct shared_ptr<ggl::OESDevice> {
    struct OESDevice *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_2063da68;

typedef struct shared_ptr<ggl::Texture2D> {
    struct Texture2D *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_479d1306;

typedef struct shared_ptr<grl::IconManager> {
    struct IconManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_6d521cf7;

typedef struct shared_ptr<gss::StylesheetManager<gss::PropertyID>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_3e3c7f86;

typedef struct shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> {
    void *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_60abd8cc;

typedef struct shared_ptr<md::MaterialTextureManager> {
    struct MaterialTextureManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_3c073566;

typedef struct shared_ptr<md::MeshSetStorage> {
    struct MeshSetStorage *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_fb8448a7;

typedef struct shared_ptr<md::RealisticCommandBufferSelector> {
    struct RealisticCommandBufferSelector *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_0711ef20;

typedef struct shared_ptr<md::StandardCommandBufferSelector> {
    struct StandardCommandBufferSelector *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_64671d97;

typedef struct shared_ptr<md::StylesheetVendor> {
    struct StylesheetVendor *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_dd2d1f5e;

typedef struct shared_ptr<md::TaskContext> {
    struct TaskContext *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_e963992e;

typedef struct shared_ptr<md::TextureManager> {
    struct TextureManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_f2399894;

typedef struct unordered_map<gdc::LayerDataRequestKey, std::shared_ptr<gdc::LayerData>, gdc::LayerDataRequestKeyHash, std::equal_to<gdc::LayerDataRequestKey>, std::allocator<std::pair<const gdc::LayerDataRequestKey, std::shared_ptr<gdc::LayerData>>>> {
    struct __hash_table<std::__hash_value_type<gdc::LayerDataRequestKey, std::shared_ptr<gdc::LayerData>>, std::__unordered_map_hasher<gdc::LayerDataRequestKey, std::__hash_value_type<gdc::LayerDataRequestKey, std::shared_ptr<gdc::LayerData>>, gdc::LayerDataRequestKeyHash, std::equal_to<gdc::LayerDataRequestKey>, true>, std::__unordered_map_equal<gdc::LayerDataRequestKey, std::__hash_value_type<gdc::LayerDataRequestKey, std::shared_ptr<gdc::LayerData>>, std::equal_to<gdc::LayerDataRequestKey>, gdc::LayerDataRequestKeyHash, true>, std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey, std::shared_ptr<gdc::LayerData>>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<gdc::LayerDataRequestKey, std::shared_ptr<gdc::LayerData>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<gdc::LayerDataRequestKey, std::shared_ptr<gdc::LayerData>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<gdc::LayerDataRequestKey, std::shared_ptr<gdc::LayerData>>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<gdc::LayerDataRequestKey, std::shared_ptr<gdc::LayerData>>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<gdc::LayerDataRequestKey, std::shared_ptr<gdc::LayerData>>, void *>*> {
                void *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<gdc::LayerDataRequestKey, std::__hash_value_type<gdc::LayerDataRequestKey, std::shared_ptr<gdc::LayerData>>, gdc::LayerDataRequestKeyHash, std::equal_to<gdc::LayerDataRequestKey>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__unordered_map_equal<gdc::LayerDataRequestKey, std::__hash_value_type<gdc::LayerDataRequestKey, std::shared_ptr<gdc::LayerData>>, std::equal_to<gdc::LayerDataRequestKey>, gdc::LayerDataRequestKeyHash, true>> {
            float _field1;
        } _field4;
    } _field1;
} unordered_map_eabd84a1;

typedef struct vector<GeoCodecsFeatureStylePair, geo::StdAllocator<GeoCodecsFeatureStylePair, mdm::Allocator>> {
    struct GeoCodecsFeatureStylePair *_field1;
    struct GeoCodecsFeatureStylePair *_field2;
    struct __compressed_pair<GeoCodecsFeatureStylePair *, geo::StdAllocator<GeoCodecsFeatureStylePair, mdm::Allocator>> {
        struct GeoCodecsFeatureStylePair *_field1;
        struct StdAllocator<GeoCodecsFeatureStylePair, mdm::Allocator> _field2;
    } _field3;
} vector_20f0823a;

typedef struct vector<geo::Coordinate2D<geo::Radians, double>, std::allocator<geo::Coordinate2D<geo::Radians, double>>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<geo::Coordinate2D<geo::Radians, double>*, std::allocator<geo::Coordinate2D<geo::Radians, double>>> {
        void *_field1;
    } _field3;
} vector_6baf6815;

typedef struct vector<geo::fast_shared_ptr<md::RouteLineSection, mdm::MDAllocator>, std::allocator<geo::fast_shared_ptr<md::RouteLineSection, mdm::MDAllocator>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<geo::fast_shared_ptr<md::RouteLineSection, mdm::MDAllocator>*, std::allocator<geo::fast_shared_ptr<md::RouteLineSection, mdm::MDAllocator>>> {
        void *__value_;
    } __end_cap_;
} vector_2082bb8e;

typedef struct vector<gm::Matrix<float, 2, 1>, std::allocator<gm::Matrix<float, 2, 1>>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<gm::Matrix<float, 2, 1>*, std::allocator<gm::Matrix<float, 2, 1>>> {
        void *_field1;
    } _field3;
} vector_9022e479;

typedef struct weak_ptr<ggl::RunLoop::_RunLoopCallbacker> {
    struct _RunLoopCallbacker *__ptr_;
    struct __shared_weak_count *__cntrl_;
} weak_ptr_bda9c8ce;

#pragma mark Named Unions

#if 0
// Names with conflicting types:
typedef union {
    unsigned char data[1];
    unsigned char type;
} ValueUnion_42b55164;

#endif

#pragma mark Typedef'd Unions

typedef union {
    char __null_state_;
    double __val_;
} CDUnion_5a3bdb1d;

