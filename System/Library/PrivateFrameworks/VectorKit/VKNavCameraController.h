//
//     Generated by classdumpios 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class GEOMapRegion, NSString, VKAttachedNavGestureCameraBehavior, VKDaVinciGestureCameraController, VKDetachedNavGestureCameraBehavior, VKGestureCameraBehavior, VKNavContext, VKSceneConfiguration, VKScreenCanvas, VKTimedAnimation;
@protocol VKInteractiveMap;

__attribute__((visibility("hidden")))
@interface VKNavCameraController
{
    unsigned char _cameraType;	// 8 = 0x8
    unsigned char _headingType;	// 9 = 0x9
    Unit_5669e52e _puckCourse;	// 16 = 0x10
    Coordinate3D_332c2c3b _puckCoordinate;	// 24 = 0x18
    Unit_5669e52e _headingDelta;	// 48 = 0x30
    Unit_5669e52e _headingMinDelta;	// 56 = 0x38
    CameraFrame_b765d6d7 _lastCalculatedCameraFrame;	// 64 = 0x40
    CameraFrame_b765d6d7 _cameraFrame;	// 120 = 0x78
    _Bool _needsUpdate;	// 176 = 0xb0
    struct Spring<double, 1, gdc::SpringType::Linear> _pitchSpring;	// 184 = 0xb8
    struct Spring<double, 1, gdc::SpringType::Angular> _headingSpring;	// 224 = 0xe0
    struct Spring<double, 1, gdc::SpringType::Linear> _distanceFromTargetSpring;	// 264 = 0x108
    struct Spring<double, 2, gdc::SpringType::Linear> _screenPositionSpring;	// 304 = 0x130
    Unit_e1574806 _cameraDistanceFromTarget;	// 368 = 0x170
    Unit_5669e52e _cameraPitch;	// 376 = 0x178
    double _previousUpdateTime;	// 384 = 0x180
    double _ignoreStyleChangeStartTime;	// 392 = 0x188
    double _maxZoomScale;	// 400 = 0x190
    double _minZoomScale;	// 408 = 0x198
    VKGestureCameraBehavior *_gestureBehavior;	// 416 = 0x1a0
    VKAttachedNavGestureCameraBehavior *_attachedGestureBehavior;	// 424 = 0x1a8
    VKDetachedNavGestureCameraBehavior *_detachedGestureBehavior;	// 432 = 0x1b0
    VKDaVinciGestureCameraController *_davinciGestureCameraController;	// 440 = 0x1b8
    _Bool _isDetached;	// 448 = 0x1c0
    _Bool _isIgnoringStyleChange;	// 449 = 0x1c1
    _Bool _panning;	// 450 = 0x1c2
    _Bool _rotating;	// 451 = 0x1c3
    _Bool _pitching;	// 452 = 0x1c4
    _Bool _zooming;	// 453 = 0x1c5
    VKTimedAnimation *_transitionAnimation;	// 456 = 0x1c8
    VKTimedAnimation *_snapPitchAnimation;	// 464 = 0x1d0
    VKTimedAnimation *_snapHeadingAnimation;	// 472 = 0x1d8
    CameraFrame_b765d6d7 _transitionFrame;	// 480 = 0x1e0
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> _currentStyleName;	// 536 = 0x218
    struct vector<geo::Coordinate3D<geo::Radians, double>, std::allocator<geo::Coordinate3D<geo::Radians, double>>> _coordinatesToFrame;	// 560 = 0x230
    unsigned char _styleManeuversToFrame;	// 584 = 0x248
    unsigned char _maneuversToFrame;	// 585 = 0x249
    unsigned char _styleLegsToFrame;	// 586 = 0x24a
    unsigned char _segmentsToFrame;	// 587 = 0x24b
    double _minCameraHeight;	// 592 = 0x250
    double _maxCameraHeight;	// 600 = 0x258
    Unit_5669e52e _minCameraPitch;	// 608 = 0x260
    Unit_5669e52e _maxCameraPitch;	// 616 = 0x268
    struct VKEdgeInsets _previousMapEdgeInsets;	// 624 = 0x270
    struct VKEdgeInsets _framingEdgeInset;	// 640 = 0x280
    struct VKEdgeInsets _framingEdgeInsetProportional;	// 656 = 0x290
    struct VKEdgeInsets _clientFramingInsets;	// 672 = 0x2a0
    Matrix_8746f91e _puckMovementBoundsMin;	// 688 = 0x2b0
    Matrix_8746f91e _puckMovementBoundsMax;	// 696 = 0x2b8
    Matrix_8746f91e _puckScreenPosition;	// 704 = 0x2c0
    double _minHeightDeltaChangeHorizontal;	// 712 = 0x2c8
    double _maxHeightDeltaChangeHorizontal;	// 720 = 0x2d0
    double _minHeightDeltaChangeVertical;	// 728 = 0x2d8
    double _maxHeightDeltaChangeVertical;	// 736 = 0x2e0
    double _halfPuckSize;	// 744 = 0x2e8
    Box_3d7e3c2c _viewableScreenRect;	// 752 = 0x2f0
    Box_3d7e3c2c _framingScreenRect;	// 784 = 0x310
    _Bool _enablePan;	// 816 = 0x330
    _Bool _enableZoom;	// 817 = 0x331
    _Bool _enablePitch;	// 818 = 0x332
    _Bool _enableRotate;	// 819 = 0x333
    float _panReturnDelayTime;	// 820 = 0x334
    unsigned char _alternateFramingSource;	// 824 = 0x338
    unsigned char _secondaryAlternateFramingSource;	// 825 = 0x339
    double _maxFramingDistance;	// 832 = 0x340
    double _framingDistanceAfterManeuver;	// 840 = 0x348
    VKNavContext *_navContext;	// 848 = 0x350
    CDStruct_2c43369c _locationCoordinate;	// 856 = 0x358
    struct PolylineCoordinate _routeCoordinate;	// 872 = 0x368
    _Bool _frameAllGroupedManeuvers;	// 880 = 0x370
    unsigned char _maxManeuversToFrame;	// 881 = 0x371
    _Bool _ignorePointsBehind;	// 882 = 0x372
    Coordinate3D_332c2c3b _routeFocusCoordinate;	// 888 = 0x378
    unsigned long long _lastTargetStyleIdentifier;	// 912 = 0x390
    double _desiredZoomScale;	// 920 = 0x398
    float _animationTime;	// 928 = 0x3a0
    _Bool _isTracking;	// 932 = 0x3a4
    shared_ptr_e963992e _taskContext;	// 936 = 0x3a8
    double _depthNear;	// 952 = 0x3b8
    _Bool _leftHanded;	// 960 = 0x3c0
    _Bool _sentZoomNotification;	// 961 = 0x3c1
    _Bool _enableDynamicFrameRate;	// 962 = 0x3c2
    Coordinate3D_332c2c3b _cornerCoordinates[4];	// 968 = 0x3c8
    struct WindowedSampler<60UL> _pixelSamples;	// 1064 = 0x428
    struct Sampler _requesteDisplayRateSampler;	// 1592 = 0x638
    long long _requestedDisplayRate;	// 1632 = 0x660
    _Bool _isElevatedRoute;	// 1640 = 0x668
    void *_cameraManager;	// 1648 = 0x670
    long long _defaultMaxDisplayRate;	// 1656 = 0x678
    struct vector<NavCameraPixelFrameRate, std::allocator<NavCameraPixelFrameRate>> _pixelChangeFrameRate;	// 1664 = 0x680
    Matrix_6e1d3589 _lastProjectedPosition;	// 1688 = 0x698
    double _farClipPlaneFactor;	// 1712 = 0x6b0
    struct shared_ptr<gss::StylesheetQuery<gss::ScenePropertyID>> _sceneQuery;	// 1720 = 0x6b8
    VKScreenCanvas<VKInteractiveMap> *_screenCanvas;	// 1736 = 0x6c8
    VKSceneConfiguration *_sceneConfiguration;	// 1744 = 0x6d0
    long long _baseDisplayRate;	// 1752 = 0x6d8
}

- (id).cxx_construct;	// IMP=0x000000000085dea2
- (void).cxx_destruct;	// IMP=0x000000000085dd73
@property(nonatomic) long long baseDisplayRate; // @synthesize baseDisplayRate=_baseDisplayRate;
@property(nonatomic) struct VKEdgeInsets clientFramingInsets; // @synthesize clientFramingInsets=_clientFramingInsets;
@property(nonatomic) __weak VKSceneConfiguration *sceneConfiguration; // @synthesize sceneConfiguration=_sceneConfiguration;
@property(nonatomic) __weak VKScreenCanvas<VKInteractiveMap> *screenCanvas; // @synthesize screenCanvas=_screenCanvas;
- (float)maxPitchForNormalizedZoomLevel:(float)arg1;	// IMP=0x000000000085dbd4
- (float)idealPitchForNormalizedZoomLevel:(float)arg1;	// IMP=0x000000000085db18
- (float)minPitchForNormalizedZoomLevel:(float)arg1;	// IMP=0x000000000085da5c
- (float)minimumNormalizedZoomLevel;	// IMP=0x000000000085d99b
- (float)maximumNormalizedZoomLevel;	// IMP=0x000000000085d8e9
- (long long)tileSize;	// IMP=0x000000000085d7b8
- (void)_updateCameraLimits;	// IMP=0x000000000085cdfa
- (void)pitchTo:(double)arg1 animated:(_Bool)arg2;	// IMP=0x000000000085ca68
- (void)rotateTo:(double)arg1 animated:(_Bool)arg2;	// IMP=0x000000000085c6c6
- (_Bool)snapMapIfNecessary:(_Bool)arg1;	// IMP=0x000000000085c473
- (_Bool)usesVKCamera;	// IMP=0x000000000085c46b
- (float)_currentRoadSignOffset;	// IMP=0x000000000085c3e4
- (void)_setNavCameraAnimationComplete:(_Bool)arg1;	// IMP=0x000000000085c36b
- (void)_setNavCameraIsDetached:(_Bool)arg1;	// IMP=0x000000000085c26c
- (unsigned char)cameraHeadingType;	// IMP=0x000000000085c1ff
- (void)canvasDidLayout;	// IMP=0x000000000085c190
- (void)setCamera:(shared_ptr_46708168)arg1;	// IMP=0x000000000085c0b0
- (void)setVkCamera:(id)arg1;	// IMP=0x000000000085c025
- (void)stopAnimations;	// IMP=0x000000000085bf96
- (void)setCameraFrame:(CameraFrame_b765d6d7)arg1;	// IMP=0x000000000085bf5b
- (CameraFrame_b765d6d7)cameraFrame;	// IMP=0x000000000085bf27
- (void)_snapHeading;	// IMP=0x000000000085bb9c
- (void)_snapPitch;	// IMP=0x000000000085b889
- (void)setEdgeInsets:(struct VKEdgeInsets)arg1;	// IMP=0x000000000085b82d
- (void)setEdgeInsetsAnimating:(_Bool)arg1;	// IMP=0x000000000085b788
- (Unit_5669e52e)maxCameraPitch;	// IMP=0x000000000085b76f
- (Unit_5669e52e)minCameraPitch;	// IMP=0x000000000085b756
- (double)maxZoomHeight;	// IMP=0x000000000085b748
- (double)minZoomHeight;	// IMP=0x000000000085b73a
- (double)maxZoomScale;	// IMP=0x000000000085b728
- (double)minZoomScale;	// IMP=0x000000000085b716
- (void)updateState;	// IMP=0x000000000085b710
@property(nonatomic) double zoomScale;
- (void)_updateZoomScaleLimts;	// IMP=0x000000000085b56b
- (void)_setNeedsUpdate;	// IMP=0x000000000085b53f
- (void)navContextCameraHeadingOverrideDidChange:(id)arg1;	// IMP=0x000000000085b4e9
- (void)navContextStateDidChange:(id)arg1;	// IMP=0x000000000085b4d7
- (void)_updateForAnimatedEdgeInsets;	// IMP=0x000000000085b409
- (void)updateSpringsForFramingCamera;	// IMP=0x000000000085ac89
- (void)_updateRouteSinuosity;	// IMP=0x000000000085a983
- (void)_addAdditionalRoutePointsToFrameToList:(void *)arg1;	// IMP=0x000000000085a758
- (Coordinate3D_332c2c3b)_coordinateForGeoLocation:(CDStruct_071ac149)arg1;	// IMP=0x000000000085a724
- (void)updatePointsToFrame;	// IMP=0x000000000085945d
- (_Bool)_addStepToFraming:(unsigned long long)arg1 forRoute:(id)arg2;	// IMP=0x00000000008590e3
- (void)updateManeuversToFrame;	// IMP=0x0000000000859075
- (Coordinate3D_332c2c3b)routeCoordinateAtDistance:(double)arg1;	// IMP=0x0000000000858ee6
- (Coordinate3D_332c2c3b)routeLocationAtDistance:(double)arg1 fromManeuver:(unsigned long long)arg2;	// IMP=0x0000000000858adf
- (double)distanceToManeuver:(unsigned long long)arg1;	// IMP=0x000000000085895b
- (void)updateSpringsForTrackingCamera;	// IMP=0x0000000000858897
- (Box_3d7e3c2c)calculateViewableScreenRect;	// IMP=0x0000000000858860
- (Box_3d7e3c2c)calculateViewableScreenRectForEdgeInsets:(struct VKEdgeInsets)arg1;	// IMP=0x0000000000858504
- (Unit_5669e52e)calculateHeading;	// IMP=0x0000000000857f68
- (void)stop;	// IMP=0x0000000000857cc9
- (_Bool)isRotateEnabled;	// IMP=0x0000000000857cc1
- (_Bool)isPitchEnabled;	// IMP=0x0000000000857cb9
- (void)stopSnappingAnimations;	// IMP=0x0000000000857cb3
- (_Bool)_canZoomOut;	// IMP=0x0000000000857c7b
- (_Bool)canZoomOutForTileSize:(long long)arg1;	// IMP=0x0000000000857c69
- (_Bool)_canZoomIn;	// IMP=0x0000000000857c31
- (_Bool)canZoomInForTileSize:(long long)arg1;	// IMP=0x0000000000857c1f
- (double)topDownMinimumZoomLevel;	// IMP=0x0000000000857b37
- (double)currentZoomLevel;	// IMP=0x000000000085792f
- (double)maximumZoomLevel;	// IMP=0x0000000000857847
- (double)minimumZoomLevel;	// IMP=0x000000000085775f
- (double)_normalizedZoomLevelForDisplayZoomLevel:(double)arg1;	// IMP=0x0000000000857644
- (_Bool)canEnter3DMode;	// IMP=0x000000000085763c
- (void)setNavContext:(id)arg1;	// IMP=0x00000000008575a6
- (void)returnToPuck;	// IMP=0x000000000085758c
- (void)returnToTrackingWithDelay:(double)arg1 resetZoom:(_Bool)arg2;	// IMP=0x0000000000856cba
- (void)animateCameraWithDuration:(float)arg1 fromFrame:(const void *)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000000856552
- (CameraFrame_b765d6d7)restingCameraFrame;	// IMP=0x00000000008563de
- (CameraFrame_b765d6d7)currentCameraFrame;	// IMP=0x0000000000856256
@property(nonatomic) double pitch;
@property(nonatomic) double heading;
@property(readonly, nonatomic) double altitude;
@property(nonatomic) double distanceFromCenterCoordinate;
@property(nonatomic) CDStruct_c3b9c2ee centerCoordinate;
- (void)_updateStyles;	// IMP=0x0000000000855d33
- (void)_updateSceneStyles:(_Bool)arg1;	// IMP=0x0000000000854a42
- (void)_updateSceneQuery;	// IMP=0x00000000008545fb
- (void)stylesheetDidReload;	// IMP=0x00000000008545da
- (void)stylesheetDidChange;	// IMP=0x00000000008545c8
- (_Bool)_updateSprings:(double)arg1;	// IMP=0x00000000008541cd
- (Matrix_2bdd42a3)puckScreenPoint;	// IMP=0x0000000000854146
- (void)_updateDebugOverlay;	// IMP=0x0000000000852ac8
- (void)_updateDebugText;	// IMP=0x00000000008526f4
- (shared_ptr_60abd8cc)_getActiveSceneManager;	// IMP=0x0000000000852637
- (id)_debugText:(_Bool)arg1 showNavCameraDebugConsoleAttributes:(_Bool)arg2;	// IMP=0x0000000000851508
- (id)detailedDescription;	// IMP=0x0000000000851403
- (_Bool)_hasRunningAnimation;	// IMP=0x00000000008513a3
- (double)_calculateMaxPixelChangeAndUpdateCorners;	// IMP=0x000000000085121c
- (void)updateWithTimestamp:(double)arg1 withContext:(void *)arg2;	// IMP=0x0000000000850bd1
- (long long)displayRate;	// IMP=0x0000000000850b2f
- (long long)defaultDisplayRate;	// IMP=0x0000000000850927
- (void)_updateClipPlanes;	// IMP=0x0000000000850782
- (void)resetSpringsToResting;	// IMP=0x000000000085071d
- (void)updateCameraState;	// IMP=0x0000000000850641
- (_Bool)wantsTimerTick;	// IMP=0x0000000000850631
- (void)puckAnimator:(id)arg1 updatedTargetPosition:(const void *)arg2;	// IMP=0x000000000085060f
- (void)puckAnimatorDidStop:(id)arg1;	// IMP=0x0000000000850609
- (void)updateLocation:(const void *)arg1 andCourse:(const void *)arg2;	// IMP=0x000000000085004e
- (void)puckAnimator:(id)arg1 getElevation:(double *)arg2 withCoordinate:(const void *)arg3;	// IMP=0x000000000084ffe4
- (void)puckAnimator:(id)arg1 updatedPosition:(const void *)arg2 course:(const void *)arg3;	// IMP=0x000000000084ff3d
- (void)puckAnimator:(id)arg1 runAnimation:(id)arg2;	// IMP=0x000000000084feeb
- (_Bool)isGesturing;	// IMP=0x000000000084feae
- (_Bool)tapAtPoint:(struct CGPoint)arg1;	// IMP=0x000000000084fea6
- (void)transferGestureState:(id)arg1;	// IMP=0x000000000084fea0
- (void)stopPitchingWithFocusPoint:(struct CGPoint)arg1;	// IMP=0x000000000084fdb5
- (void)updatePitchWithFocusPoint:(struct CGPoint)arg1 degrees:(double)arg2;	// IMP=0x000000000084fd1c
- (void)updatePitchWithFocusPoint:(struct CGPoint)arg1 translation:(double)arg2;	// IMP=0x000000000084fc83
- (void)startPitchingWithFocusPoint:(struct CGPoint)arg1;	// IMP=0x000000000084fbbf
- (void)stopRotatingWithFocusPoint:(struct CGPoint)arg1;	// IMP=0x000000000084faca
- (void)updateRotationWithFocusPoint:(struct CGPoint)arg1 newValue:(double)arg2;	// IMP=0x000000000084fa31
- (void)startRotatingWithFocusPoint:(struct CGPoint)arg1;	// IMP=0x000000000084f96d
- (void)stopPanningAtPoint:(struct CGPoint)arg1;	// IMP=0x000000000084f89d
- (void)updatePanWithTranslation:(struct CGPoint)arg1;	// IMP=0x000000000084f80e
- (void)startPanningAtPoint:(struct CGPoint)arg1 panAtStartPoint:(_Bool)arg2;	// IMP=0x000000000084f721
- (void)_updateObserverCouldZoomIn:(_Bool)arg1 couldZoomOut:(_Bool)arg2;	// IMP=0x000000000084f52e
- (void)stopPinchingWithFocusPoint:(struct CGPoint)arg1;	// IMP=0x000000000084f340
- (void)updatePinchWithFocusPoint:(struct CGPoint)arg1 oldFactor:(double)arg2 newFactor:(double)arg3;	// IMP=0x000000000084f29d
- (void)startPinchingWithFocusPoint:(struct CGPoint)arg1;	// IMP=0x000000000084f1ef
- (void)stopIgnoreStyleChange;	// IMP=0x000000000084f1de
- (void)startIgnoreStyleChangeTimer;	// IMP=0x000000000084f1b5
- (void)zoom:(double)arg1 withFocusPoint:(struct CGPoint)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x000000000084f031
- (void)_setDetached:(_Bool)arg1;	// IMP=0x000000000084ee88
- (id)_detachedGestureController;	// IMP=0x000000000084ee34
- (void)startWithPounce:(_Bool)arg1 startLocation:(CDStruct_c3b9c2ee)arg2 startCourse:(double)arg3 pounceCompletionHandler:(CDUnknownBlockType)arg4;	// IMP=0x000000000084e4a0
- (void)dealloc;	// IMP=0x000000000084e301
- (id)initWithTaskContext:(shared_ptr_e963992e)arg1 device:(void *)arg2 mapDataAccess:(void *)arg3 animationRunner:(struct AnimationRunner *)arg4 runLoopController:(struct RunLoopController *)arg5 cameraDelegate:(id)arg6;	// IMP=0x000000000084d7ed
- (id)init;	// IMP=0x000000000084d798

// Remaining properties
@property(readonly, nonatomic) struct AnimationRunner *animationRunner;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly, nonatomic) _Bool isFullyPitched;
@property(readonly, nonatomic) _Bool isPitched;
@property(readonly, nonatomic) _Bool isRotated;
@property(readonly, nonatomic) void *mapDataAccess;
@property(readonly, nonatomic) GEOMapRegion *mapRegion;
@property(readonly, nonatomic) GEOMapRegion *mapRegionIgnoringEdgeInsets;
@property(readonly, nonatomic) double maxPitch;
@property(readonly, nonatomic) double minPitch;
@property(readonly, nonatomic) struct RunLoopController *runLoopController;
@property(readonly) Class superclass;

@end

