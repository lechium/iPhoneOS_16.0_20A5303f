//
//     Generated by classdumpios 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class MISSING_TYPE;

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct Page;

struct Vertex;

struct VertexGroup;

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct vector<Page, std::allocator<Page>> {
    struct Page *__begin_;
    struct Page *__end_;
    struct __compressed_pair<Page *, std::allocator<Page>> {
        struct Page *__value_;
    } __end_cap_;
};

struct vector<Vertex, std::allocator<Vertex>> {
    struct Vertex *__begin_;
    struct Vertex *__end_;
    struct __compressed_pair<Vertex *, std::allocator<Vertex>> {
        struct Vertex *__value_;
    } __end_cap_;
};

struct vector<VertexGroup, std::allocator<VertexGroup>> {
    struct VertexGroup *__begin_;
    struct VertexGroup *__end_;
    struct __compressed_pair<VertexGroup *, std::allocator<VertexGroup>> {
        struct VertexGroup *__value_;
    } __end_cap_;
};

struct vector<std::pair<float __attribute__((ext_vector_type(2))), float __attribute__((ext_vector_type(2)))>, std::allocator<std::pair<float __attribute__((ext_vector_type(2))), float __attribute__((ext_vector_type(2)))>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::pair<float __attribute__((ext_vector_type(2))), float __attribute__((ext_vector_type(2)))>*, std::allocator<std::pair<float __attribute__((ext_vector_type(2))), float __attribute__((ext_vector_type(2)))>>> {
        void *__value_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

typedef struct {
    MISSING_TYPE *_field1[4];
} CDStruct_f1db2b5e;

typedef struct {
    struct CGPoint _field1;
    double _field2;
    double _field3;
    double _field4;
} CDStruct_09aaf5d3;

// Template types
typedef struct vector<Vertex, std::allocator<Vertex>> {
    struct Vertex *__begin_;
    struct Vertex *__end_;
    struct __compressed_pair<Vertex *, std::allocator<Vertex>> {
        struct Vertex *__value_;
    } __end_cap_;
} vector_f3c59865;

