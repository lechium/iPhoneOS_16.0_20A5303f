//
//     Generated by classdumpios 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class MISSING_TYPE, UIColor;
@protocol DKOpenGLRendererDelegate;

__attribute__((visibility("hidden")))
@interface DKOpenGLRenderer : NSObject
{
    _Bool _didNotifyRendererDelegate;	// 8 = 0x8
    int mBufferSize;	// 12 = 0xc
    unsigned int mWetPaintProg;	// 16 = 0x10
    unsigned int mDryPaintProg;	// 20 = 0x14
    unsigned int mCompositeProg;	// 24 = 0x18
    unsigned int mTextureProg;	// 28 = 0x1c
    unsigned int mColorProg;	// 32 = 0x20
    unsigned int mAttributes;	// 36 = 0x24
    unsigned int mVbo;	// 40 = 0x28
    struct _NSRange mVertexRange;	// 48 = 0x30
    vector_f3c59865 mContiguousVertexStorage;	// 64 = 0x40
    struct vector<VertexGroup, std::allocator<VertexGroup>> mVertexHistory;	// 88 = 0x58
    struct vector<std::pair<float __attribute__((ext_vector_type(2))), float __attribute__((ext_vector_type(2)))>, std::allocator<std::pair<float __attribute__((ext_vector_type(2))), float __attribute__((ext_vector_type(2)))>>> mNonCollisionSegments;	// 112 = 0x70
    MISSING_TYPE *U_COLOR;	// 144 = 0x90
    struct vector<Page, std::allocator<Page>> mPages;	// 160 = 0xa0
    unsigned int mWetPaintBufferFBO;	// 184 = 0xb8
    unsigned int mWetPaintBufferT;	// 188 = 0xbc
    MISSING_TYPE *mWetPaintBufferSize;	// 192 = 0xc0
    _Bool mSharedContext;	// 200 = 0xc8
    _Bool mPaperTexIsShared;	// 201 = 0xc9
    unsigned int mPaperTex;	// 204 = 0xcc
    MISSING_TYPE *mWinSize;	// 208 = 0xd0
    MISSING_TYPE *mCanvasSize;	// 216 = 0xd8
    MISSING_TYPE *mCanvasOffset;	// 224 = 0xe0
    float mTime;	// 232 = 0xe8
    float mTimeWetBecameDirty;	// 236 = 0xec
    float mParticleLifespan;	// 240 = 0xf0
    struct CGRect mDirtyCanvasRegion;	// 248 = 0xf8
    int mCompositeProgViewportUniformLocation;	// 280 = 0x118
    int mCompositeColorUniformLocation;	// 284 = 0x11c
    int mWetPaintProgTimeUniformLocation;	// 288 = 0x120
    int mWetPaintProgSubtractEndPointsOnlyUniformLocation;	// 292 = 0x124
    int mWetPaintProgLifespanUniformLocation;	// 296 = 0x128
    int mDryPaintProgXCoordOffsetUniformLocation;	// 300 = 0x12c
    int mColorProgColorUniformLocation;	// 304 = 0x130
    int mColorProgModelViewProjectionUniformLocation;	// 308 = 0x134
    int mTextureProgModelViewProjectionUniformLocation;	// 312 = 0x138
    _Bool _undoEnabled;	// 316 = 0x13c
    _Bool _ignoreFirstUndoItem;	// 317 = 0x13d
    _Bool _drawingEnabled;	// 318 = 0x13e
    _Bool _allowWetComposite;	// 319 = 0x13f
    id <DKOpenGLRendererDelegate> _delegate;	// 320 = 0x140
    UIColor *_inkColor;	// 328 = 0x148
    double _lineWidthScale;	// 336 = 0x150
    double _backingScale;	// 344 = 0x158
    long long _numPages;	// 352 = 0x160
    struct CGSize _contentSize;	// 360 = 0x168
    struct CGRect _bounds;	// 376 = 0x178
}

- (id).cxx_construct;	// IMP=0x0000000000011f31
- (void).cxx_destruct;	// IMP=0x0000000000011eb3
@property(nonatomic) long long numPages; // @synthesize numPages=_numPages;
@property(nonatomic) _Bool allowWetComposite; // @synthesize allowWetComposite=_allowWetComposite;
@property(nonatomic) _Bool drawingEnabled; // @synthesize drawingEnabled=_drawingEnabled;
@property(nonatomic) double backingScale; // @synthesize backingScale=_backingScale;
@property(nonatomic) _Bool ignoreFirstUndoItem; // @synthesize ignoreFirstUndoItem=_ignoreFirstUndoItem;
@property(nonatomic, getter=isUndoEnabled) _Bool undoEnabled; // @synthesize undoEnabled=_undoEnabled;
@property(readonly, nonatomic) struct CGSize contentSize; // @synthesize contentSize=_contentSize;
@property(nonatomic) struct CGRect bounds; // @synthesize bounds=_bounds;
@property(nonatomic) double lineWidthScale; // @synthesize lineWidthScale=_lineWidthScale;
@property(retain, nonatomic) UIColor *inkColor; // @synthesize inkColor=_inkColor;
@property(nonatomic) __weak id <DKOpenGLRendererDelegate> delegate; // @synthesize delegate=_delegate;
- (id)snapshotImage;	// IMP=0x0000000000011d28
- (void)updateVertexControllerWithData:(vector_f3c59865)arg1 range:(struct _NSRange)arg2 allowWet:(_Bool)arg3;	// IMP=0x0000000000011bd2
- (void)updateVertexControllerWithDataRange:(struct _NSRange)arg1 allowWet:(_Bool)arg2;	// IMP=0x0000000000011a7e
- (void)didBeginNewStroke;	// IMP=0x0000000000011a3e
- (void)didCompleteStroke;	// IMP=0x0000000000011a2c
- (void)clearComposite;	// IMP=0x0000000000011969
- (void)clearDryPaintBuffer;	// IMP=0x00000000000118a9
- (void)clearWetPaintBuffer;	// IMP=0x0000000000011842
- (void)clear;	// IMP=0x0000000000011807
- (void)resetRendererState;	// IMP=0x000000000001175d
- (_Bool)canvasIsEmpty;	// IMP=0x000000000001174c
- (void)drawContiguousVertexStorageImmediatelyWithLayeredBlending:(_Bool)arg1;	// IMP=0x0000000000011354
- (void)redrawEntireDrawingImmediatelyWithLayeredBlending:(_Bool)arg1;	// IMP=0x0000000000011342
- (void)undo;	// IMP=0x00000000000112f4
- (void)drawComposite;	// IMP=0x0000000000011038
- (void)draw;	// IMP=0x0000000000010fa4
- (void)updateDryForcefully;	// IMP=0x0000000000010e8e
- (void)renderToComposite:(_Bool)arg1;	// IMP=0x0000000000010c2d
- (void)renderToDryPaintBuffer;	// IMP=0x0000000000010a0f
- (void)renderToWetPaintBufferWithRange:(struct _NSRange)arg1;	// IMP=0x00000000000108e0
- (void)updateDryCycleIncludingComposite:(_Bool)arg1;	// IMP=0x00000000000108a3
- (void)updateWet;	// IMP=0x0000000000010889
- (struct CGRect)getVertexBounds;	// IMP=0x000000000001080c
- (struct CGRect)regionWithVertices:(vector_f3c59865)arg1 withInflationAmount:(float)arg2;	// IMP=0x000000000001054d
- (void)update;	// IMP=0x0000000000010322
- (_Bool)detectCollision:: /* Error: Ran out of types for this method. */;	// IMP=0x000000000001021a
- (void)addPoints:(id)arg1 withSegmentLength:(unsigned long long)arg2;	// IMP=0x000000000000fa9c
- (void)removeVertexHistoryElement;	// IMP=0x000000000000fa2c
- (void)appendVertexHistoryElement;	// IMP=0x000000000000f9a4
- (void)initializeFrameBuffers;	// IMP=0x000000000000f6d0
- (void)destroyFrameBuffers;	// IMP=0x000000000000f63f
- (void)didResize;	// IMP=0x000000000000f53b
- (_Bool)initGL;	// IMP=0x000000000000ea1a
- (void)teardown;	// IMP=0x000000000000e9ab
- (void)dealloc;	// IMP=0x000000000000e8e8
- (id)init;	// IMP=0x000000000000e83f
- (id)initWithBounds:(struct CGRect)arg1 scale:(double)arg2;	// IMP=0x000000000000e80c
- (id)initWithBounds:(struct CGRect)arg1 scale:(double)arg2 bufferSize:(int)arg3 sharedContext:(_Bool)arg4;	// IMP=0x000000000000e730

@end

